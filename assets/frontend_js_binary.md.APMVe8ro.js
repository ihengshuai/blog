import{_ as e,c as p,J as s,V as o,o as r,G as a}from"./chunks/framework.SV1ROkXV.js";const u=JSON.parse('{"title":"走进前端二进制","description":"二进制在数据交互和存储方面扮演重要角色，掌握二进制的一些使用方法提升自己的微观世界技能","frontmatter":{"title":"走进前端二进制","description":"二进制在数据交互和存储方面扮演重要角色，掌握二进制的一些使用方法提升自己的微观世界技能","keywords":"二进制,前端二进制,ArrayBuffer,File,Blob,Uint8Array,DataView,ArrayLike","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-js.png"},"headers":[],"relativePath":"frontend/js/binary.md","filePath":"frontend/js/binary.md","lastUpdated":1709440279000}'),t={name:"frontend/js/binary.md"},c=o(`<h1 id="走进前端二进制" tabindex="-1">走进前端二进制 <a class="header-anchor" href="#走进前端二进制" aria-label="Permalink to &quot;走进前端二进制&quot;">​</a></h1><p>在实际的开发过程中经常会遇到二进制数据，常见的就有文件的上传、下载等等，还有比较重要的图片裁剪、灰度处理等等，这些场景都会涉及到二进制。相信很多开发者对这方面可能一知半解或者就是久而忘之，本人刚开始也是对这方面空白，通过全方位的学习后其实也挺简单，整体总结可以直奔文中</p><p>前端二进制是一种关键的数据表示和处理技术，它在前端开发中具有广泛的应用。了解和掌握二进制数据有助于优化性能、原生数据的处理等等</p><h2 id="arraybuffer" tabindex="-1">ArrayBuffer <a class="header-anchor" href="#arraybuffer" aria-label="Permalink to &quot;ArrayBuffer&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noreferrer"><code>ArrayBuffer</code></a> 对象用来表示通用的、固定长度的原始二进制数据缓冲区；它是一个字节数组，通常在其他语言中称为“byte array”。你不能直接操作 <code>ArrayBuffer</code> 中的内容；而是要通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray" target="_blank" rel="noreferrer">类型化数组对象</a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">DataView</a> 对象来操作</p><p>构造函数：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> ArrayBuffer</span><span style="color:#BABED8;">(bytelength: number)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 创建指定字节的buffer缓冲区</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>实例属性方法：</p><ul><li>byteLength：获取buffer的字节长度和构造函数传入的值相等</li><li>slice：拷贝指定位置的内容并返回新的buffer</li></ul><h2 id="视图对象" tabindex="-1">视图对象 <a class="header-anchor" href="#视图对象" aria-label="Permalink to &quot;视图对象&quot;">​</a></h2><p>arraybuffer只是创建了一块连续的内存地址引用，里面是什么内容不能直接读取，如果要操作buffer对象需要使用视图对象，这些视图对象只是用来解析buffer中的内容实际并不会储存任何内容</p><h3 id="typearray" tabindex="-1">TypeArray <a class="header-anchor" href="#typearray" aria-label="Permalink to &quot;TypeArray&quot;">​</a></h3><p>这些视图对象看上去更像数组Array，但他们并不是数组而是在ArrayBuffer上统称的类型术语，JS提供了多种视图对象：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array" target="_blank" rel="noreferrer">Uint8Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int8Array" target="_blank" rel="noreferrer">Int8Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array" target="_blank" rel="noreferrer">Uint16Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int16Array" target="_blank" rel="noreferrer">Int16Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array" target="_blank" rel="noreferrer">Uint32Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Int32Array" target="_blank" rel="noreferrer">Int32Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float32Array" target="_blank" rel="noreferrer">Float32Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Float64Array" target="_blank" rel="noreferrer">Float64Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray" target="_blank" rel="noreferrer">Uint8ClampedArray</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array" target="_blank" rel="noreferrer">BigInt64Array</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigUint64Array" target="_blank" rel="noreferrer">BigUint64Array</a>等等</p><p>这些视图对象享有共有的方法和属性，所以搞懂某一个通用方法就可以了， 唯一不同的是不同的视图对象对buffer的解析不同如：Uint8Array中是以1字节8位为一个基本单位，Uint16Array则是以2字节16位为一个基本单位，如果buffer的长度为2字节，那么在uint8长度也为2，而uint16的长度则为1</p><h3 id="uint8array" tabindex="-1">Uint8Array <a class="header-anchor" href="#uint8array" aria-label="Permalink to &quot;Uint8Array&quot;">​</a></h3><p><strong><code>Uint8Array</code></strong> 数组类型表示一个 8 位无符号整型数组，8位为一个字节用来表示每个位置上的数字，也就是说Uint8的每一位的数字范围为：0 - 2^8-1(255)，只需要记住每位是由1字节8位组成就可以推到出来（后面会有其他类型的数组都是同一个道理）</p><h4 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h4><p>类型定义：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 创建空长度</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(len: number)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 创建用0太填满的指定长度</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(array </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> arraylike)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 创建时指定值</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(buffer</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> byteOffset</span><span style="color:#89DDFF;">?,</span><span style="color:#BABED8;"> len</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">); </span><span style="color:#676E95;font-style:italic;">// 从存在的buffer中的指定位置截取指定长度</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>列子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 传入存在的buffer</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> buffer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ArrayBuffer</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(buffer)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 确定值</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建指定长度</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 长度为10</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>实例化Uint8Array底层都会创建相应的ArrayBuffer，对实例的操作都是作用到ArrayBuffer上</p><h4 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li>BYTES_PER_ELEMENT：每个元素的字节数，uint8为1字节8位，uint16为2字节16位，以此类推</li><li>buffer：所引用的ArrayBuffer</li><li>byteLength：所引用的ArrayBuffer的长度</li><li>byteOffset：返回具体其引用ArrayBuffer的起始位置偏移量</li><li>length：数组的长度</li></ul><h4 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h4><p>Uint8Array等拥有数组Array的所有<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array#%E6%96%B9%E6%B3%95" target="_blank" rel="noreferrer">方法</a>， 初次之外还有<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/set" target="_blank" rel="noreferrer">set</a>方法常用来合并多个类型数组</p><p>一个将很大的图片分段请求最后合并下载的例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> buffers</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ArrayBuffer</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 储存请求的所有的图片buffer</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bufferTotalLen </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> buffers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reduce</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">p</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> c</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (p </span><span style="color:#89DDFF;">+=</span><span style="color:#BABED8;"> c</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">byteLength)</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // buffer总长度</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> allBuffer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(bufferTotalLen)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 合并成最后的buffer</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> position </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> begin </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;"> (begin </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> buffers</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> subBuffer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">buffers</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">begin</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  allBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">subBuffer</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> position</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  position</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> subBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  begin</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([allBuffer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">buffer]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">image/png</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 构造blob对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#BABED8;">(blob)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>除此之外的其他有关的ArrayBuffer的视图api雷同，可自行查看文档</p><p>以下是几个不同类型的array对同一段buffer的处理不同点： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230731171649334.png" alt=""></p><ul><li><strong><code>Uint8Array</code></strong> —— 将 <code>ArrayBuffer</code> 中的每个字节视为 0 到 255 之间的单个数字（每个字节是 8 位，因此只能容纳那么多）。这称为 “8 位无符号整数”。</li><li><strong><code>Uint16Array</code></strong> —— 将每 2 个字节视为一个 0 到 65535 之间的整数。这称为 “16 位无符号整数”。</li><li><strong><code>Uint32Array</code></strong> —— 将每 4 个字节视为一个 0 到 4294967295 之间的整数。这称为 “32 位无符号整数”。</li><li><strong><code>Float64Array</code></strong> —— 将每 8 个字节视为一个 <code>5.0x10-324</code> 到 <code>1.8x10308</code> 之间的浮点数。</li></ul><h3 id="dataview" tabindex="-1">DataView <a class="header-anchor" href="#dataview" aria-label="Permalink to &quot;DataView&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh/docs/Web/JavaScript/Reference/Global_Objects/DataView" target="_blank" rel="noreferrer">DataView</a> 是在 <code>ArrayBuffer</code> 上的一种特殊的超灵活“未类型化”视图。它允许以任何格式访问任何偏移量（offset）的数据</p><p>上面列出的TypeArray由于固定了格式所以每个索引的格式都是相同的，所以只能使用索引方式获取；而DataView没有固定格式直接作用于ArrayBuffer上，可以使用任何类型进行读取，所以更加灵活</p><h4 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h4><p>其构造方法需要传入buffer实例</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> DataView</span><span style="color:#BABED8;">(buffer</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> offset</span><span style="color:#89DDFF;">?,</span><span style="color:#BABED8;"> len</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="属性-1" tabindex="-1">属性 <a class="header-anchor" href="#属性-1" aria-label="Permalink to &quot;属性&quot;">​</a></h4><ul><li>byteLength：字节长度</li><li>byteOffset：首位在ArrayBuffer中的偏移量</li><li>buffer：ArrayBuffer引用对象</li></ul><h4 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h4><ul><li>getUint8：以Uint8格式获取指定索引的数据</li><li>setUint8：setUint8(idx, value)以Uint8格式设置某个索引位置的值，这些值需满足uint8的值范围。如<code>setUint8(0, 256)</code>将不会满足0~255的范围限制，其值将会变为0</li></ul><p>除了Uint8格式外还有其它TypeArray的格式相同方法，请参考<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView/getInt8" target="_blank" rel="noreferrer">MDN</a></p><h3 id="视图对象总结" tabindex="-1">视图对象总结 <a class="header-anchor" href="#视图对象总结" aria-label="Permalink to &quot;视图对象总结&quot;">​</a></h3><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230731184712284.png" alt=""></p><h2 id="字符二进制" tabindex="-1">字符二进制 <a class="header-anchor" href="#字符二进制" aria-label="Permalink to &quot;字符二进制&quot;">​</a></h2><p>除了一些二进制数据外，还可以将一些字符进行二进制的相互转换，js中提供了<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoder" target="_blank" rel="noreferrer">TextEncoder</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextDecoder" target="_blank" rel="noreferrer">TextDecoder</a>分别将字符转为二进制、将二进制转为字符</p><p>TextEncoder例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将字符转换成Uint8Array</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> encoder </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TextEncoder</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> uint8 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> encoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">encode</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(uint8)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Uint8Array(6) [230, 181, 139, 232, 175, 149, buffer: ArrayBuffer(6), byteLength: 6, byteOffset: 0, length: 6]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>TextDecoder例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将ArrayBuffer转换成字符</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> decoder </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TextDecoder</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#BABED8;">(uint8))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 测试</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#BABED8;">(uint8</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">buffer))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 测试</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#BABED8;">(uint8</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 测</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#BABED8;">(uint8</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">buffer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">)))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 测</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>因为TypeArray位Uint8Array所以和ArrayBuffer的字节长度一致，所以对buffer或array的截取一致获取的结果也一样。从上面可以看到Uint8Array中的[230, 181, 139]表示一个字符测</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> uint8 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">230</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 181</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 139</span><span style="color:#BABED8;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> decoder </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TextDecoder</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">decoder</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">decode</span><span style="color:#BABED8;">(uint8)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 测</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="字符二进制流" tabindex="-1">字符二进制流 <a class="header-anchor" href="#字符二进制流" aria-label="Permalink to &quot;字符二进制流&quot;">​</a></h2><p>字符二进制通常用来处理比较大的数据字符流，而TextEncoder这种通常是一次性进行转换；二进制流也包含<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextEncoderStream" target="_blank" rel="noreferrer">TextEncoderStream</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextDecoderStream" target="_blank" rel="noreferrer">TextDecoderStream</a>两种方法</p><h2 id="blob" tabindex="-1">Blob <a class="header-anchor" href="#blob" aria-label="Permalink to &quot;Blob&quot;">​</a></h2><p><code>Blob</code> 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取，也可以转换成 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer"><code>ReadableStream</code></a> 来用于数据操作</p><p>前面我们讲了ArrayBuffer和TypeArray等相关二进制的方法， 但这些都是操作比较低级的数据，而blob则是有类型的二进制数据，相对于比较低级的数据更容易大家所理解</p><h3 id="构造器" tabindex="-1">构造器 <a class="header-anchor" href="#构造器" aria-label="Permalink to &quot;构造器&quot;">​</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">(blobParts</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>blobParts：由blob、buffersource、string类型组成的数组值</li><li>options： <ul><li>type：表示blob类型，通常都是<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noreferrer">mime类型</a></li><li>endings：是否转换换行符，使 Blob 对应于当前操作系统的换行符（<code>\\r\\n</code> 或 <code>\\n</code>）。默认为 <code>&quot;transparent&quot;</code>（啥也不做），不过也可以是 <code>&quot;native&quot;</code>（转换）</li></ul></li></ul><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 将字符转为blob，并指定类型为 text/plain文本类型</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">测试</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 将buffersource转为blob</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">([</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">])])</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="属性-2" tabindex="-1">属性 <a class="header-anchor" href="#属性-2" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>size：blob的数据大小</li><li>type：blob的类型</li></ul><h3 id="方法-2" tabindex="-1">方法 <a class="header-anchor" href="#方法-2" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li><p>arrayBuffer：异步返回blob的二进制格式的ArrayBuffer</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">blob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">一段文本</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">buffer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> blob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">arrayBuffer</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // ArrayBuffer</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>slice：划分指定范围的blob，类似于array的slice</p></li><li><p>stream：返回blob的可读流<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a>，通常流用来处理比较大的内容</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> readableStream </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> blob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stream</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> readableStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReader</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> done</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">done</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">break</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>text：异步返回blob的所有内容的UTF8格式的字符串</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">blob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">一段文本</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">text </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> blob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">text</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 一段文本</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ul><p>除了使用自身的方法外， 还可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noreferrer">FileReader</a>读取内容并转换</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">reader </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> FileReader</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;font-style:italic;"> e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">result)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsText</span><span style="color:#BABED8;">(blob)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h3><ol><li><p>用blob对象构造url使用，使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL" target="_blank" rel="noreferrer">URL</a>的createObjectURL方法生成一个唯一映射此blob的url</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 一个图片blob</span></span>
<span class="line"><span style="color:#BABED8;">blob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">image/png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">url </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#BABED8;">(blob)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">img</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">src </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用后销毁</span></span>
<span class="line"><span style="color:#BABED8;">URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">revokeObjectURL</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>文件分片上传</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> blob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#BABED8;">([])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chunkSize </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1024</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1024</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">blobs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">offset </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;">(offset </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> blob</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">size) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  blobs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">blob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">offset</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> chunkSize</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  offset</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> chunkSize</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">blobs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">map</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">blob</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> fetch</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">xx</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> data: blob))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ol><p>除了以上外对于canvas也可以转换为blob</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> img </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Image</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> canvas </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">canvas</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> ctx </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> canvas</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">getContext</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">ctx</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">drawImage</span><span style="color:#BABED8;">(img</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">canvas</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">toBlob</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">e</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(e))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 转为为 blob</span></span>
<span class="line"><span style="color:#BABED8;">canvas</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">toDataURL</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 转为为 base64字符串</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="file" tabindex="-1">File <a class="header-anchor" href="#file" aria-label="Permalink to &quot;File&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File" target="_blank" rel="noreferrer">文件（File）</a>接口提供有关文件的信息，<code>File</code> 对象继承了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noreferrer"><code>Blob</code></a>，并扩展了与文件系统相关的功能，且可以用在任意的 Blob 类型的 context 中。比如说， <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noreferrer">FileReader</a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL_static" target="_blank" rel="noreferrer">URL.createObjectURL</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/createImageBitmap" target="_blank" rel="noreferrer">createImageBitmap</a>, 及 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest#send()" target="_blank" rel="noreferrer">XMLHttpRequest.send()</a> 都能处理 Blob 和 File</p><h3 id="file对象" tabindex="-1">File对象 <a class="header-anchor" href="#file对象" aria-label="Permalink to &quot;File对象&quot;">​</a></h3><p>通常有两种方式获取File对象：<code>构造函数</code>、<code>&lt;input type=&quot;file&quot;&gt;</code></p><p>构造函数：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> File</span><span style="color:#BABED8;">(bits: Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">ArrayBuffer </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> ArrayBufferView </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> String </span><span style="color:#89DDFF;">|</span><span style="color:#BABED8;"> Blob</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> type</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> lastModified </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>构造函数方式类似于blob的构造函数</p><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> file </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> File</span><span style="color:#BABED8;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">我是一段文本信息</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">text.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">text/plain</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> lastModified</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>输入框获取：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 用户点击选择文件后,可以通过属性获取</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">input type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">file</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(e</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">files[</span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">])</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="属性-3" tabindex="-1">属性 <a class="header-anchor" href="#属性-3" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>lastModified：当前file的最后修改时间，毫秒数</li><li>lastModifiedDate：最后修改时间date对象</li><li>name：文件名字</li><li>size：文件大小</li><li>type：文件的mime类型</li></ul><p>由于File继承于Blob对象所以也用了Blob的相关属性</p><h3 id="方法-3" tabindex="-1">方法 <a class="header-anchor" href="#方法-3" aria-label="Permalink to &quot;方法&quot;">​</a></h3><p>由于File继承于Blob对象所以也用了Blob的相关属性，如slice方法，通常用来对大文件做切片处理，参考以上blob的切片操作这里就不演示了</p><h2 id="filereader" tabindex="-1">FileReader <a class="header-anchor" href="#filereader" aria-label="Permalink to &quot;FileReader&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReader" target="_blank" rel="noreferrer">FileReader</a> 对象允许 Web 应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，主要目的就是从 File 或 Blob 对象中读取的文件或数据</p><h3 id="构造函数-1" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数-1" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><p>Filereader通过构造函数生成一个对象</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> FileReader</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="属性-4" tabindex="-1">属性 <a class="header-anchor" href="#属性-4" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li><p>readyState：当前的读取状态，其中包含以下几个常量</p><table><thead><tr><th style="text-align:left;">常量名</th><th style="text-align:left;">值</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>EMPTY</code></td><td style="text-align:left;"><code>0</code></td><td style="text-align:left;">还没有加载任何数据。</td></tr><tr><td style="text-align:left;"><code>LOADING</code></td><td style="text-align:left;"><code>1</code></td><td style="text-align:left;">数据正在被加载。</td></tr><tr><td style="text-align:left;"><code>DONE</code></td><td style="text-align:left;"><code>2</code></td><td style="text-align:left;">已完成全部的读取请求。</td></tr></tbody></table></li><li><p>result：读取完后的内容，读取操作后效，文件内容的格式取决于哪种读取方式</p></li><li><p>error：读取错误的对象</p></li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><ul><li>onabort：读取时中断时触发</li><li>onerror：读取时发生错误时触发</li><li>onload：所有内容的读取都是异步的，需要通过此事件获取读取的数据，读取成功后触发</li></ul><h3 id="方法-4" tabindex="-1">方法 <a class="header-anchor" href="#方法-4" aria-label="Permalink to &quot;方法&quot;">​</a></h3><ul><li>abort：中断读取</li><li>readAsArrayBuffer：将文件内容读取为arraybuffer形式的数据</li><li>readAsDataURL：将文件内容读取为base64字符串</li><li>readAsText：将文件内容读取为文本字符串</li><li>readAsBinaryString：将文件内容读取为原始二进制数据</li></ul><blockquote><p>读取数据都是异步的，需要通过onload事件获取读取内容</p></blockquote><h2 id="filereadersync" tabindex="-1">FileReaderSync <a class="header-anchor" href="#filereadersync" aria-label="Permalink to &quot;FileReaderSync&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FileReaderSync" target="_blank" rel="noreferrer">FileReaderSync</a>接口允许以同步的方式读取 File 或 Blob 对象中的内容，该接口只能在webwoker中使用，由于读取文件是非常耗时的过程，在主线程使用会造成页面卡顿现象，因此对于文件的操作在webwoker不会影响主线程</p><p>FileReaderSync和FileReader拥有相同的方法和属性，只不过前者的读取是同步的</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webwoker</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> readFileSync</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">file</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> reader</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> FileReaderSync</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> buffer</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsArrayBuffer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">file</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> buffer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="stream" tabindex="-1">Stream <a class="header-anchor" href="#stream" aria-label="Permalink to &quot;Stream&quot;">​</a></h2><p>Stream API 允许 JavaScript 以编程方式访问从网络接收的数据流，并且允许开发人员根据需要处理它们</p><p>流可以让程序不需要接受全部的内容后才可以展示操作，使用流可以将大型数据拆分成小块并逐步处理，如视频播放不需要加载全部减小延迟、提高内存的吞吐量</p><p>除此之外可以检测流何时开始或结束，将流链接在一起，根据需要处理错误和取消流，并对流的读取速度做出反应</p><p>流的基础应用围绕着使响应可以被流处理展开。例如，一个成功的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/fetch" target="_blank" rel="noreferrer">fetch 请求</a>返回的响应体可以暴露为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a>，之后你可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream/getReader" target="_blank" rel="noreferrer">ReadableStream.getReader</a> 创建一个 reader 读取它，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream/cancel" target="_blank" rel="noreferrer">ReadableStream.cancel</a> 取消它等等。</p><p>更复杂的应用包括使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a> 构造函数创建你自己的流，例如进入 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Service_Worker_API" target="_blank" rel="noreferrer">service worker</a> 去处理流</p><h3 id="readablestream" tabindex="-1">ReadableStream <a class="header-anchor" href="#readablestream" aria-label="Permalink to &quot;ReadableStream&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a> 可以构造一个可读流，在前端领域通常fetch的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/body" target="_blank" rel="noreferrer">Response的body属性</a> 就是一个ReadableStream对象</p><h4 id="构造函数-2" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数-2" aria-label="Permalink to &quot;构造函数&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> ReadableStream</span><span style="color:#BABED8;">(underlyingSource</span><span style="color:#89DDFF;">?,</span><span style="color:#BABED8;"> queuingStrategy</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>underlyingSource包括以下属性：</p><ul><li>start(controller)：对象在创建时会执行，controller是个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStreamDefaultController" target="_blank" rel="noreferrer">ReadableStreamDefaultController</a> ，通常在自己构造可读流时在此方法中 使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStreamDefaultController/enqueue" target="_blank" rel="noreferrer">controller.equeue</a> 方法往可读流中添加数据；可以返回promise，则下一次的必须等待上一次结束后才会执行</li><li>pull(controller)：流内部队列不满时会重复调用这个方法，根据流的背压来判断流有没有满，通常这里不做任何事</li><li>cancel(reason)：当流被取消时触发，如：取消、出错等等</li><li>type：表示流的内容类型，通常都是bytes</li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CountQueuingStrategy" target="_blank" rel="noreferrer">queuingStrategy</a> 定义流的队列策略 背压</p><ul><li>highWaterMark：在背压前内部队列可以容纳的总块数</li><li>size：每个chunk的大小</li></ul><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chunks </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> ReadableStream</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    start</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">controller</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">开始读取</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      async</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> read</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">offset</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> chunks</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">          const</span><span style="color:#BABED8;"> chunk</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> chunks</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">offset</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          // 往可读流中写入数据</span></span>
<span class="line"><span style="color:#BABED8;">          controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enqueue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">chunk</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">          read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">          console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">读取结束</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          // 关闭</span></span>
<span class="line"><span style="color:#BABED8;">          controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#82AAFF;">      read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    type</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">bytes</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#F07178;"> highWaterMark</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100</span><span style="color:#89DDFF;"> }</span><span style="color:#676E95;font-style:italic;"> // 定义背压</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><blockquote><p>这个例子自定义了一个可读流，在构建ReadableStream时不断地往可读流中写入数据，以便可读流可以读取到数据</p></blockquote><p>ReadableStream构造函数返回一个可读流实例，其包含多个方法和属性</p><h4 id="实例属性" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性" aria-label="Permalink to &quot;实例属性&quot;">​</a></h4><ul><li>locked：返回改可读流是否被锁定到一个reader，也就是说当被锁定时，同时只能被一个可读流使用</li></ul><h4 id="实例方法" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法" aria-label="Permalink to &quot;实例方法&quot;">​</a></h4><ul><li><p>cancel：取消流的读取，取消后会触发内部的cancel属性</p></li><li><p>getReader：创建一个读取器并将流锁定于其上，其他读取器将不能读取它直到它被释放；这个读取器是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStreamDefaultReader" target="_blank" rel="noreferrer">ReadableStreamDefaultReader</a> 实例，其包含 read、cancel等方法，通常都是使用 read来读取 ReadableStream 内部的数据</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 一个简单的例子</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> readstream </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReadableStream</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 假如自定义的可读流内部有数据</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> readstream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getReader</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 获取 reader对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">while</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> done</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 不断读取数据</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">done</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">读取完毕</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">当前数据块：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><blockquote><p>上面演示了下从自己创建的可读流中读取，通常都是从fetch的response的body属性中获取reader，然后不断读取接受的数据 （注：response的body属性是一个 ReadableStream）</p></blockquote></li><li><p>pipeThrough：提供将当前流管道输出到一个转换（transform）流或可写/可读流对的链式方法。简单来说就是一个管道对原始数据做点什么，比如修改、压缩啥的，对于平时的需求一般用不上，不过使用此功能可以很方便的做到一些有趣的效果</p><p>pipeThrough类型定义为：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">pipeThrough</span><span style="color:#BABED8;">(transformStream</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>transformStream是由可读流和可写流组成的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TransformStream" target="_blank" rel="noreferrer">TransformStream</a>（或者结构为 <code>{writable, readable}</code> 的对象），writable 流写入的数据在某些状态下可以被 readable 流读取。详细使用请看WriableStream</p></li><li><p>pipeTo：将当前 ReadableStream 管道输出到给定的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WritableStream" target="_blank" rel="noreferrer">WritableStream</a>，此方法是个异步方法，当所有的写入操作结束后表示结束</p><p>pipeTo类型定义：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">pipeTo</span><span style="color:#BABED8;">(destination</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>destination表示一个可写流WriableStream对象</p></li><li><p>tee：拷贝当前可读流，返回包含两个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a> 实例分支的数组</p></li></ul><h3 id="writablestream" tabindex="-1">WritableStream <a class="header-anchor" href="#writablestream" aria-label="Permalink to &quot;WritableStream&quot;">​</a></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WritableStream" target="_blank" rel="noreferrer">WritableStream</a> 接口将流数据写入目的地，该对象带有内置的背压和队列，一般是将可读流的数据写入</p><h4 id="构造函数-3" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数-3" aria-label="Permalink to &quot;构造函数&quot;">​</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> WritableStream</span><span style="color:#BABED8;">(underlyingSink</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> queuingStrategy)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>underlyingSink包括以下属性：</p><ul><li><p>start(controller)：对象被构建时立刻执行，controller是一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WritableStreamDefaultController" target="_blank" rel="noreferrer">WritableStreamDefaultController</a> 对象</p></li><li><p>write(chunk, controller)：当一个新的数据准备好写入底层接收器时调用此方法，chunk表示当前要写入的数据块，controller同上。一般可以在这里对数据的进行进度条计算</p></li><li><p>close(controller)：所有数据写入完毕后将会调用此方法</p></li><li><p>abort(reason)：可写流取消或出现错误时触发</p></li></ul><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CountQueuingStrategy" target="_blank" rel="noreferrer">queuingStrategy</a> 定义流的队列策略 背压</p><ul><li>highWaterMark：在背压前内部队列可以容纳的总块数</li></ul><p>例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 模拟请求</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> fetch</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> totalLength </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> xxx</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> uint8 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Uint8Array</span><span style="color:#BABED8;">(totalLength)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义背压</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> highWaterMark </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> CountQueuingStrategy</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> highWaterMark</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> writer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WritableStream</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    write</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Uint8Array</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> controller</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        uint8</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> offset</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 将读取的数据储存</span></span>
<span class="line"><span style="color:#BABED8;">        offset</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">byteLength</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 计算已经接受到的数据大小</span></span>
<span class="line"><span style="color:#BABED8;">        progress</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent</span><span style="color:#89DDFF;"> =</span></span>
<span class="line"><span style="color:#F07178;">          ((</span><span style="color:#BABED8;">offset</span><span style="color:#89DDFF;"> /</span><span style="color:#BABED8;"> totalLength</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 100</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">+</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">%</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 计算进度</span></span>
<span class="line"><span style="color:#82AAFF;">        setTimeout</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#BABED8;">  highWaterMark </span><span style="color:#676E95;font-style:italic;">// 设置背压,避免大文件读到内存中</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">pipeTo</span><span style="color:#BABED8;">(writer)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 记住 fetch的Response的body是个可读流，使用pipeTo方法</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><blockquote><p>以上通过将fetch的Response的body可读流通过自定义的WriableStream写入，在write方法中对每块数据进行获取，并计算进度</p></blockquote><p>WritableStream构造函数返回一个可写流实例，其包含多个方法和属性</p><h4 id="实例属性-1" tabindex="-1">实例属性 <a class="header-anchor" href="#实例属性-1" aria-label="Permalink to &quot;实例属性&quot;">​</a></h4><ul><li>locked：表示 WritableStream 是否锁定到一个 writer</li></ul><h4 id="实例方法-1" tabindex="-1">实例方法 <a class="header-anchor" href="#实例方法-1" aria-label="Permalink to &quot;实例方法&quot;">​</a></h4><ul><li><p>abort：取消流的写入，会触发内部的abort属性方法</p></li><li><p>close：关闭可写流，会触发内部的close属性方法</p></li><li><p>getWriter：获取返回一个新的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WritableStreamDefaultWriter" target="_blank" rel="noreferrer">WritableStreamDefaultWriter</a> 实例并且将流锁定到该实例，该实例对象包含abort、close、write方法；还包含一个ready属性返回一个promise,当流填充内部队列的所需大小从非正数变为正数时兑现，表明它不再应用背压</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chunks</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Uint8Array</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> highWaterMark </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> CountQueuingStrategy</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> highWaterMark</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 100</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> writeStream </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WritableStream</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span></span>
<span class="line"><span style="color:#F07178;">    write</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // chunk为读取的数据，用它做点啥...</span></span>
<span class="line"><span style="color:#82AAFF;">        resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#BABED8;">  highWaterMark</span></span>
<span class="line"><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> writer </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> writeStream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getWriter</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 获取writer对象</span></span>
<span class="line"><span style="color:#BABED8;">chunks</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> writer</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">ready</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> writer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#BABED8;">(chunk)))</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 循环读取数据</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ul><h3 id="transformstream" tabindex="-1">TransformStream <a class="header-anchor" href="#transformstream" aria-label="Permalink to &quot;TransformStream&quot;">​</a></h3><p>TransformStream 接口表示<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Streams_API/Concepts#%E9%93%BE%E5%BC%8F%E7%AE%A1%E9%81%93%E4%BC%A0%E8%BE%93" target="_blank" rel="noreferrer">链式管道传输（pipe chain）</a><em>转换流</em>（transform stream）概念的具体实现。他可以用于将编码或解码视频帧、压缩或解压缩数据或以其他的方式从一种数据转换成另一种数据</p><p>以下是一个将小写字母变成大写字母例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> strs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">b</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">d</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> offset </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReadableStream</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  start</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">controller</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    function</span><span style="color:#82AAFF;"> read</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">offset</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> strs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enqueue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">strs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">offset</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        offset</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#82AAFF;">        read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">close</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#82AAFF;">    read</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> transfer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TransformStream</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  transform</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> controller</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">transform:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> chunk</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    controller</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">enqueue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">chunk</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> writer </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WritableStream</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  write</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">write:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> chunk</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipeThrough</span><span style="color:#BABED8;">(transfer)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipeTo</span><span style="color:#BABED8;">(writer)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h3 id="response-body" tabindex="-1">Response.body <a class="header-anchor" href="#response-body" aria-label="Permalink to &quot;Response.body&quot;">​</a></h3><p>一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ReadableStream" target="_blank" rel="noreferrer">ReadableStream</a>，或者对于使用空的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Response/Response#body" target="_blank" rel="noreferrer">body</a> 属性构建的任意的 Response 对象，或没有任何<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages#body_2" target="_blank" rel="noreferrer">主体</a>的实际 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Messages#http_%E5%93%8D%E5%BA%94" target="_blank" rel="noreferrer">HTTP 响应</a>，则为null</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><h3 id="视频流" tabindex="-1">视频流 <a class="header-anchor" href="#视频流" aria-label="Permalink to &quot;视频流&quot;">​</a></h3><p>页面上添加视频播放器：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 视频播放器</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">video</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/api/video/range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> controls</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">controls</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> muted</span><span style="color:#C792EA;"> style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">max-width: 100%;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">video</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>node端进行返回请求数据，默认在没有结束范围时只返回1M的数据，如果有结束返回就返回指定范围的数据：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 对视频进行范围请求</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/api/video/range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">async </span><span style="color:#82AAFF;">getVideoRanges</span><span style="color:#BABED8;">(@</span><span style="color:#82AAFF;">Req</span><span style="color:#BABED8;">() req: Request</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> @</span><span style="color:#82AAFF;">Res</span><span style="color:#BABED8;">() res: Response) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 直接打开链接时禁止访问</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> referer</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">referer</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> host</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> referer</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> URL</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">referer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">referer</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> host</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ForbiddenException</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">禁止访问</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> requestRange</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">headers</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> parts</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> requestRange</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">replace</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#C3E88D;">bytes=</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> filePath</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">../data/video.mp4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fileStat</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> stat</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">filePath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fileSize</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> fileStat</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">size</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">parseInt</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">parts</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> fileSize</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 这里的大小值需减1</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">min</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#82AAFF;">    parseInt</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">parts</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1024</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1024</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> // 每次没有结束值，只返回1MB的数据</span></span>
<span class="line"><span style="color:#BABED8;">    fileSize</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> chunkSize</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> head</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#F07178;">Content-Range</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">bytes </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">start</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">end</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">fileSize</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#F07178;">Accept-Ranges</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">bytes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#F07178;">Content-Length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> chunkSize</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">video/mp4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // range请求返回部分内容</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">requestRange</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> stream</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> createReadStream</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">filePath</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">206</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> head</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    stream</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 非range请求返回整个视频</span></span>
<span class="line"><span style="color:#BABED8;">    res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">writeHead</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">200</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      &#39;</span><span style="color:#F07178;">Content-Length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> fileSize</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &#39;</span><span style="color:#F07178;">Content-Type</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">video/mp4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">    createReadStream</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">filePath</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><p>效果演示： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/2023-08-10%2008.54.22.gif" alt=""></p><h3 id="文件下载" tabindex="-1">文件下载 <a class="header-anchor" href="#文件下载" aria-label="Permalink to &quot;文件下载&quot;">​</a></h3><p>生活中会遇到文件的下载这种场景，主要还是读取文件流写入到blob中，这样也可以获取到指定的进度。需要注意的是这种方式不适合大文件的下载，容易撑爆内存，具体的大文件下载可以查看我的<a href="/frontend/performance/range-download.html">「如何实现大文件下载」</a> 一文</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 请求资源</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> fetchBigImage</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  progress</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">transform: translate3d(-100%, 0, 0)</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  progressNum</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0.00</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#82AAFF;"> fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/big-size.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> fileSize</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">content-length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> filename</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">headers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Content-Disposition</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">match</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">\\/</span><span style="color:#89DDFF;">([^</span><span style="color:#BABED8;">\\/</span><span style="color:#89DDFF;">]</span><span style="color:#BABED8;">\\.</span><span style="color:#89DDFF;">[^</span><span style="color:#BABED8;">\\/</span><span style="color:#89DDFF;">]*)/</span><span style="color:#F78C6C;">i</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">download.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> blobs</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> downloaded</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> writer</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WritableStream</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    write</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">chunk</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      blobs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">chunk</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      downloaded</span><span style="color:#89DDFF;"> +=</span><span style="color:#BABED8;"> chunk</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> percentComplete</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">downloaded</span><span style="color:#89DDFF;"> /</span><span style="color:#BABED8;"> fileSize</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 100</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      progress</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">style</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">transform: translate3d(-</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">100</span><span style="color:#89DDFF;"> -</span><span style="color:#BABED8;"> percentComplete)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">%, 0, 0)</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      progressNum</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">textContent</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> percentComplete</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toFixed</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    close</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      useDownload</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">blobs</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pipeTo</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">writer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 下载</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> useDownload</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">filename</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;font-style:italic;">blobs</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> blob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Blob</span><span style="color:#F07178;">([</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">blobs</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createObjectURL</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">blob</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setAttribute</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">href</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">download</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> filename</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">file.txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">click</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  a</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  URL</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">revokeObjectURL</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><h3 id="大文件上传" tabindex="-1">大文件上传 <a class="header-anchor" href="#大文件上传" aria-label="Permalink to &quot;大文件上传&quot;">​</a></h3><p>请阅读我的 <a href="/frontend/performance/chunk-upload.html">「如何实现大文件上传」</a> 一文</p>`,160);function y(F,D,i,b,B,A){const n=a("Reward"),l=a("Gitalk");return r(),p("div",null,[c,s(n),s(l)])}const m=e(t,[["render",y]]);export{u as __pageData,m as default};
