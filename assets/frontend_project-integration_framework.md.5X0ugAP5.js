import{_ as i,c as r,J as e,V as n,o as l,G as t}from"./chunks/framework.SV1ROkXV.js";const k=JSON.parse('{"title":"项目集成之框架选型","description":"在前端发展大爆炸时代如何选择适合自己团队的框架，应依据什么因素作为选择标准呢","frontmatter":{"title":"项目集成之框架选型","description":"在前端发展大爆炸时代如何选择适合自己团队的框架，应依据什么因素作为选择标准呢","keywords":"前端框架,vuejs,reactjs,angularjs,框架选择","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-project-integration.png","aside":false},"headers":[],"relativePath":"frontend/project-integration/framework.md","filePath":"frontend/project-integration/framework.md","lastUpdated":1709440279000}'),s={name:"frontend/project-integration/framework.md"},c=n('<h1 id="项目集成之框架选型" tabindex="-1">项目集成之框架选型 <a class="header-anchor" href="#项目集成之框架选型" aria-label="Permalink to &quot;项目集成之框架选型&quot;">​</a></h1><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/react-vue-angular-fight.jpg" alt=""></p><p>现如今前端领域开发基本离不开vue、react或angular，这些框架都是前端的新秀，那么如何在工作中选择适合自己团队的框架？</p><p>在框架选型时应考虑以下因素：</p><ul><li>生态系统和社区支持：了解框架的生态系统和社区活跃度，包括插件、工具、文档和技术支持等</li><li>性能和可维护性：考虑框架的性能特点和可维护性，以确保项目的可持续发展</li><li>学习曲线和学习资源：评估框架的学习曲线和可用的学习资源</li></ul><p>这些条件以上框架其实都符合，那么该如何进一步选择。可结合团队成员的特征习惯和使用成本选之，比如成员大多或招的人基本面向vue那就选择vue，又或成员更偏于react则选其。总之，团队技术的选型定要贴合团队自身的技术偏向和使用成本才是正确之道</p><p>以上是针对团队使用一种技术或者小团队而言，那么对于大团队或者有多种想法和爱折腾的团队来说，一种技术肯定不切实际。这种情况当然所有技术都可以选择，选择应更倾于项目本身的复杂度和项目小组的偏向。在这里对于多种技术其实没有多大的讨论价值，用就是了</p><p>这里对于多种技术我想说的更是偏向于项目中的多种技术框架，这种情况除非特殊情况尽量减少使用。如果一个项目中使用了多种技术框架可能造成以下诸多问题：</p><ul><li>整体配置繁琐、沉重，对于新成员可能无法立马理解透彻</li><li>技术掺和一起臃肿且很有可能产生潜在莫名bug且定位困难</li><li>配置繁重了可能编辑器也会受不了，造成卡顿现象（M1下也有感）</li><li>时间长了可能更不便于维护</li></ul><blockquote><p>项目多种技术不针对大型复杂项目如：微前端等多种架构</p></blockquote><p>总之万不得已应减少项目中的技术框架数量，保持项目技术的纯度，然后结合团队和成本实际情况进行选择</p>',11);function p(_,d,u,m,f,g){const a=t("Reward"),o=t("Gitalk");return l(),r("div",null,[c,e(a),e(o)])}const j=i(s,[["render",p]]);export{k as __pageData,j as default};
