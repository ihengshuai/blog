import{_ as p,c as e,J as s,V as o,o as r,G as n}from"./chunks/framework.SV1ROkXV.js";const m=JSON.parse('{"title":"Docker网络原理","description":"你知道docker几种网络模式背后的原理吗","frontmatter":{"title":"Docker网络原理","description":"你知道docker几种网络模式背后的原理吗","keywords":"docker网络原理,docker网络桥接,docker网络主机模式,docker网络三种模式","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-docker.png"},"headers":[],"relativePath":"fullstack/docker/network.md","filePath":"fullstack/docker/network.md","lastUpdated":1709440279000}'),c={name:"fullstack/docker/network.md"},t=o(`<h1 id="docker网络原理" tabindex="-1">Docker网络原理 <a class="header-anchor" href="#docker网络原理" aria-label="Permalink to &quot;Docker网络原理&quot;">​</a></h1><p>docker中网络的概念也是非常重要，它对于容器资源的隔离也起着非常重要的作用。</p><p>你有没有在启动一个容器后查看它的ip，假如你启动了一个<code>nignx</code>容器，你想在主机上访问它，首先得知道他的ip地址，可以通过以下方式获取：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> inspect nginx </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">grep</span><span style="color:#C3E88D;"> -A</span><span style="color:#F78C6C;"> 20</span><span style="color:#C3E88D;">  Networks</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ...</span></span>
<span class="line"><span style="color:#FFCB6B;">&quot;Networks&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#C3E88D;"> {</span></span>
<span class="line"><span style="color:#FFCB6B;">    &quot;bridge&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#C3E88D;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        # .....</span></span>
<span class="line"><span style="color:#FFCB6B;">        &quot;Gateway&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">172.17.0.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">        &quot;IPAddress&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">172.17.0.2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">        &quot;IPPrefixLen&quot;</span><span style="color:#82AAFF;">:</span><span style="color:#F78C6C;"> 16</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>可以查看<code>nginx</code>容器的网关为<code>172.17.0.1</code>，ip地址为<code>172.17.0.2</code>，在虚拟机上访问nginx<code>curl 172.17.0.2</code>发现是可以访问到nginx页面，但是当你从电脑主机浏览器上访问此ip地址就会访问不通</p><h2 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h2><p>Docker 网络的核心原理是通过创建网络命名空间和虚拟网络设备来实现容器间的网络隔离和通信。每个 Docker 容器都有自己的网络命名空间，其中包含了一个虚拟网络设备和一个 IP 地址。容器的网络命名空间使得容器内部的网络设备和 IP 地址与宿主机和其他容器隔离，从而实现了容器间的网络隔离和通信。</p><p>通俗的讲docker会在宿主机上创建一个默认的docker网桥(docker0<code>172.17.0.1</code>)，启动容器时会根据docker网桥的网络随机分配一个虚拟ip，同时docker网桥作为每个容器的默认网关，这样虽然每个容器的ip不一致，但是都是处于同一个网关下，所以容器间都可以通过docker0网关进行访问。</p><p>因为docker0网关是在主机上虚拟出来的，只能内部进行访问，外部是无感的无法访问到的。通过<code>ip a</code> 或 <code>ifconfig</code> 查看主机上的docker0虚拟网卡：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">ip</span><span style="color:#C3E88D;"> a </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> grep</span><span style="color:#C3E88D;"> -A</span><span style="color:#F78C6C;"> 5</span><span style="color:#C3E88D;"> docker0</span></span>
<span class="line"><span style="color:#FFCB6B;">4:</span><span style="color:#C3E88D;"> docker0: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">BROADCAST,MULTICAST,UP,LOWER_U</span><span style="color:#BABED8;">P</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> mtu </span><span style="color:#F78C6C;">1500</span><span style="color:#C3E88D;"> qdisc noqueue state UP group default</span></span>
<span class="line"><span style="color:#FFCB6B;">    inet</span><span style="color:#F78C6C;"> 172.17</span><span style="color:#C3E88D;">.0.1/16 brd </span><span style="color:#F78C6C;">172.17</span><span style="color:#C3E88D;">.255.255 scope global docker0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>从中看出docker0分配的网络为<code>172.17.0.1/16</code>，其前16位是个网络地址，后16位是主机地址，在这个子网中，可以分配的有效 IP 地址范围是从 <code>172.17.0.1</code> 到 <code>172.17.255.254</code>，共有 <code>65534</code> 个可用的 IP 地址。其中，<code>172.17.0.0</code> 是子网的网络地址，<code>172.17.255.255</code> 是子网的广播地址，不能被分配给主机。</p><h2 id="访问过程" tabindex="-1">访问过程 <a class="header-anchor" href="#访问过程" aria-label="Permalink to &quot;访问过程&quot;">​</a></h2><p>Docker 容器启动时，Docker 引擎会自动<u>创建一对 veth 设备，一个设备被添加到容器的网络命名空间，另一个设备则被添加到宿主机的网络命名空间中</u>。在容器内部，这个 veth 设备通常被命名为 <code>eth0</code>，并被分配一个 IP 地址；而在宿主机上，这个 veth 设备通常被命名为 docker0，并被分配一个与容器在同一子网中的 IP 地址。</p><p><strong>当容器需要与宿主机或其他容器进行通信时，数据包将通过容器内部的 veth 设备发送到宿主机的虚拟网桥，然后再通过宿主机的 veth 设备转发到目标容器或宿主机的网络命名空间中。</strong></p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230326174156350.png" alt="image-20230326174156350"></p><h2 id="网络类型" tabindex="-1">网络类型 <a class="header-anchor" href="#网络类型" aria-label="Permalink to &quot;网络类型&quot;">​</a></h2><p>Docker 提供了多种网络类型和网络驱动，以满足不同场景下的网络需求。以下是 Docker 支持的主要网络类型：</p><ul><li><code>bridge</code>：bridge 网络是 Docker 默认的网络类型，它使用 Linux 的虚拟网桥docker0实现容器间或与宿主机之间的通信。在 bridge 网络中，每个容器都会分配一个唯一的 IP 地址，并通过一个虚拟网桥连接到宿主机的网络中</li><li><code>host</code>：host 网络是一种特殊的网络类型，它允许 Docker 容器直接使用宿主机的网络设备和 IP 地址，与宿主机共享网络栈。在 host 网络中，容器不会被分配独立的 IP 地址，而是直接使用宿主机的 IP 地址</li><li><code>none</code>：none网络是一种完全隔离的网络类型，它不为容器分配任何网络资源，容器内部无法访问外部网络，也无法被外部网络访问</li><li><code>container</code>：新建的容器不会创建自己的网卡而是共同使用指定容器的，除了网络外，其他如文件系统等等都是隔离的，关闭目标container，将会变为none</li><li><code>自定义网络</code>：前者在容器内只能通过ip进行通信，不能通过容器名进行通信，而ip又是动态的，可能会随时变化，而docker允许你使用自定义网络，新建的网络默认是桥接bridge，集群里同一个服务里的所有容器使用自定义网络时，可以通过容器名进行访问，这种方式常用</li></ul><p>除了上述网络类型外，Docker 还支持使用第三方网络驱动来实现自定义的网络类型和网络功能。例如，可以使用 Calico 网络驱动实现高级的网络功能，如策略路由、安全组、网络隔离等。</p><h2 id="网络列表" tabindex="-1">网络列表 <a class="header-anchor" href="#网络列表" aria-label="Permalink to &quot;网络列表&quot;">​</a></h2><p>在没有创建自定义网络的条件下，docker默认会存在三种网络：桥接(brige)、宿主机(host)、none</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker network ls</span></span>
<span class="line"><span style="color:#FFCB6B;">NETWORK</span><span style="color:#C3E88D;"> ID     NAME      DRIVER    SCOPE</span></span>
<span class="line"><span style="color:#FFCB6B;">3d9d929e9d34</span><span style="color:#C3E88D;">   bridge    bridge    local</span></span>
<span class="line"><span style="color:#FFCB6B;">73acd36f196e</span><span style="color:#C3E88D;">   host      host      local</span></span>
<span class="line"><span style="color:#FFCB6B;">f71a4582a6c0</span><span style="color:#C3E88D;">   none      null      local</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="创建网络" tabindex="-1">创建网络 <a class="header-anchor" href="#创建网络" aria-label="Permalink to &quot;创建网络&quot;">​</a></h2><p>创建自定义网络<code>mynetwork</code>：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker network create mynetwork</span></span>
<span class="line"><span style="color:#FFCB6B;">c1f9f873cb89c803a905f3a8c61aed4bc8ab3f9184d00fa0327a9a6dfc6d70b7</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker network ls</span></span>
<span class="line"><span style="color:#FFCB6B;">NETWORK</span><span style="color:#C3E88D;"> ID     NAME        DRIVER    SCOPE</span></span>
<span class="line"><span style="color:#FFCB6B;">3d9d929e9d34</span><span style="color:#C3E88D;">   bridge      bridge    local</span></span>
<span class="line"><span style="color:#FFCB6B;">73acd36f196e</span><span style="color:#C3E88D;">   host        host      local</span></span>
<span class="line"><span style="color:#FFCB6B;">c1f9f873cb89</span><span style="color:#C3E88D;">   mynetwork   bridge    local</span></span>
<span class="line"><span style="color:#FFCB6B;">f71a4582a6c0</span><span style="color:#C3E88D;">   none        null      local</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="使用网络" tabindex="-1">使用网络 <a class="header-anchor" href="#使用网络" aria-label="Permalink to &quot;使用网络&quot;">​</a></h2><p>在创建和管理容器时，可以指定容器使用的网络类型和网络配置，这里演示多个容器使用同一个网络，并采用容器名的方式方式进行访问</p><ol><li>创建一个busybox并使用自定义网络，查看其ip为<code>172.18.0.2</code></li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker run -it --network mynetwork --rm --name busybox busybox /bin/sh</span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ip a</span></span>
<span class="line"><span style="color:#FFCB6B;">1:</span><span style="color:#C3E88D;"> lo: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">LOOPBACK,UP,LOWER_U</span><span style="color:#BABED8;">P</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> mtu </span><span style="color:#F78C6C;">65536</span><span style="color:#C3E88D;"> qdisc noqueue qlen </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#FFCB6B;">    link/loopback</span><span style="color:#F78C6C;"> 00</span><span style="color:#C3E88D;">:00:00:00:00:00 brd </span><span style="color:#F78C6C;">00</span><span style="color:#C3E88D;">:00:00:00:00:00</span></span>
<span class="line"><span style="color:#FFCB6B;">    inet</span><span style="color:#F78C6C;"> 127.0</span><span style="color:#C3E88D;">.0.1/8 scope host lo</span></span>
<span class="line"><span style="color:#FFCB6B;">       valid_lft</span><span style="color:#C3E88D;"> forever preferred_lft forever</span></span>
<span class="line"><span style="color:#FFCB6B;">22:</span><span style="color:#C3E88D;"> eth0@if23: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">BROADCAST,MULTICAST,UP,LOWER_UP,M-DOW</span><span style="color:#BABED8;">N</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> mtu </span><span style="color:#F78C6C;">1500</span><span style="color:#C3E88D;"> qdisc noqueue</span></span>
<span class="line"><span style="color:#FFCB6B;">    link/ether</span><span style="color:#F78C6C;"> 02</span><span style="color:#C3E88D;">:42:ac:12:00:02 brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#FFCB6B;">    inet</span><span style="color:#F78C6C;"> 172.18</span><span style="color:#C3E88D;">.0.2/16 brd </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.255.255 scope global eth0</span></span>
<span class="line"><span style="color:#FFCB6B;">       valid_lft</span><span style="color:#C3E88D;"> forever preferred_lft forever</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><ol start="2"><li>创建一个alpine使用自定义网络，查看其ip为<code>172.18.0.3</code></li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker run -it --network mynetwork --rm --name alpine alpine /bin/sh</span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ip a</span></span>
<span class="line"><span style="color:#FFCB6B;">1:</span><span style="color:#C3E88D;"> lo: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">LOOPBACK,UP,LOWER_U</span><span style="color:#BABED8;">P</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> mtu </span><span style="color:#F78C6C;">65536</span><span style="color:#C3E88D;"> qdisc noqueue state UNKNOWN qlen </span><span style="color:#F78C6C;">1000</span></span>
<span class="line"><span style="color:#FFCB6B;">    link/loopback</span><span style="color:#F78C6C;"> 00</span><span style="color:#C3E88D;">:00:00:00:00:00 brd </span><span style="color:#F78C6C;">00</span><span style="color:#C3E88D;">:00:00:00:00:00</span></span>
<span class="line"><span style="color:#FFCB6B;">    inet</span><span style="color:#F78C6C;"> 127.0</span><span style="color:#C3E88D;">.0.1/8 scope host lo</span></span>
<span class="line"><span style="color:#FFCB6B;">       valid_lft</span><span style="color:#C3E88D;"> forever preferred_lft forever</span></span>
<span class="line"><span style="color:#FFCB6B;">24:</span><span style="color:#C3E88D;"> eth0@if25: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">BROADCAST,MULTICAST,UP,LOWER_UP,M-DOW</span><span style="color:#BABED8;">N</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;"> mtu </span><span style="color:#F78C6C;">1500</span><span style="color:#C3E88D;"> qdisc noqueue state UP</span></span>
<span class="line"><span style="color:#FFCB6B;">    link/ether</span><span style="color:#F78C6C;"> 02</span><span style="color:#C3E88D;">:42:ac:12:00:03 brd ff:ff:ff:ff:ff:ff</span></span>
<span class="line"><span style="color:#FFCB6B;">    inet</span><span style="color:#F78C6C;"> 172.18</span><span style="color:#C3E88D;">.0.3/16 brd </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.255.255 scope global eth0</span></span>
<span class="line"><span style="color:#FFCB6B;">       valid_lft</span><span style="color:#C3E88D;"> forever preferred_lft forever</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>两个容器创建好后，尝试分别使用ip和容器名的方式ping对方，看是否能ping通：</p><ul><li>使用ip方式：<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># busybox</span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ping 172.18.0.3</span></span>
<span class="line"><span style="color:#FFCB6B;">PING</span><span style="color:#F78C6C;"> 172.18</span><span style="color:#C3E88D;">.0.3 </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">172.18.0.3</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">56</span><span style="color:#C3E88D;"> data bytes</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.3: seq=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">1.588</span><span style="color:#C3E88D;"> ms</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.3: seq=</span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">0.475</span><span style="color:#C3E88D;"> ms</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># alpine</span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ping 172.18.0.2</span></span>
<span class="line"><span style="color:#FFCB6B;">PING</span><span style="color:#F78C6C;"> 172.18</span><span style="color:#C3E88D;">.0.2 </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">172.18.0.2</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">56</span><span style="color:#C3E88D;"> data bytes</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.2: seq=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">0.163</span><span style="color:#C3E88D;"> ms</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.2: seq=</span><span style="color:#F78C6C;">1</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">0.410</span><span style="color:#C3E88D;"> ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li>使用容器名：<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># busybox </span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ping alpine</span></span>
<span class="line"><span style="color:#FFCB6B;">PING</span><span style="color:#C3E88D;"> alpine </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">172.18.0.3</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">56</span><span style="color:#C3E88D;"> data bytes</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.3: seq=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">0.246</span><span style="color:#C3E88D;"> ms</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># alpine </span></span>
<span class="line"><span style="color:#FFCB6B;">/</span><span style="color:#676E95;font-style:italic;"> # ping busybox</span></span>
<span class="line"><span style="color:#FFCB6B;">PING</span><span style="color:#C3E88D;"> busybox </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">172.18.0.2</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">: </span><span style="color:#F78C6C;">56</span><span style="color:#C3E88D;"> data bytes</span></span>
<span class="line"><span style="color:#FFCB6B;">64</span><span style="color:#C3E88D;"> bytes from </span><span style="color:#F78C6C;">172.18</span><span style="color:#C3E88D;">.0.2: seq=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;"> ttl=</span><span style="color:#F78C6C;">64</span><span style="color:#C3E88D;"> time=</span><span style="color:#F78C6C;">0.246</span><span style="color:#C3E88D;"> ms</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li></ul><p>采用服务名的方式在集群系统里是常见的，他解决ip动态改变，而不需要频繁改ip地址的问题，其内部本质还是将名字和ip进行的动态绑定，添加了对应的DNS记录，这样就可以知道服务的ip了</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Docker一个重要概念是容器间的DNS服务。Docker默认提供了一个DNS服务，使得容器可以通过容器名称或服务名称来互相访问。Docker DNS 服务基于 Docker 内置的 DNS 服务器实现，每个容器都可以通过 docker.internal 域名来访问其他容器。</p><p>总的来说，Docker 网络的核心原理是通过创建网络命名空间和虚拟网络设备来实现容器间的网络隔离和通信，同时提供了多种网络模式和网络驱动，以满足不同场景下的网络需求。</p>`,37);function i(y,C,d,b,F,D){const a=n("Reward"),l=n("Gitalk");return r(),e("div",null,[t,s(a),s(l)])}const B=p(c,[["render",i]]);export{m as __pageData,B as default};
