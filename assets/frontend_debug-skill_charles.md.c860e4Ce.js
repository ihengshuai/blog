import{_ as t,c as s,J as e,V as l,o as h,G as i}from"./chunks/framework.SV1ROkXV.js";const b=JSON.parse('{"title":"Charles抓包工具使用指南","description":"charles一个简洁适配多系统的强大的抓包工具,方便抓取web和移动端数据包,设置代理等等","frontmatter":{"title":"Charles抓包工具使用指南","description":"charles一个简洁适配多系统的强大的抓包工具,方便抓取web和移动端数据包,设置代理等等","keywords":"charles,charles抓包工具,手机抓包,ios抓包,android抓包,客户端抓包,抓包工具,Mac抓包,前端调试,frontend debugger,chrome调试,调试技能,node调试,线上调试","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-debug.png"},"headers":[],"relativePath":"frontend/debug-skill/charles.md","filePath":"frontend/debug-skill/charles.md","lastUpdated":1709440279000}'),c={name:"frontend/debug-skill/charles.md"},r=l('<h1 id="charles抓包工具" tabindex="-1">Charles抓包工具 <a class="header-anchor" href="#charles抓包工具" aria-label="Permalink to &quot;Charles抓包工具&quot;">​</a></h1><p>上一篇介绍了<a href="/frontend/debug-skill/fiddler.html">fiddler</a>抓包工具，这篇就来看看<a href="https://www.charlesproxy.com" target="_blank" rel="noreferrer">charles</a>的使用</p><p><a href="https://www.charlesproxy.com" target="_blank" rel="noreferrer">charles</a>抓包工具和<a href="/frontend/debug-skill/fiddler.html">fiddler</a>原理类似也是基于HTTP请求中间人代理，通过和服务端、客户端建立通信将客户端的请求数据发送服务器，并将响应数据传输给客户端，实现抓包记录。</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h7943v0e35j31520hsdu3.jpg" alt="iShot_2022-10-18_07.58.05.png"></p><p>虽然原理相同，由于是不同工具，一些功能还是有细微差距的，charles相比<a href="/frontend/debug-skill/fiddler.html">fiddler</a>更加简洁，但并不是更弱一些。其界面简单宜人，比较清爽，这点可能已经吸了一大半的用户了吧。再者charles把一些常用的功能选项直接封装好了(如：模拟不同的网络俗)，而<a href="/frontend/debug-skill/fiddler.html">fiddler</a>可能有时需要修改代码，这对一些基础薄弱的小伙伴是非常不友好的，那么你可以试试charles，让我们开始吧！</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://www.charlesproxy.com" target="_blank" rel="noreferrer">charles</a>同样有些功能也是需要收费的，但是相比<a href="/frontend/debug-skill/fiddler.html">fiddler</a>可以免费试用基础功能，而且市面上<a href="https://www.zzzmode.com/mytools/charles" target="_blank" rel="noreferrer">破解</a>的很多(自行搜索即可)，对macOS用户也比较友好，可以尝试用用感觉一下</p></div><h2 id="下载安装" tabindex="-1">下载安装 <a class="header-anchor" href="#下载安装" aria-label="Permalink to &quot;下载安装&quot;">​</a></h2><p>charles支持windows、macOS、linux等多个版本</p><p>进入charles的官网<a href="https://www.charlesproxy.com" target="_blank" rel="noreferrer">https://www.charlesproxy.com</a>，进入<code>Download</code>Tab页，可以看到下面有多个系统版本可供下载，选择适合自己系统的点击，即可下载。</p><p>最下面还展示了下载firefox插件，看描述的意思是firefox旧版本可能会需要下载charles的插件来支持抓包，新版本就不需要下载了，大家可以根据自己的环境进行配置。这里作者是macOS，就安装了mac版，以下内容都以mac版charles作为基础，windows基本一样。</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h794f49qczj31800uy4dg.jpg" alt="iShot_2022-10-18_08.09.53.png"></p><h2 id="面板介绍" tabindex="-1">面板介绍 <a class="header-anchor" href="#面板介绍" aria-label="Permalink to &quot;面板介绍&quot;">​</a></h2><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h795v729hmj310u0og4d0.jpg" alt="iShot_2022-10-18_08.59.50.png"></p><p>可以将charles的分为以下几个模块：</p><ul><li><strong>菜单栏</strong>：一些全局相关的配置，如：偏好设置、记录显示与编辑、记录展示方式、代理配置、常用的工具、帮助等等</li><li><strong>工具栏</strong>：快捷设置菜单，如：清除记录、开关记录、开启弱网、断点设置、执行请求、重新请求等等</li><li><strong>抓包记录</strong>：显示抓包的记录，可以以域名归类记录也可以按请求顺序展示记录，单击会显示右侧的详情面板，右击有一些菜单功能</li><li><strong>请求详情</strong>：请求详情来显示当前请求的具体信息，如：请求头、响应主体、请求主体、TLS、Timing(一些请求连接时间)、size、状态码等等信息，还可以用不同类型格式查看请求或响应内容</li></ul><p>接下来分别具体讲讲每个模块的使用</p><h2 id="菜单栏" tabindex="-1">菜单栏 <a class="header-anchor" href="#菜单栏" aria-label="Permalink to &quot;菜单栏&quot;">​</a></h2><p>菜单栏相对来说比较重要，它来控制charles全局，可以导入导出记录、设置记录查看方式、设置代理(重要)、常用工具、证书安装等等</p><ul><li><strong>File</strong>：可以导入导出记录，文件会以<code>.chls</code>后缀保存，这种功能可以将记录发给别人查看比较方便</li><li><strong>Edit</strong>：复制粘贴记录，查找记录(可以根据正则，查找范围多个维度进行查找，比较好用)，当然这些功能都有对应的快捷键，当熟悉以后就不需要这么麻烦了</li><li><strong>View</strong>：一些和查看记录的配置有关 <ul><li>设置以<code>Structure(用域名归纳请求，类似于嵌套文件夹，个人喜欢这种风格的)</code>和<code>Sequence(请求顺序)</code>来显示记录，推荐使用Structure，这个设置可以直接在记录面板点击即可</li><li>高亮或者聚焦(会将其他请求折叠进一个文件夹)某个具体的请求，方便调试</li><li>自定义请求的请求或响应的查看方式(不怎么用)</li></ul></li><li><strong>Proxy</strong>(重要)：用来设置代理、网速、HTTPS、断点、DNS等等功能 <ul><li>Start Throttling &amp; Throttle Setting：用来模拟网速，弱网测试比较方便 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h797ldqxzjj30vc0z4gtg.jpg" alt="iShot_2022-10-18_09.59.42.png"></li><li>Enable Breakpoints &amp; Breakpoints Settings：用来设置断点请求，可以根据不同的域名、路径、请求方法等多个维度来设置，比较实用 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h797ur6yttj31lo0kqahr.jpg" alt="iShot_2022-10-18_10.08.21.png"></li><li>Proxy Setting：用来设置HTTP、Socket代理，也可以设置系统代理。默认HTTP Proxy代理监听端口为8888，可以修改如7777。macOS可以设置启动设置为系统代理(目前高版本window都会默认设置为系统代理)，默认这些都是开启的。 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h7980ya73aj30ya0ug79c.jpg" alt="iShot_2022-10-18_10.10.47.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79812y8dwj30xg0ecwgh.jpg" alt="iShot_2022-10-18_10.11.08.png"></li><li>Reverse Proxy：反向代理，可以将本地的请求反向代理到其他请求</li><li>DNS Setting：配置DNS</li><li>Access Control Setting：用来配置局域网中的其他机器代理规则，可以配置哪些ip允许代理，默认会允许所有ip代理的</li></ul></li><li><strong>Tools</strong>：一些请求相关配置工具，如：阻塞cookie、请求拦截代理、请求rewrite、执行请求等等功能 <ul><li>Block Cookie：阻塞请求的cookie，可以自定义匹配地址来阻塞，下图模拟了当请求<code>http://192.168.3.58:9999/cookie</code>cookie会被拦截，而<code>http://192.168.3.58:9999</code>则不会 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79fnv26ioj30ve0m8juo.jpg" alt="iShot_2022-10-18_14.36.29.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79fo7viq0j315m0fyjw0.jpg" alt="iShot_2022-10-18_14.38.38.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79fodzs7yj312u0fc42v.jpg" alt="iShot_2022-10-18_14.38.51.png"></li><li>Map Remote &amp; Map Local &amp; Rewrite：用来拦截请求可以代理到其他地址也可以返回本地的文件等等，自己可以试试</li><li>Block List &amp; Allow List：阻塞和允许指定的请求</li><li>Compose &amp; Repeat：可以手动用charles来执行某个请求，可以指定并发数</li></ul></li><li><strong>help</strong>：用来安装证书，配置https的 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79fyedjnwj31a40hs7m0.jpg" alt="iShot_2022-10-18_14.48.23.png"></li></ul><h2 id="工具栏" tabindex="-1">工具栏 <a class="header-anchor" href="#工具栏" aria-label="Permalink to &quot;工具栏&quot;">​</a></h2><p>工具栏主要是一些快捷设置菜单栏，如：清除记录、开关抓包、ssl开关、网速配置、断点设置、手动请求、重新请求、一些配置等等，基本上在菜单栏已经介绍的差不多了，这里自己手动操作一遍就可以了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h77z66zbt6j31460gumzr.jpg" alt="工具栏"></p><h2 id="抓包记录" tabindex="-1">抓包记录 <a class="header-anchor" href="#抓包记录" aria-label="Permalink to &quot;抓包记录&quot;">​</a></h2><p>抓包记录是用来记录抓包的记录的，可以根据域名来归纳记录也可以使用请求顺序的方式展示记录，推荐使用域名归纳方式方便调试，一目了然；底部的<code>Filter</code>可以简单的过滤抓包记录，其他的高亮、聚焦展示前面已经讲过了。 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79g6w1qwej30q80nctgf.jpg" alt="iShot_2022-10-18_14.57.07.png"></p><h2 id="抓包详情" tabindex="-1">抓包详情 <a class="header-anchor" href="#抓包详情" aria-label="Permalink to &quot;抓包详情&quot;">​</a></h2><p>抓包详情通常就是我们用来分析返回来的内容和一些请求信息等，前端可以根据请求相关时间做一些优化 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79gm4bechj314o0yiahy.jpg" alt="iShot_2022-10-18_15.10.19.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79gma4ixjj31500y6ne7.jpg" alt="iShot_2022-10-18_15.11.47.png"></p><h2 id="请求代理与篡改" tabindex="-1">请求代理与篡改 <a class="header-anchor" href="#请求代理与篡改" aria-label="Permalink to &quot;请求代理与篡改&quot;">​</a></h2><p>请求代理与篡改可以参考菜单栏<code>Tools</code>中的<code>Map Remote &amp; Map Local &amp; Rewrite</code>等几个来调试，非常简单，这里就不介绍了，你也可以查看上一篇<a href="/frontend/debug-skill/fiddler.html">fiddler</a>这块，基本都一样</p><h2 id="断点调试" tabindex="-1">断点调试 <a class="header-anchor" href="#断点调试" aria-label="Permalink to &quot;断点调试&quot;">​</a></h2><p>开启断点调试的条件：1.要勾选<code>Enable Breakpoint</code> 2.需要在<code>Breakpoint Setting</code>中勾选启用并且需要填写需要断点的域名，设置前面已经介绍了，忘记的可以前面查看。那么打了断点一般用来做什么，可以模拟请求时长、修改请求体和响应体等等。</p><p>这里设置断点<code>http://192.168.3.58</code>，当请求是这个域名时，就是命中断点，刷新浏览器发现已经命中断点</p><ol><li>当前请求断点，查看请求体，也可以编辑请求内容 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79h40gw64j31ju0xe10i.jpg" alt="iShot_2022-10-18_15.22.46.png"></li><li>GET请求手动添加两个字段，点击<code>Execute</code>执行下一步 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79h47z9vvj31b80xugqz.jpg" alt="iShot_2022-10-18_15.23.54.png"></li><li>当前为响应断点，可以看到刚刚添加的两个字段已经带上了，现在也可以编辑响应内容了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79h4elr6nj31fq0xugv2.jpg" alt="iShot_2022-10-18_15.25.42.png"></li><li>编辑响应内容，删除了原来的返回数据，自定义一条数据 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79h4mh80nj31dc0x6gsh.jpg" alt="iShot_2022-10-18_15.27.46.png"></li><li>查看浏览器内容已经经结果修改了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79h4swgb3j31680wcaly.jpg" alt="iShot_2022-10-18_15.28.26.png"></li></ol><p>以上就是断点调试的基本使用，其他的可以根据自己的需求进行配置即可</p><h2 id="弱网测试" tabindex="-1">弱网测试 <a class="header-anchor" href="#弱网测试" aria-label="Permalink to &quot;弱网测试&quot;">​</a></h2><p>charles可以模拟不同的网络环境，很方便进行网速相关的测试如：超时、断网等等。这一点相比fiddler，charles内部已经内置了集中网络环境，而fiddler则需要改代码，不是很友好。</p><p>同样关于网络配置其前面已经讲述了，可以往上翻阅。需要注意的是，要开启<code>Start Throttle</code>和配置<code>Throttle Setting</code>。</p><p>这里没有用内置的网络环境，自定义下载速率为<code>5kb</code>，已经相当慢了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79hnzga3wj30vc0z4agt.jpg" alt="iShot_2022-10-18_15.48.05.png"> 查看本地请求4s才完成，通过修改不同的网速可以模拟不同的网络环境 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79hof3ko8j315003cjsb.jpg" alt="iShot_2022-10-18_15.48.35.png"></p><h2 id="配置https" tabindex="-1">配置HTTPS <a class="header-anchor" href="#配置https" aria-label="Permalink to &quot;配置HTTPS&quot;">​</a></h2><p>在没有配置HTTPS下，对于HTTPS请求的请求和响应数据无法解码都是乱码，需要配置了HTTPS后才能查看解码后的内容，下图是在没有配置HTTPS的情况下，抓取<code>https://www.baidu.com</code>地址的请求，全是乱码 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79hu3emtyj31kw1507sk.jpg" alt="iShot_2022-10-18_15.53.58.png"></p><p><strong>配置HTTPS步骤</strong>：</p><ol><li><code>Help &gt; SSL Proxying &gt; Install Charles Root Certificate</code>，系统安装charles证书并信任 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79hz6566rj314m0e679n.jpg" alt="iShot_2022-10-18_15.58.48.png"></li><li><code>Proxy &gt; SSL Proxying Settings &gt; Enable SSL Proxying</code>开启SSL Proxy，添加抓取的<code>IP为*</code>，<code>端口为443</code><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79i4tyqqpj30y80rwq7z.jpg" alt="iShot_2022-10-18_16.03.50.png"></li></ol><p>再次查看抓取的HTTPS请求，已经完美解码了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79i627esuj31jm0y84qp.jpg" alt="iShot_2022-10-18_16.05.24.png"></p><h2 id="客户端抓包" tabindex="-1">客户端抓包 <a class="header-anchor" href="#客户端抓包" aria-label="Permalink to &quot;客户端抓包&quot;">​</a></h2><p>配置客户端抓包首先需要和主机在同一局域网下，并且基于HTTPS步骤，主要步骤如下：（这里以ios为例）</p><ol><li>打开Safari输入charles地址<code>192.168.3.58:7777</code>，fiddler会弹出是否允许抓包当前ip(手机ip)，点击允许，你也可以在<code>Proxy &gt; Access Control Setting</code>中直接配置允许的ip，就不会有当前弹窗提示了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jcz33ohj318m0amwi6.jpg" alt="iShot_2022-10-18_16.17.39.png"></li><li>配置手机代理到charles <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jf076enj30n00p0wel.jpg" alt="IMG_0587.jpg"></li><li>当前其实已经可以抓取手机包了，但是https请求还是有一些问题，因为没有在手机上安装charles证书。安装charles证书，点击<code>Help &gt; SSL Proxying &gt; Install Charles Root Certificate On a Mobile Device...</code>点击，会弹出手机的步骤，共两步，1.手机网络代理到charles和2.手机浏览器访问<code>chls.pro/ssl</code>来安装证书，上一步已经讲了配置手机代理，这里我们访问地址<code>chls.pro/ssl</code>来安装证书即可</li></ol><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jg4n7u4j31aa0ow4ps.jpg" alt="iShot_2022-10-18_16.36.11.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jhcded2j318m0begqm.jpg" alt="iShot_2022-10-18_16.37.09.png"><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jehmj65j30n00ti768.jpg" alt="IMG_0585.jpg"> 4. 安装证书到系统，需要信任证书，输入手机密码等等，一直下一步即可</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jfaysdfj30n00p40uj.jpg" alt="IMG_0586.jpg"> 5. 在<code>关于手机 &gt; 证书 &gt; 信任证书</code>信任刚刚添加的证书</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jfk5uckj30n00g5765.jpg" alt="IMG_0588.jpg"> 6. 打开Safari访问<code>https://blog.usword.cn</code>查看charles的抓包，发现已经抓包成功</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jgr3mmaj31js0zqkbl.jpg" alt="iShot_2022-10-18_16.35.21.png"></p><p>以上便是ios的配置抓包流程，其他手机系统大同小异</p><h2 id="汉化补丁" tabindex="-1">汉化补丁 <a class="header-anchor" href="#汉化补丁" aria-label="Permalink to &quot;汉化补丁&quot;">​</a></h2><p>我觉得英文版也很好优化，没必要汉化，如果你更喜欢中文，这里是互联网提供的补丁连接，可以按自己的需要下载 <a href="https://www.52pojie.cn/thread-1350618-1-1.html" target="_blank" rel="noreferrer">https://www.52pojie.cn/thread-1350618-1-1.html</a></p><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><p>这里列举一些常见的问题，也是作者刚开始使用时面临的问题，也有互联网上其他人的一些问题，如果你正因此困扰，希望这些可以帮到你</p><h3 id="本地地址无法抓取" tabindex="-1">本地地址无法抓取 <a class="header-anchor" href="#本地地址无法抓取" aria-label="Permalink to &quot;本地地址无法抓取&quot;">​</a></h3><p>这个问题大概对于所有charles新手来说都会遇到，也就是在自己本地启动一个服务器，用<code>localhost:port</code>去访问服务，charles却抓取不到，很纳闷。这是由于一些系统硬编码的问题，charles抓取不到localhost的流量，因此charles做了一个代理，让我们用<code>localhost.charlesproxy.com</code>来代替<code>localhost</code>域名，其实将域名<code>localhost.charlesproxy.com</code>映射到了<code>127.0.0.1</code>所以可以抓到包了，点击这里官方做了<a href="https://www.charlesproxy.com/documentation/faqs/" target="_blank" rel="noreferrer">解释</a></p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jtshwmrj317q0leqgo.jpg" alt="iShot_2022-10-18_17.02.57.png"></p><p>现在访问<code>http://localhost.charlesproxy.com:9999</code>确实抓取到了 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jvlaiamj31le1ccb29.jpg" alt="iShot_2022-10-18_17.04.41.png"></p><p>除了上面的方法，你可以使用本地局域网ip也可以抓取到 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h79jy6k0jjj31kq18s4qp.jpg" alt="iShot_2022-10-18_17.07.11.png"></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>以上就是charles的使用方法，相信到这里已经可以满足你的常用需求了，一定要自己动手实践才能熟能生巧；当然本篇也是挑了一些必懂的使用方法，其他使用可以自行摸索，都很简单的。和<a href="/frontend/debug-skill/fiddler.html">fiddler</a>一样，charles也是基于客户端和服务端中间的代理，所以可以抓取记录，原理图可以看<a href="/frontend/debug-skill/fiddler.html">fiddler</a>这篇。</p><blockquote><p>相关文档：</p></blockquote><p><a href="https://www.charlesproxy.com/documentation/getting-started" target="_blank" rel="noreferrer">https://www.charlesproxy.com/documentation</a></p>',62);function n(g,p,d,m,u,j){const o=i("Reward"),a=i("Gitalk");return h(),s("div",null,[r,e(o),e(a)])}const _=t(c,[["render",n]]);export{b as __pageData,_ as default};
