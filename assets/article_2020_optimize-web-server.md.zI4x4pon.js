import{_ as p,c as e,J as s,V as o,o as c,G as n}from"./chunks/framework.SV1ROkXV.js";const h=JSON.parse('{"title":"优化改善网页的加载及性能","description":"如何优化网页的加载速度和性能指标,提高网站的seo","frontmatter":{"title":"优化改善网页的加载及性能","description":"如何优化网页的加载速度和性能指标,提高网站的seo","keywords":"性能优化,nginx,部署应用,deploy,缓存机制,强缓存,协商缓存,http缓存,CDN,服务器","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-perf.png"},"headers":[],"relativePath":"article/2020/optimize-web-server.md","filePath":"article/2020/optimize-web-server.md","lastUpdated":1709440279000}'),r={name:"article/2020/optimize-web-server.md"},t=o(`<h1 id="优化改善网页的加载及性能" tabindex="-1">优化改善网页的加载及性能 <a class="header-anchor" href="#优化改善网页的加载及性能" aria-label="Permalink to &quot;优化改善网页的加载及性能&quot;">​</a></h1><blockquote><p>食用对象：不是土豪但是有点土，或者想了解下网站性能优化问题的同学</p></blockquote><p>我记得那年像大同学一样怀揣着一颗IT梦进军了互联网的大门，开始朝着我不&#39;秃&#39;谁&#39;秃&#39;的幻想一步步照亮前方的道路。 然而前进的道路，坎坷往往不会缺席。学习的过程往往会产生种种疑惑与不解，在互联网高速发展的时代，百度成了解决问题的最大老师，那时对于编程解答最常用的就是CSDN了。随着每次不断在其上寻求解答外，网站也让我感到种种好奇，心想如果自己有个属于自己的技术博客该是多香呢。 故事经过了半年时间，各大云服务厂商各种推广，相爱相杀，对于仅有一个月生活费的大学生来说机会来了，说是白嫖也不为过😂，买到手后就开始各种折腾，虽然很累却很开心。</p><h2 id="起步" tabindex="-1">起步 <a class="header-anchor" href="#起步" aria-label="Permalink to &quot;起步&quot;">​</a></h2><p>小编用的是一台CentOs机器，刚开始就进行一些列的环境配置，如：nginx、node、java、mysql等一些列安装，当然中间也有不少的挫折，遇到不会的就百度搜一搜，一步一个脚印完成配置的，总体来说配置完觉得挺开心的... 本篇主要阐述<code>网站性能优化</code>，至于题外话就简单一概而过了 接着就是给<em>网站搭建应用了</em></p><h2 id="应用搭建" tabindex="-1">应用搭建 <a class="header-anchor" href="#应用搭建" aria-label="Permalink to &quot;应用搭建&quot;">​</a></h2><p>小编的博客主要是基于自己的<a href="https://github.com/ihengshuai/webpack-mpa-template" target="_blank" rel="noreferrer">webpack-mpa-template</a>项目骨架集成的，采用了前后端分离进行开发，前端使用传统的<code>webpack</code>、<code>Vue</code>、<code>React</code>、<code>jquery</code>等技术（项目模板已经集成好了，开箱即用），后端一开始采用<code>Spring</code>+<code>MySQL</code>开发，后台考虑到，nodejs的轻巧及方便以及对大批前端同学友好的全栈项目而言，就走上了<code>koa</code>+<code>mysql</code>的主体方案，相对大批前端同学来说更加友好。 本文就不讲述搭建应用的详细内容了，你可以参考我的项目骨架<a href="https://github.com/ihengshuai/webpack-mpa-template" target="_blank" rel="noreferrer">webpack-mpa-template</a>，开箱即用，支持Vue、React</p><h2 id="应用部署" tabindex="-1">应用部署 <a class="header-anchor" href="#应用部署" aria-label="Permalink to &quot;应用部署&quot;">​</a></h2><p>小编开发完基本的功能后，就准备部署到服务器上了。当然要提交代码到github了，服务器拉取代码后直接</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C3E88D;">yarn run build</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">yarn run deploy</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C3E88D;">pm2 start blog-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>前面说了，后端主要是以node作为支撑服务的，node部署采用流行的<a href="https://pm2.keymetrics.io/" target="_blank" rel="noreferrer">pm2</a>进行部署的，其有很好的负载均衡、热重启、日志收集等等爽到不能再爽的功能，很值得推荐。大家可能还有疑惑那前端打包的页面是如何托管的，其实再执行<code>yarn run deploy</code>后，自动会把打包后的前端页面推到后端的 <code>public</code> 目录作为静态路由，之所以不单独为前端页面部署服务，是因为作为后端路由后可以很好的路由拦截，进行身份鉴权等问题，你是不是很好奇如何做到的，在<a href="https://github.com/ihengshuai/webpack-mpa-template" target="_blank" rel="noreferrer">webpack-mpa-template</a>里都进行了简单的说明</p><h3 id="鉴权拦截器" tabindex="-1">鉴权拦截器 <a class="header-anchor" href="#鉴权拦截器" aria-label="Permalink to &quot;鉴权拦截器&quot;">​</a></h3><p><code>鉴权拦截</code>主要是针对登录信息进行拦截的，整个工程划分了免登录和登录机制模块，其主要针对登录模块进行拦截的 下面是鉴权拦截器的部分👇</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">/* 借用中间件机制 */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// middleware/index.js</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 鉴权机制</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">ctx</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> verifyAuth</span><span style="color:#BABED8;">(ctx</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> next))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 随后路由的鉴权或者其他鉴权可以在这里进行</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// middleware/auth/index.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 设置黑名单用来鉴权 =&gt; 可以采用 正则配置</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> apiBlackList </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^/permission</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">^/xxx$</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 鉴权(伪代码)</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> validateAuth</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 这里可以根据身份信息进行鉴权</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 你可以使用token、cookie或者其他，自由配置</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><blockquote><p>在项目骨架中路由和鉴权有权衡约定，其中有详细说明，在此就详细展开了 你只需要在 <code>validateAuth</code> 根据身份信息拦截即可</p></blockquote><h3 id="nginx代理" tabindex="-1">nginx代理 <a class="header-anchor" href="#nginx代理" aria-label="Permalink to &quot;nginx代理&quot;">​</a></h3><p>前面讲述了我们的应用已经正常运行，接下来就需要进行http配置，使用域名映射到node server。 在<code>conf.d</code>路径下我们建立单独的<code>appName.conf</code>来配置单独应用(如果你熟悉nginx)，这样以应用配置方便以后管理及维护，屡试不爽</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  listen </span><span style="color:#BABED8;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  server_name </span><span style="color:#BABED8;">blog.cn</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # 绑定的域名</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 进行反向代理</span></span>
<span class="line"><span style="color:#C792EA;">  location</span><span style="color:#FFCB6B;"> / </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_redirect </span><span style="color:#BABED8;">off</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_pass </span><span style="color:#BABED8;">http://127.0.0.1:5695</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # 本地node server 地址</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>以上就是针对当前应用的nginx配置，其绑定了<code>blog.cn</code>域名，配置完后保存退出后执行👇</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C3E88D;">nginx -s reload</span><span style="color:#676E95;font-style:italic;"> # nginx 重新加载配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>完成后当我们访问<code>blog.cn</code>就会打开我们的应用</p><h2 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h2><p>以上配置好了应用及域名，然而结果总是出人意料😂，当打开网站时发现，我来个去的蜗牛速度，打开需要<code>10几秒</code>，简直要吐了，然而当我点击某篇文章时，发现居然要加载15s才能进来，我差点一头撞死😭，突然对白嫖的感觉不那么香了。这要是真的是这样，别说别人浏览文章，我自己都嫌弃。 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzpknsk8vj30tv0d60z9.jpg" alt=""> 上图是后来优化后的性能分析一张图（刚开始忘记截图），可以很明显看出<code>entry.js</code>加载了10多s，大小972kb(当时加载快20s，大小1.4M)，这对于1M宽带的服务器来说加载很慢是肯定的 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzpx69v9gj30ui09owic.jpg" alt=""> 上图是js加载网络图(这是优化后的，请忽略时间，还有size大小，主要是讲没有命中缓存)</p><p>从上面可以分析出:</p><ol><li>js bundle过大，虽然进行了代码分割但还是比较大，可以采用<code>cdn</code>网络资源，可以大大减小bundle体积，也可以减小请求时间</li><li>当点击某篇文章时需要等待20s时间，是因为异步加载的js文件过大，因此可以进行预加载，利用浏览器的空闲时间，主动加载，既不影响页面的加载，还能提高加载速度</li><li>js资源没有合理进行缓存，每次重复请求，因此可以缓存静态资源，减少不必要的请求</li><li>懒加载优化网站友好过渡信息</li></ol><p>知道了优化的方向，接下来就着手不同问题对症下药</p><h2 id="设置cdn" tabindex="-1">设置CDN <a class="header-anchor" href="#设置cdn" aria-label="Permalink to &quot;设置CDN&quot;">​</a></h2><p>在webpack(4.x)中我们进行打包时，有个<a href="https://v4.webpack.js.org/configuration/optimization" target="_blank" rel="noreferrer"><code>optimization</code>,<code>splitChunks</code></a>字段 可以在这里进行代码分割的逻辑，因为要结合CDN，对于一些常用的库文件，可以忽略打包，这样就可以减小打包体积，分割的代码也会变小</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.prod.config.js</span></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ...其他配置</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 忽略打包采用cdn</span></span>
<span class="line"><span style="color:#F07178;">  externals</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Vue</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">vue-router</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">VueRouter</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">vuex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Vuex</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">react</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">jquery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">jQuery</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">echarts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">echarts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#F07178;">moment</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">moment</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 代码分割</span></span>
<span class="line"><span style="color:#F07178;">  optimization</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    splitChunks</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 总的配置</span></span>
<span class="line"><span style="color:#F07178;">      chunks</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      minSize</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 30000</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      minChunks</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      maxAsyncRequests</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 5</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      maxInitialRequests</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      cacheGroups</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 当前模块相同的配置会覆盖全局配置</span></span>
<span class="line"><span style="color:#F07178;">        vender</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">          // 对于当前模块 的配置</span></span>
<span class="line"><span style="color:#89DDFF;">        },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // ... 可以继续根据模块或者第三方库进行划分</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>现在需要在页面中主动引入库文件的cdn</p><div class="language-pug line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">pug</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C3E88D;">// pages/index.pug (骨架HTML提供了原生和pug)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//- 引入了jquery</span></span>
<span class="line"><span style="color:#F07178;">script</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://cdn.bootcdn.net/ajax/libs/jquery/2.2.4/jquery.min.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上简单概述了使用webpack<code>代码分割</code>和<code>忽略打包采用cdn</code>引用</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzqm3eg86j30t704labr.jpg" alt=""> (首次加载) <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzqjhu8faj30y106ttbw.jpg" alt=""><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzqk7lwb6j30u706wtbv.jpg" alt=""></p><p>上图即在使用cdn后的网络加载图，而且cdn自带缓存，可以看出首次加载还是很快的，基本上200ms，并且完全不会消耗自己服务器的性能，当再次刷新时cdn全部命中缓存，time全部为0，这也太香了...</p><p>介绍完代码分割及CDN，接着来说说<code>预加载</code></p><h2 id="预加载" tabindex="-1">预加载 <a class="header-anchor" href="#预加载" aria-label="Permalink to &quot;预加载&quot;">​</a></h2><blockquote><p>预加载顾名思义就是提前加载资源，也就是说在下次需要使用该资源或该资源可能会被使用时，提前加载，减小下载请求，或命中缓存，这样就会提高响应速度</p></blockquote><p>提前加载涉及到 <code>preload</code> 及 <code>prefetch</code>，二者都是为提前加载资源而生的，那两者有啥不同呢？</p><ul><li>preload <code>preload</code>一般是提前加载当前页面需要使用的资源，但其不会阻塞主线程进行渲染</li><li>prefetch <code>prefetch</code>一般是用来其他页面可能会用到的资源，比如 <code>A页面</code> 访问 <code>B页面</code> 需要用到的 <code>xx.js</code>资源，浏览器会在cpu空闲时主动加载，其不会阻塞主线程进行渲染</li></ul><p>在上面综合分析后，需要的是<code>prefetch</code>。因为首页并没有什么太大的资源需要加载，库文件已经采用CDN的方式引用，则无需担心加载问题。问题主要在于查看文章时，其他页面需要的js文件过大，加载时间过长，因此，在加载首页时对其进行prefetch，则在进行查看文章时实现秒开的感觉</p><p><code>preload</code>和<code>prefetch</code>都可以在webpack中进行配置，<a href="https://webpack.js.org/guides/code-splitting/#prefetchingpreloading-modules" target="_blank" rel="noreferrer">更多详细配置戳这里</a></p><p>因为网站使用的是 <code>bytemarkdown</code> ，好像是刚发布不久，碰巧看到了就试试水，可惜现在并无CDN引用的链接来使用，只能采用模块打包，文件还是比较大的，这里主要是对其进行预加载</p><p>上代码:</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 预加载 bytemarkdown</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">import</span><span style="color:#BABED8;">(</span><span style="color:#676E95;font-style:italic;">/*webpackPrefetch: true*/</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">@/components/ByteMd/ByteMd</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>采用合适的时机进行资源 <code>prefetch</code></p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzrbxnufqj30ru0bswjd.jpg" alt=""> 上图便是进行了<code>prefetch</code>配置后的网络加载图，可以看出，在空闲时间浏览器主动加载了 <code>0.3373.js</code>资源，并且用 <code>prefetch</code> 标记了 此次请求，可以很清楚当前是 预加载 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzrfz6eflj30my084whc.jpg" alt=""> 当点击文章跳转到详情页时，只是加载了<code>16.32..js</code>文件，只花了<code>424ms</code>，其依赖的<code>0.3373.js</code>文件已经预加载好了，实现了秒开😱，实在是太香了，此时心里突然对 白嫖 好感十足😂</p><p>接着 资源缓存 👇</p><h2 id="缓存" tabindex="-1">缓存 <a class="header-anchor" href="#缓存" aria-label="Permalink to &quot;缓存&quot;">​</a></h2><blockquote><p>缓存：初次访问时对静态资源进行缓存或储存，在下载访问时根据不同的缓存策略命中缓存返还资源，减少请求</p></blockquote><p>在讲缓存前，先大概了解下 缓存又分为 <code>浏览器缓存</code> 和 <code>http缓存</code>，二者相辅相成，你中有我我中有你，如果你对缓存还不太了解，可以阅读我的另一篇文章 <a href="/article/2020/web-cache.html">web缓存策略</a>，此处就不在详细展开</p><p>对于js、css文件，可以在webpack进行打包时，给文件添加hash值，在迭代项目时，会根据hash不同主动进行资源获取，这里推荐使用<code>contenthash</code>及文件内容不变，hash不变。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// webpack.config.js</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  output</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    path</span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> resolve</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../client/dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    filename</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> USE_HASH </span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">js/[name].[chunkhash:4].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">js/[name].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    publicPath</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    chunkFilename</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> USE_HASH </span><span style="color:#89DDFF;">?</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">js/[name].[chunkhash:4].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">js/[name].js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // ... 其他配置</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样就解决了更新问题</p><p>接着需要在nginx中进行静态资源的缓存(本文假设你对nginx有基本了解)</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"> # 缓存图片，音频等资源</span></span>
<span class="line"><span style="color:#C792EA;"> location</span><span style="color:#89DDFF;"> ~</span><span style="color:#C3E88D;"> .*\\.(?:jpg|jpeg|gif|png|ico|cur|gz|svg|gz|mp3|mp4|ogg|webm)$ </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    # 资源防盗链</span></span>
<span class="line"><span style="color:#89DDFF;">    valid_referers </span><span style="color:#BABED8;">*.usword.cn </span><span style="color:#89DDFF;">~\\.google\\. ~\\.baidu\\. *.qq.com;            </span></span>
<span class="line"><span style="color:#BABED8;">    if (</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">invalid_referer) {                                                </span></span>
<span class="line"><span style="color:#BABED8;">      rewrite ^/ http://tva1.sinaimg.cn/large/005HV6Avgy1gvn4e450oxj602.jpg</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                                                         </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#F78C6C;"> 403</span><span style="color:#BABED8;">;                                                    </span></span>
<span class="line"><span style="color:#BABED8;">    }                                                                      </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_pass </span><span style="color:#BABED8;">http://127.0.0.1:8882</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # node server</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_redirect </span><span style="color:#BABED8;">off</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                        </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache </span><span style="color:#BABED8;">my_cache</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # nginx指定缓存项</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache_valid </span><span style="color:#BABED8;">200 </span><span style="color:#F78C6C;">304</span><span style="color:#F78C6C;"> 24h</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache_valid </span><span style="color:#BABED8;">any </span><span style="color:#F78C6C;">10m</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> # 代理过期时间</span></span>
<span class="line"><span style="color:#89DDFF;">    expires </span><span style="color:#BABED8;">7d</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  # 资源过期时间</span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Is-Cache</span><span style="color:#89DDFF;"> true;</span><span style="color:#676E95;font-style:italic;"> # 天机自定义头部                                             </span></span>
<span class="line"><span style="color:#BABED8;"> }                                                                              </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"> # 缓存js，css 同上</span></span>
<span class="line"><span style="color:#C792EA;"> location</span><span style="color:#89DDFF;"> ~</span><span style="color:#C3E88D;"> .*\\.(?:js|css)$ </span><span style="color:#BABED8;">{                                                   </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_pass </span><span style="color:#BABED8;">http://127.0.0.1:9901</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                      </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                           </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache </span><span style="color:#BABED8;">my_cache</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                                  </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache_valid </span><span style="color:#BABED8;">200 </span><span style="color:#F78C6C;">304</span><span style="color:#F78C6C;"> 24h</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                         </span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_cache_valid </span><span style="color:#BABED8;">any </span><span style="color:#F78C6C;">10m</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                             </span></span>
<span class="line"><span style="color:#89DDFF;">    expires </span><span style="color:#BABED8;">7d</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">                                                            </span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Is-Cache</span><span style="color:#89DDFF;"> true;</span><span style="color:#BABED8;">                                              </span></span>
<span class="line"><span style="color:#BABED8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1gvzs1comyfj30th0a50x6.jpg" alt=""> 上图即添加nginx缓存后，非首次访问，浏览器会命中缓存，实现秒开功能</p><h3 id="懒加载" tabindex="-1">懒加载 <a class="header-anchor" href="#懒加载" aria-label="Permalink to &quot;懒加载&quot;">​</a></h3><p>预加载相对的就是预加载，为了提高网页的响应速度，减少不必要的资源请求是很提倡的做法</p><ol><li><p>针对图片资源 可以采用图片懒加载，用其他展位图进行展示，然后一步一步加载图片，在效果上也会比较舒服，很直观的能让用户感受到：哦，资源加载中</p></li><li><p>针对接口请求 减少请求量，采用分页加载。每个用户面对的都是有固定尺寸的显示器，其可展示的内容就只占一屏，其后面的数据就算加载了用户也看不到 可以对浏览器进行滚动监听，当到快到底部时，再进行下一部门内容的加载</p></li></ol><h2 id="资源压缩gzip" tabindex="-1">资源压缩gzip <a class="header-anchor" href="#资源压缩gzip" aria-label="Permalink to &quot;资源压缩gzip&quot;">​</a></h2><p>nginx示例配置，更多配置戳这里查看<a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html" target="_blank" rel="noreferrer">官方文档</a>。</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  gzip </span><span style="color:#BABED8;">on</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  gzip_types </span><span style="color:#BABED8;">text/html text/css application/javascript</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_static: on;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_proxied: </span><span style="color:#89DDFF;">expired</span><span style="color:#BABED8;"> no-cache auth</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_buffers: </span><span style="color:#89DDFF;">16</span><span style="color:#BABED8;"> 8k</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_min_length: 2k;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_comp_level: 4;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_http_version: 1.0;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_vary: on;</span></span>
<span class="line"><span style="color:#BABED8;">  gzip_disable: &quot;</span><span style="color:#89DDFF;">MSIE</span><span style="color:#BABED8;"> [1-6]\\.</span><span style="color:#C3E88D;">&quot;;</span></span>
<span class="line"><span style="color:#C3E88D;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>//待更新...</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文主要从cdn、代码分割、资源缓存、预加载和懒加载等方面，不断优化了网站的加载速度，可能还需要不断的优化，但至少现在比刚开始已经快的很多了。 结尾容我感叹一句：<code>白嫖不容易，别放弃白嫖</code></p>`,65);function i(y,D,F,b,u,d){const a=n("Reward"),l=n("Gitalk");return c(),e("div",null,[t,s(a),s(l)])}const g=p(r,[["render",i]]);export{h as __pageData,g as default};
