import{_ as e,c as p,J as s,V as o,o as r,G as n}from"./chunks/framework.SV1ROkXV.js";const h=JSON.parse('{"title":"使用DockerCompose部署服务","description":"Docker Compose是一种用于定义和运行多个Docker容器应用程序的工具,通过简单的方式来管理多个Docker容器,使得开发人员可以更加专注于应用程序的开发,而不需要关注底层的容器管理细节","frontmatter":{"title":"使用DockerCompose部署服务","description":"Docker Compose是一种用于定义和运行多个Docker容器应用程序的工具,通过简单的方式来管理多个Docker容器,使得开发人员可以更加专注于应用程序的开发,而不需要关注底层的容器管理细节","keywords":"docker-compose,docker集群,docker服务部署,docker镜像,docker网络","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-docker.png"},"headers":[],"relativePath":"fullstack/docker/docker-compose.md","filePath":"fullstack/docker/docker-compose.md","lastUpdated":1709440279000}'),c={name:"fullstack/docker/docker-compose.md"},t=o(`<h1 id="使用dockercompose部署服务" tabindex="-1">使用DockerCompose部署服务 <a class="header-anchor" href="#使用dockercompose部署服务" aria-label="Permalink to &quot;使用DockerCompose部署服务&quot;">​</a></h1><p>以前我们总是用命令管理每个容器的启动、停止等等，若有多个容器时可能还存在启动优先级的问题，那就要等到指定的容器启动后再去启动另一个容器，对于整体的应用服务管理极其不方便，简单的<code>docker run</code>命令更适合初学者或者调试使用， docker提供<code>docker compose</code>来解决多容器部署。</p><p>Docker Compose是Docker官方提供的一个工具，它允许用户通过配置文件定义和运行多个 Docker 容器，以便更轻松地管理 Docker 应用程序的部署和运行。Docker Compose 可以让用户在单个主机上运行多个容器，也可以在多个主机上运行同一组容器，并且可以实现容器之间的相互通信和协作。</p><h2 id="优势" tabindex="-1">优势 <a class="header-anchor" href="#优势" aria-label="Permalink to &quot;优势&quot;">​</a></h2><p>相比启动单个容器，使用docker compose有以下优势：</p><ul><li>简化多容器应用部署： Docker Compose 可以将多个容器的部署、启动、停止、删除等操作集成到一起，以便简化多容器应用的部署和管理。</li><li>统一配置管理： Docker Compose 允许用户使用 YAML 文件定义容器的配置，从而实现容器的统一管理。这使得在多容器应用中对于环境变量、网络设置、端口映射等配置的管理更加方便和统一。</li><li>容器之间的通信： Docker Compose 允许用户自定义容器之间通信的网络，容器之间可以直接通信，方便了应用程序的开发和部署。</li><li>可重复性和可移植性： 使用 Docker Compose 可以将应用程序的部署过程进行标准化，降低了部署过程中的错误率。同时，Docker Compose 配置文件可以在不同的环境中使用，从而实现应用程序的可移植性。</li><li>管理多个环境： Docker Compose 可以对不同的环境进行管理，比如开发环境、测试环境和生产环境，从而方便了应用程序的开发和测试。</li></ul><h2 id="初识dockercompose" tabindex="-1">初识DockerCompose <a class="header-anchor" href="#初识dockercompose" aria-label="Permalink to &quot;初识DockerCompose&quot;">​</a></h2><p>Docker Compose 配置文件是一个 YAML 格式的文件，用于定义多个 Docker 容器的配置和关系。下面是一个简单的 Docker Compose 配置文件示例：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    	context</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> .</span></span>
<span class="line"><span style="color:#F07178;">    	dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> Dockerfile.web</span></span>
<span class="line"><span style="color:#F07178;">    ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">8080:80</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line highlighted"><span style="color:#F07178;">    depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">    	-</span><span style="color:#C3E88D;"> redis</span></span>
<span class="line"><span style="color:#F07178;">  redis</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">redis:alpine</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在这个示例配置文件中，version 字段指定了 Docker Compose 的版本号，services 字段用于定义多个 Docker 容器。在 services 字段中，每个容器都是一个子字段，其键名是容器的名称，其值是一个包含容器配置的键值对。</p><p>在示例配置文件中，定义了两个容器 web 和 redis，其中：</p><ol><li>web 容器使用本地 <code>Dockerfile.web</code> 配置文件构建镜像，将容器的 80 端口映射到主机的 8080 端口，<u>其依赖redis的启动后才会启动自己</u>。</li><li>redis 容器使用 Redis 官方镜像，并使用 Alpine 版本，没有指定其他特殊的配置。</li></ol><p>从以上可以看出docker compose是将整个应用的所有容器全部写在了同一个配置文件中，其也会自动管理容器的启动先后顺序，而对于配置文件的管理也更加方便，接下来看下其常用语法。</p><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><p>docker compose的配置是个yaml文件，在配置文件中容器将作为服务部署，docker compose帮我们统一管理这些服务，包括镜像、启动顺序、网络、数据卷、端口、重启策略等等。配置中services、networks、volumes等这些都可以在最顶端定义表示需要创建的全局network、volume等等。</p><h3 id="services" tabindex="-1">services <a class="header-anchor" href="#services" aria-label="Permalink to &quot;services&quot;">​</a></h3><p>在Docker Compose中，services是定义容器的基本单位</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  &lt;service_name&gt;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;service_config&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>其中，<code>&lt;service_name&gt;</code>是服务名称，可以任意命名，但建议使用有意义的名称。<code>&lt;service_config&gt;</code>是服务的配置信息，包含了运行服务所需的所有信息，如镜像、容器名称、端口映射、环境变量等。</p><p>例子：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> nginx</span></span>
<span class="line"><span style="color:#F07178;">    ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">8080:80</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="image" tabindex="-1">image <a class="header-anchor" href="#image" aria-label="Permalink to &quot;image&quot;">​</a></h3><p>services中的每个容器都是一个服务，其都会包含镜像文件。镜像可以指定第三方的，也可以使用本地Dockerfile进行构建</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 省略其他...</span></span>
<span class="line"><span style="color:#C3E88D;">&lt;service_config&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 使用第三方</span></span>
<span class="line"><span style="color:#F07178;">  image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> nginx:alpine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 本地构建</span></span>
<span class="line"><span style="color:#F07178;">  build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  	context</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> .</span></span>
<span class="line"><span style="color:#F07178;">  	dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> Dockerfile</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>你可以在容器中通过<code>image</code>指定第三方的镜像文件，也可以使用<code>build</code>来进行本地镜像的构建，<code>build</code>可以简写成<code>build: your dir</code>不需要指定上下文等等，其默认会使用当前目录下的<code>Dockerfile</code>文件进行构建</p><h3 id="ports、networks、volumes" tabindex="-1">ports、networks、volumes <a class="header-anchor" href="#ports、networks、volumes" aria-label="Permalink to &quot;ports、networks、volumes&quot;">​</a></h3><p>除了容器中的镜像外，其他如：端口、数据卷、网络其实都是类似，并且和直接用<code>docker run</code>启动容器时使用差不多</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 省略其他...</span></span>
<span class="line"><span style="color:#C3E88D;">&lt;service_config&gt;</span></span>
<span class="line"><span style="color:#F07178;">  image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> nginx:alpine</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 端口</span></span>
<span class="line"><span style="color:#F07178;">  ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">&lt;host_port&gt;:&lt;container_port&gt;/&lt;protocol&gt;</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">1000</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">8080:80</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">443:443/tcp</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 数据卷</span></span>
<span class="line"><span style="color:#F07178;">  volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#C3E88D;"> myvolume:/etc/data</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#C3E88D;"> /root/html:/etc/nginx/html</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 网络</span></span>
<span class="line"><span style="color:#F07178;">  networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  	-</span><span style="color:#C3E88D;"> mynetwork</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义数据卷</span></span>
<span class="line"><span style="color:#F07178;">volumes</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">	myvolume</span><span style="color:#89DDFF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 定义网络</span></span>
<span class="line"><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">	mynetwork</span><span style="color:#89DDFF;">:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>上面展示了端口、数据卷、网络的基本配置：</p><ul><li>端口：在容器中使用<code>ports</code>来定义端口的的映射，语法如上，当仅指定一个端口是<code>&lt;container_port&gt;</code>，这种就是告诉外面容器内使用了1000端口，你可以进行映射，实际上并没有和宿主机进行映射而是一种定义，可dockerfile中的expose类似；使用<code>&lt;host_port&gt;:&lt;container_port&gt;</code>时前面表示宿主机端口，后者表示容器端口，二者进行映射；除此还支持协议，直接在最后加上<code>/&lt;protocol&gt;</code>即可</li><li>数据卷：容器中使用<code>volumes</code>列表进行卷的映射，你可以直接使用宿主机的目录进行映射，也可以使用docker创建的卷，并且你还可以使用没有创建的数据卷，但同时你必须在顶级定义指定的数据卷，这样docker会帮你自动创建数据卷</li><li>网络：使用网络和数据卷类似，当使用不存在的自定义的网络时，也需要在顶级进行定义</li></ul><h3 id="depends-on" tabindex="-1">depends_on <a class="header-anchor" href="#depends-on" aria-label="Permalink to &quot;depends_on&quot;">​</a></h3><p>使用depends_on字段来定义容器之间的依赖关系，以确保在启动容器时，必须先启动其所依赖的容器</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C3E88D;"> &lt;service_name&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C3E88D;"> &lt;service_name2&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中，<code>&lt;service_name&gt;</code>是所依赖的服务名称，可以是单个服务或多个服务</p><p>例子：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  db</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> mysql</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> my-web-app</span></span>
<span class="line"><span style="color:#F07178;">    depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> db</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个示例中，我们定义了两个服务：一个名为db的服务，使用了mysql镜像；一个名为web的服务，使用了自定义的web应用镜像，并在depends_on字段中指定了db服务，表示web服务依赖于db服务。</p><p>在启动这个Docker Compose文件时，Docker会先启动db服务，然后再启动web服务，以确保web服务可以连接到db服务并正常运行。</p><h3 id="environment" tabindex="-1">environment <a class="header-anchor" href="#environment" aria-label="Permalink to &quot;environment&quot;">​</a></h3><p>可以使用environment字段来设置容器中的环境变量，其与<code>docker run -e</code>、Dockerfile中定义的<code>ENV</code>类似</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C3E88D;"> &lt;key&gt;=&lt;value&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#C3E88D;"> &lt;key2&gt;=&lt;value2&gt;</span></span>
<span class="line"><span style="color:#F78C6C;">  ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>其中，<code>&lt;key&gt;</code>是环境变量的名称，<code>&lt;value&gt;</code>是环境变量的值。可以设置多个环境变量，每个环境变量之间用-分隔</p><p>例子：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> my-web-app</span></span>
<span class="line"><span style="color:#F07178;">    environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_HOST</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> db</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_USER</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> user</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> password</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在这个示例中，我们定义了一个名为web的服务，使用了自定义的web应用镜像，并设置了三个环境变量：MYSQL_HOST、MYSQL_USER和MYSQL_PASSWORD。这些环境变量可以在容器内部使用，例如在web应用的配置文件中。</p><p>需要注意的是，如果在Docker Compose文件中定义了环境变量，而在Dockerfile中也定义了同名的环境变量，那么Docker Compose文件中的环境变量会覆盖Dockerfile中的环境变量。</p><p>除此之外还可以使用<code>.env</code>文件或命令行参数来设置环境变量。这样可以避免将敏感信息硬编码到Docker Compose文件中</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>Docker Compose文件中定义的环境变量会覆盖.env文件中的同名环境变量</p></div><p><code>.env</code>配置文件示例：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>MYSQL_HOST=db</span></span>
<span class="line"><span>MYSQL_USER=user</span></span>
<span class="line"><span>MYSQL_PASSWORD=password</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>compose文件配置：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> my-web-app</span></span>
<span class="line"><span style="color:#F07178;">    environment</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_HOST</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> \${MYSQL_HOST}</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_USER</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> \${MYSQL_USER}</span></span>
<span class="line"><span style="color:#F07178;">      MYSQL_PASSWORD</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> \${MYSQL_PASSWORD}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>使用docker-compose命令的<code>--env-file</code>参数来指定环境变量文件。</p><h3 id="restart" tabindex="-1">restart <a class="header-anchor" href="#restart" aria-label="Permalink to &quot;restart&quot;">​</a></h3><p>使用restart字段来定义容器的重启策略，在容器异常退出或停止时，自动重新启动容器</p><p>语法：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">restart</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> &lt;restart_policy&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>&lt;restart_policy&gt;</code>是重启策略，可以是以下几种之一：</p><ul><li><code>no</code>：不重启容器，默认值</li><li><code>always</code>：总是重启容器，除非手动停止容器</li><li><code>on-failure</code>：在容器异常退出时重启容器，可以使用-t选项指定重启次数</li><li><code>unless-stopped</code>：除非手动停止容器，否则总是重启容器</li></ul><p>例子：</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  web</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    image</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> my-web-app</span></span>
<span class="line"><span style="color:#F07178;">    restart</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> always</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在这个示例中，我们定义了一个名为web的服务，使用了自定义的web应用镜像，并设置了重启策略为always，表示总是重启容器。需要注意的是，restart字段只会在容器异常退出或停止时才会生效，而不会影响容器的启动顺序或依赖关系。</p><h3 id="更多" tabindex="-1">更多 <a class="header-anchor" href="#更多" aria-label="Permalink to &quot;更多&quot;">​</a></h3><p>关于docker compose配置的讲解就到这里，其配置和<code>docker run</code>很相似，关于更多配置可以查看👉<a href="https://docs.docker.com/compose/compose-file/05-services/" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="命令" tabindex="-1">命令 <a class="header-anchor" href="#命令" aria-label="Permalink to &quot;命令&quot;">​</a></h2><p>有了配置文件后可以通过命令行对整个服务进行发布、构建、删除等等</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose [-f </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ar</span><span style="color:#BABED8;">g</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">...] [--profile </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">...] [options] [COMMAND] [ARGS...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="build" tabindex="-1">build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;build&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose build [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用于构建Docker镜像，可以通过一些参数来自定义构建过程：</p><ul><li><code>--no-cache</code>：禁止使用缓存进行构建。如果使用了缓存，Docker会在构建镜像时尽可能地复用之前构建过的镜像层，以提高构建速度。使用--no-cache选项可以强制Docker从头开始构建镜像</li><li><code>--pull</code>：在构建镜像之前，拉取最新的基础镜像。如果基础镜像版本已经过时，使用--pull选项可以确保构建的镜像使用最新的基础镜像</li><li><code>--parallel</code>：并行构建多个Docker镜像。如果同时构建多个镜像，可以使用--parallel选项加快构建速度</li></ul><h3 id="up" tabindex="-1">up <a class="header-anchor" href="#up" aria-label="Permalink to &quot;up&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose up [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用于启动Docker Compose定义的所有服务，可以通过一些参数来自定义启动过程：</p><ul><li><code>-d</code>：在后台模式下启动服务。如果不使用-d选项，则docker-compose up命令会在前台模式下启动服务，并输出日志信息</li><li><code>--build</code>：在启动服务之前，自动构建镜像。如果服务的镜像已经存在，使用--build选项可以强制重新构建镜像</li><li><code>--scale</code>：扩展指定服务的容器数量。使用--scale选项可以根据实际需要动态地扩展服务的容器数量。</li></ul><h3 id="stop" tabindex="-1">stop <a class="header-anchor" href="#stop" aria-label="Permalink to &quot;stop&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose stop [OPTIONS] [SERVICE...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用于停止由Docker Compose定义的服务的容器，不会删除容器、网络和卷：</p><ul><li><code>-t</code>：停止服务的超时时间。使用-t选项可以指定停止服务的超时时间，单位为秒</li><li><code>SERVICE</code>：指定要停止的服务，如果只需要停止一个或几个服务的容器，可以在stop命令后面指定要停止的服务名</li></ul><h3 id="rm" tabindex="-1">rm <a class="header-anchor" href="#rm" aria-label="Permalink to &quot;rm&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose rm [OPTIONS]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用于停止并删除由Docker Compose定义的服务的容器、网络和卷：</p><ul><li><code>-f</code>：强制停止并删除服务的容器、网络和卷。如果服务的容器正在运行或者网络和卷正在被使用，使用-f选项可以强制停止并删除它们</li><li><code>--stop</code>：停止服务的容器，但不删除它们。如果只想停止服务的容器而不删除它们，可以使用--stop选项</li></ul><h3 id="kill" tabindex="-1">kill <a class="header-anchor" href="#kill" aria-label="Permalink to &quot;kill&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose kill [OPTIONS] [SERVICE...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>用于强制停止由Docker Compose定义的服务的容器：</p><ul><li><code>-s</code>：指定信号量。使用-s选项可以指定要发送的信号量</li></ul><h3 id="更多-1" tabindex="-1">更多 <a class="header-anchor" href="#更多-1" aria-label="Permalink to &quot;更多&quot;">​</a></h3><p>更多关于docker compose命令使用方法参考👉<a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noreferrer">官方文档</a></p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2><p>本次将部署两个容器服务：前端和后端，其中前端使用nginx进行部署，后端使用nodejs作为api服务，将nginx端口映射到宿主机，然后通过宿主机<code>IP:Port</code>形式访问前端页面，页面中请求后端服务，点击这里👉<a href="https://github.com/ihengshuai/blog/blob/main/__example__/docker/compose" target="_blank" rel="noreferrer">下载示例源码</a>。</p><ol><li>创建前端页面静态文件index.html：页面包括一个输入框和一个按钮，点击发送请求到<code>/api</code>，这里会请求nginx，nginx做反向代理到nodejs<div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">发送</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> input </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  	fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">/api?q=</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">input</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      mode</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">cors</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      method</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">     .</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">     .</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li>创建<code>default.conf</code>进行nginx的配置与转发：当访问<code>/</code>是返回前端页面，页面中的请求<code>/api</code>会被代理到<code>compose-nodejs:10010</code>，这里的<code>compose-nodejs</code>是nodejs的服务名，只有当compose中的容器使用同一个网络时才可以使用服务名的形式访问<div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">upstream</span><span style="color:#FFCB6B;"> backend </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  server</span><span style="color:#BABED8;"> compose-nodejs:10010;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  listen </span><span style="color:#BABED8;">80</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  server_name </span><span style="color:#BABED8;">localhost</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 首页静态页面</span></span>
<span class="line"><span style="color:#C792EA;">  location</span><span style="color:#FFCB6B;"> / </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    root </span><span style="color:#BABED8;">/usr/share/nginx/html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    index </span><span style="color:#BABED8;">index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  # 反向代理到 nodejs</span></span>
<span class="line"><span style="color:#C792EA;">  location</span><span style="color:#FFCB6B;"> /api </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	# 允许跨域</span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Access-Control-Allow-Origin </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_origin always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Access-Control-Allow-Credentials</span><span style="color:#89DDFF;"> true</span><span style="color:#BABED8;"> always</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Access-Control-Allow-Methods </span><span style="color:#C3E88D;">&#39;GET, POST, OPTIONS&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    add_header </span><span style="color:#BABED8;">Access-Control-Allow-Headers </span><span style="color:#C3E88D;">&#39;content-type&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#C3E88D;">&quot;OPTIONS&quot;</span><span style="color:#BABED8;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#F78C6C;"> 204</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">X-Forward-For </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_set_header </span><span style="color:#BABED8;">X-Nginx-Proxy</span><span style="color:#89DDFF;"> true;</span></span>
<span class="line"><span style="color:#89DDFF;">    proxy_pass </span><span style="color:#BABED8;">http://backend</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></li><li>创建nodejs作为后端服务：nodejs使用express作为http服务，并监听10010端口，当访问时返回code和时间戳<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> express</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    code</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    date</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> +new</span><span style="color:#82AAFF;"> Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10010</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">server is runnning on port 10010</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li>创建docker-compose.yml配置文件：里面包含了nginx和nodejs容器，两者都是用本地的Dockerfile进行构建镜像，nginx映射宿主机<code>10010</code>端口到容器的80端口，并且两者的启动顺序为<code>compose-nodejs</code>、<code>compose-nginx</code>，使用相同的网络<code>compose</code></li></ol><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">version</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">services</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  compose-nginx</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      context</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> .</span></span>
<span class="line"><span style="color:#F07178;">      dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> Dockerfile.nginx</span></span>
<span class="line"><span style="color:#F07178;">    container_name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> compose-nginx</span></span>
<span class="line"><span style="color:#F07178;">    ports</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">10010:80</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    depends_on</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> compose-nodejs</span></span>
<span class="line"><span style="color:#F07178;">    networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> compose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  compose-nodejs</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">    build</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">      context</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> .</span></span>
<span class="line"><span style="color:#F07178;">      dockerfile</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> Dockerfile.nodejs</span></span>
<span class="line"><span style="color:#F07178;">    container_name</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> compose-nodejs</span></span>
<span class="line"><span style="color:#F07178;">    networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">      -</span><span style="color:#C3E88D;"> compose</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">networks</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#F07178;">  compose</span><span style="color:#89DDFF;">:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="5"><li><p>创建镜像构建文件：分别使用<code>Dockerfile.nginx</code>和<code>Dockerfile.nodejs</code>来构建nginx和nodejs镜像，具体配置文件如下</p><p>Dockerfile.nginx</p><div class="language-docker line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#BABED8;"> nginx:alpine</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#BABED8;"> index.html /usr/share/nginx/html</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#BABED8;"> default.conf /etc/nginx/conf.d</span></span>
<span class="line"><span style="color:#F78C6C;">EXPOSE</span><span style="color:#BABED8;"> 80</span></span>
<span class="line"><span style="color:#F78C6C;">ENTRYPOINT</span><span style="color:#BABED8;"> [ </span><span style="color:#C3E88D;">&quot;nginx&quot;</span><span style="color:#BABED8;">, </span><span style="color:#C3E88D;">&quot;-g&quot;</span><span style="color:#BABED8;">, </span><span style="color:#C3E88D;">&quot;daemon off;&quot;</span><span style="color:#BABED8;"> ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Dockerfile.nodejs</p><div class="language-docker line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">docker</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">FROM</span><span style="color:#BABED8;"> node:alpine</span></span>
<span class="line"><span style="color:#F78C6C;">WORKDIR</span><span style="color:#BABED8;"> /app</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#BABED8;"> package.json .</span></span>
<span class="line"><span style="color:#F78C6C;">RUN</span><span style="color:#BABED8;"> npm install</span></span>
<span class="line"><span style="color:#F78C6C;">COPY</span><span style="color:#BABED8;"> server.js .</span></span>
<span class="line"><span style="color:#F78C6C;">EXPOSE</span><span style="color:#BABED8;"> 10010</span></span>
<span class="line"><span style="color:#F78C6C;">ENTRYPOINT</span><span style="color:#BABED8;"> [ </span><span style="color:#C3E88D;">&quot;npm&quot;</span><span style="color:#BABED8;">, </span><span style="color:#C3E88D;">&quot;run&quot;</span><span style="color:#BABED8;">, </span><span style="color:#C3E88D;">&quot;server.js&quot;</span><span style="color:#BABED8;"> ]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li><p>启动整体服务：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> compose up -d</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://docs.docker.com/compose/compose-file/build/" target="_blank" rel="noreferrer">Compose file build reference</a></li><li><a href="https://docs.docker.com/compose/compose-file/03-compose-file/" target="_blank" rel="noreferrer">The Compose file</a></li><li><a href="https://docs.docker.com/compose/compose-file/04-version-and-name/" target="_blank" rel="noreferrer">Version and name top-level element</a></li><li><a href="https://docs.docker.com/compose/compose-file/05-services/" target="_blank" rel="noreferrer">Services top-level element</a></li><li><a href="https://docs.docker.com/compose/compose-file/06-networks/" target="_blank" rel="noreferrer">Networks top-level element</a></li><li><a href="https://docs.docker.com/compose/compose-file/07-volumes/" target="_blank" rel="noreferrer">Volumes top-level element</a></li><li><a href="https://docs.docker.com/compose/compose-file/08-configs/" target="_blank" rel="noreferrer">Configs top-level element</a></li><li><a href="https://docs.docker.com/compose/compose-file/09-secrets/" target="_blank" rel="noreferrer">Secrets top-level element</a></li><li><a href="https://docs.docker.com/compose/reference/" target="_blank" rel="noreferrer">Command line Guides</a></li><li><a href="https://docs.docker.com/language/nodejs/develop/" target="_blank" rel="noreferrer">NodeJS Guides</a></li></ul>`,101);function i(D,y,d,F,b,m){const a=n("Reward"),l=n("Gitalk");return r(),p("div",null,[t,s(a),s(l)])}const C=e(c,[["render",i]]);export{h as __pageData,C as default};
