import{_ as s,c as n,o as a,V as p}from"./chunks/framework.SV1ROkXV.js";const d=JSON.parse('{"title":"项目集成之Monorepo","description":"项目集成monorepo","frontmatter":{"title":"项目集成之Monorepo","description":"项目集成monorepo","keywords":"monorepo使用","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-project-integration.png"},"headers":[],"relativePath":"frontend/project-integration/monorepo.md","filePath":"frontend/project-integration/monorepo.md","lastUpdated":1709440279000}'),e={name:"frontend/project-integration/monorepo.md"},l=p(`<h1 id="项目集成之monorepo" tabindex="-1">项目集成之Monorepo <a class="header-anchor" href="#项目集成之monorepo" aria-label="Permalink to &quot;项目集成之Monorepo&quot;">​</a></h1><p>Monorepo（单一代码仓库）是指在软件开发中，将多个项目或组件放置在同一个代码仓库中的开发模式。在传统的多仓库开发模式中，每个项目或组件都有自己独立的代码仓库，而在Monorepo中，所有项目或组件共享同一个代码仓库</p><h2 id="发展历程" tabindex="-1">发展历程 <a class="header-anchor" href="#发展历程" aria-label="Permalink to &quot;发展历程&quot;">​</a></h2><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/640.png" alt=""></p><ul><li>单体应用：应用都处在一个仓库内，按文件名等划分一些公共方法、组件</li><li>多仓库：多个仓库管理一个应用，每个仓库都是一个独立的包</li><li>单仓库多模块：单个仓库管理多个包</li></ul><p>单体应用、到仓库会随着业务的复杂度提升、项目的复杂度增长，会导致编译速度变慢、调试成本变大、代码共享难度大等一系列的问题，这些问题monorepo模式都可以解决</p><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>什么是monorepo呢❓</p><p>Monorepo 只是一个管理概念，实际上它并不代表某项具体的技术，更不是所谓的框架。开发人员需要根据不同场景、不同的研发习惯，使用相应的技术手段或者工具，来达到或者完善它的整个流程，从而达到更好的开发和管理体验</p><p>monorepo中可以管理多个不同的包，通常结构如下所示：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">group</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#C3E88D;"> node_modules/</span></span>
<span class="line"><span style="color:#FFCB6B;">├──</span><span style="color:#C3E88D;"> packages/</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#C3E88D;">   ├── packageA  # 子包A</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#C3E88D;">   │    └── package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#C3E88D;">   └── packageB  # 子包B</span></span>
<span class="line"><span style="color:#FFCB6B;">│</span><span style="color:#C3E88D;">        └── package.json</span></span>
<span class="line"><span style="color:#FFCB6B;">└──</span><span style="color:#C3E88D;"> package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 项目中引入</span></span>
<span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#C3E88D;"> install @group/packageA ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><ol><li>代码共享和复用：Monorepo将多个项目或组件放置在同一个代码仓库中，促进了代码的共享和复用。不同项目之间可以更轻松地共享代码、模块、工具和配置文件，避免了重复编写和维护相似的代码。这样可以减少代码冗余，提高开发效率</li><li>简化协作和协同开发：Monorepo使团队成员能够更紧密地协作开发。开发人员可以在同一个代码库中共享问题和解决方案，跟踪彼此的更改，更容易进行代码评审和知识共享。这样可以提高团队的协同效率，促进团队合作和沟通</li><li>统一构建和部署过程：Monorepo可以简化构建和部署过程。由于所有项目或组件在同一个代码仓库中，可以使用统一的构建和部署流程来管理整个代码库。这样可以减少维护多个独立仓库的复杂性，提高开发效率和一致性。同时，可以更轻松地管理共享的构建工具和配置文件</li><li>更好的代码可视性和管理：Monorepo提供了更好的代码可视性和管理。所有项目或组件的代码都在同一个代码仓库中，可以方便地查看整个代码库的历史记录、版本控制和问题跟踪。这使得追踪更改、维护和管理代码更加方便。同时，可以更容易地进行代码重构、重组和重命名，因为所有相关代码都在同一个仓库中</li></ol><blockquote><p>任何技术或多或少都有一些缺陷，monorepo模式中代码对于成员都是透明的，无法精确按文件夹进行权限分配；除此之外子包变多时对于版本的控制也会变得麻烦</p></blockquote><h2 id="包管理方案" tabindex="-1">包管理方案 <a class="header-anchor" href="#包管理方案" aria-label="Permalink to &quot;包管理方案&quot;">​</a></h2><p>上面讲了关于monorepo单仓库多包管理方案的优势和必要性，那么具体是如何实现的呢？接下来我们就来看看通过如下几个方式实现monorepo</p><h3 id="npm" tabindex="-1">npm <a class="header-anchor" href="#npm" aria-label="Permalink to &quot;npm&quot;">​</a></h3><p>npm v7开始引入了workspace的概念，不过使用的效果并不是很好，也不推荐使用</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm install npm@7</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm init -w packages</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在package.json中配置：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">monorepo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> true,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>创建子包：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> cd packages </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#FFCB6B;"> npm</span><span style="color:#C3E88D;"> init -w packages/a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>依赖安装：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm install axios -w package/a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行命令：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#C3E88D;"> run dev -w package/a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于npm无法提高依赖的重复使用，磁盘占用空间会变得越来越大，一般不使用npm</p><h3 id="yarn" tabindex="-1">yarn <a class="header-anchor" href="#yarn" aria-label="Permalink to &quot;yarn&quot;">​</a></h3><p>初始化仓库：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> yarn init -y</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>定义<a href="https://yarnpkg.com/features/workspaces" target="_blank" rel="noreferrer">workspaces</a>字段，是个数组可以使用 glob 语法，下面就定义了<code>packages</code>路径下的为子包</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">root</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">private</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> true,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">license</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">MIT</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">workspaces</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">packages/*</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>根路径安装依赖：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> yarn add typescript -W -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>-W</code>表示在当前根路径安装</p><p>给某个子包安装依赖：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> yarn workspace pkg1 add vue -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>给某个子包安装其他的子包：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> yarn workspace pkg1 add pkg2@1.0.0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>需要注意安装子包时需要标明对应的工作区的版本号，否则会报错</p></blockquote><p>通常yarn monorepo会结合 <a href="https://lerna.js.org/" target="_blank" rel="noreferrer">lerna</a> 来管理仓库，它是有babel为解决monorepo而创建的，内置了丰富的版本管理、打包管理流程，现在yarn已经具备了workspace的能力，因此lerna可以专注用来管理monorepo的版本发布，而包的管理交给yarn处理就可以了。现在来看下使用：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm install lerna -g</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 初始化</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npx lerna init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>初始化后会生成一个配置文件：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">$schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">node_modules/lerna/schemas/lerna-schema.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">1.0.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>更多lerna的配置可以查看<a href="https://lerna.js.org/docs/getting-started" target="_blank" rel="noreferrer">官方文档</a></p><p>lerna简单的使用命令</p><ul><li>run：使用<code>lerna run build</code>就会执行所有包的build的命令，通过<code>--scope</code>参数可以指定对应的包</li><li>create: 使用<code>lerna create 包名</code>会创建对应的子包</li></ul><p>使用lerna平滑升级包</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> lerna version --no-private</span></span>
<span class="line"><span style="color:#FFCB6B;">info</span><span style="color:#C3E88D;"> cli using local version of lerna</span></span>
<span class="line"><span style="color:#FFCB6B;">lerna</span><span style="color:#C3E88D;"> notice cli v7.1.5</span></span>
<span class="line"><span style="color:#FFCB6B;">lerna</span><span style="color:#C3E88D;"> info versioning independent</span></span>
<span class="line"><span style="color:#FFCB6B;">lerna</span><span style="color:#C3E88D;"> info Assuming all packages changed</span></span>
<span class="line"><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> Select a new version </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#BABED8;"> @mono/pkg1 </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">currently</span><span style="color:#F78C6C;"> 0.0</span><span style="color:#C3E88D;">.1</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> (</span><span style="color:#FFCB6B;">Use</span><span style="color:#C3E88D;"> arrow keys</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">❯</span><span style="color:#C3E88D;"> Patch </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">0.0.2</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">  Minor</span><span style="color:#BABED8;"> (0.1.0) </span></span>
<span class="line"><span style="color:#FFCB6B;">  Major</span><span style="color:#BABED8;"> (1.0.0) </span></span>
<span class="line"><span style="color:#FFCB6B;">  Prepatch</span><span style="color:#BABED8;"> (0.0.2-alpha.0) </span></span>
<span class="line"><span style="color:#FFCB6B;">  Preminor</span><span style="color:#BABED8;"> (0.1.0-alpha.0) </span></span>
<span class="line"><span style="color:#FFCB6B;">  Premajor</span><span style="color:#BABED8;"> (1.0.0-alpha.0) </span></span>
<span class="line"><span style="color:#FFCB6B;">  Custom</span><span style="color:#C3E88D;"> Prerelease </span></span>
<span class="line"><span style="color:#FFCB6B;">  Custom</span><span style="color:#C3E88D;"> Version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>lerna目前结合了 <a href="https://nx.dev/getting-started/intro" target="_blank" rel="noreferrer">nx</a> 来进行增量打包，性能可以说特别好</p><h3 id="pnpm" tabindex="-1">pnpm <a class="header-anchor" href="#pnpm" aria-label="Permalink to &quot;pnpm&quot;">​</a></h3><p>pnpm就是为解决monorepo问题而产生的的包管理方案，结合了很多其他包管理器优秀的方案</p><p>首先安装pnpm：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm i pnpm -g</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>初始化项目：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> pnpm init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>创建<code>pnpm-workspace.yaml</code>文件使用yaml语法定义所有的子包，同样支持glob匹配</p><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F07178;">packages</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">packages/**</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">  -</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">docs</span><span style="color:#89DDFF;">&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里规定<code>packages</code>下的路径和docs都是子包</p><p>pnpm命令使用</p><ul><li>install：使用<code>pnpm install</code>会安装所有依赖</li><li>add：使用<code>pnpm add --filter 子包名 依赖名</code>来为指定的子包安装依赖</li></ul><p>更多命令使用请参考官方文档</p><h2 id="构建方案" tabindex="-1">构建方案 <a class="header-anchor" href="#构建方案" aria-label="Permalink to &quot;构建方案&quot;">​</a></h2><p>在monorepo项目中打包可能会是很难受的，对于一个大的项目来讲可能会有很多子包，子包之间可能也会存在复杂的依赖关系，那么打包的顺序就很关键了，如果手动来管理就会变得非常麻烦，所以就出现了一些优秀的打包器：<a href="https://nx.dev/" target="_blank" rel="noreferrer">nx</a>、<a href="https://turbo.build/pack/docs" target="_blank" rel="noreferrer">turbo</a>、<a href="https://rushjs.io/pages/intro/welcome/" target="_blank" rel="noreferrer">rush</a></p><h3 id="turbo" tabindex="-1">turbo <a class="header-anchor" href="#turbo" aria-label="Permalink to &quot;turbo&quot;">​</a></h3><p>turbo是<a href="https://vercel.com/" target="_blank" rel="noreferrer">Vercel</a>公司推出的一款打包器，他可以实现增量打包并对产物实现缓存的逻辑，如果源文件的内容没变时就会直接跳过打包流程使用缓存，这里我们使用pnpm结合turbo一起使用</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 在工作区安装turbo</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> pnpm add turbo -Dw</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建turbo配置文件：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">$schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">https://turborepo.org/schema.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">pipeline</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;"> // </span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#F78C6C;">dependsOn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">^build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#676E95;font-style:italic;"> // </span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">globalDependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> []</span><span style="color:#676E95;font-style:italic;"> // </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="nx" tabindex="-1">nx <a class="header-anchor" href="#nx" aria-label="Permalink to &quot;nx&quot;">​</a></h3><p>nx是<a href="https://nx.app/company" target="_blank" rel="noreferrer">Nrwl</a>推出的专门为Angular和React等现代Web应用提供工具和解决方案的公司</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 使用nx创建monorepo仓库</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npx create-nx-workspace</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>会生成<code>nx.json</code>配置文件：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">extends</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">nx/presets/npm.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">$schema</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">./node_modules/nx/schemas/nx-schema.json</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">tasksRunnerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#F78C6C;">runner</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">nx/tasks-runners/default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#F78C6C;">options</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#F07178;">cacheableOperations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">          &quot;</span><span style="color:#C3E88D;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">          &quot;</span><span style="color:#C3E88D;">lint</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">          &quot;</span><span style="color:#C3E88D;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">          &quot;</span><span style="color:#C3E88D;">e2e</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">        ],</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">targetDefaults</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    &quot;</span><span style="color:#FFCB6B;">build</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#F78C6C;">dependsOn</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#C3E88D;">^build</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      ],</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#F78C6C;">outputs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">        &quot;</span><span style="color:#C3E88D;">{projectRoot}/dist</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">      ]</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>上面的<code>cacheableOperations</code>属性用来配置可以被缓存的脚本，可以自行定义；<code>targetDefaults</code>来配置打包的流程，每个key对应一个打包脚本，<code>dependsOn</code>中定义当前脚本依赖哪个脚本，以<code>^</code>开头的表示依赖的其他包的脚本，这样打包时就会有个先后顺序；没有的则表示当前仓库的执行脚本。<code>outputs</code>表示打包后的产物路径，nx会根据上次的产物进行计算，对源码没有改变的包会进行增量打包</p><h3 id="rush" tabindex="-1">rush <a class="header-anchor" href="#rush" aria-label="Permalink to &quot;rush&quot;">​</a></h3><p><a href="https://rushjs.io/pages/intro/get_started/" target="_blank" rel="noreferrer">rush</a>是微软公司推出的monorepo仓库的解决方案</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> npm install -g @microsoft/rush</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="版本方案" tabindex="-1">版本方案 <a class="header-anchor" href="#版本方案" aria-label="Permalink to &quot;版本方案&quot;">​</a></h2><h3 id="changesets" tabindex="-1">changesets <a class="header-anchor" href="#changesets" aria-label="Permalink to &quot;changesets&quot;">​</a></h3><p><a href="https://github.com/changesets/changesets" target="_blank" rel="noreferrer">https://github.com/changesets/changesets</a></p><p>changesets用来解决monorepo仓库的包版本管理方案</p><h2 id="实战" tabindex="-1">实战 <a class="header-anchor" href="#实战" aria-label="Permalink to &quot;实战&quot;">​</a></h2>`,84),o=[l];function r(t,c,i,F,u,D){return a(),n("div",null,o)}const b=s(e,[["render",r]]);export{d as __pageData,b as default};
