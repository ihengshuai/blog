import{_ as p,c as o,J as s,V as e,o as r,G as n}from"./chunks/framework.SV1ROkXV.js";const A=JSON.parse('{"title":"Typescript装饰器指南","description":"这是一篇Typescript装饰器使用指南,教大家理解什么装饰器,装饰器的作用","frontmatter":{"title":"Typescript装饰器指南","description":"这是一篇Typescript装饰器使用指南,教大家理解什么装饰器,装饰器的作用","keywords":"Typescript装饰器,ts装饰器,装饰器,类装饰器,参数装饰器,属性装饰器,方法装饰器,访问装饰器,装饰器模式,设计模式,Typescript Decorator","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-ts.png"},"headers":[],"relativePath":"article/2021/ts-decorator.md","filePath":"article/2021/ts-decorator.md","lastUpdated":1709440279000}'),t={name:"article/2021/ts-decorator.md"},c=e(`<h1 id="typescript装饰器指南" tabindex="-1">Typescript装饰器指南 <a class="header-anchor" href="#typescript装饰器指南" aria-label="Permalink to &quot;Typescript装饰器指南&quot;">​</a></h1><blockquote><p>Typescript装饰器模式，可以有效的提高开发效率，就像Java那种注解；装饰器让TypeScript的世界更好。 我们使用的许多库都基于这一强大特性构建, 例如<a href="https://angular.io/" target="_blank" rel="noreferrer">Angular</a>和<a href="https://nestjs.com/" target="_blank" rel="noreferrer">Nestjs</a>。 在这文章中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。</p></blockquote><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p>装饰器本身就是一种特殊的函数，被用于类的各个属性（类本身、类属性、类方法、类访问器、类方法的参数），装饰器就像高阶函数一样，对目标做了一层中间操作，可以很简洁的无痛修改一些功能和做一些有趣的功能</p><p>一个小例子：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 日志打印</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> logger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">call: </span><span style="color:#BABED8;">\\t\\t</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> HTTP</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">logger</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">get</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  static</span><span style="color:#F07178;"> get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">url</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">HTTP</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">  // 打印 call: get</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="装饰器类别" tabindex="-1">装饰器类别 <a class="header-anchor" href="#装饰器类别" aria-label="Permalink to &quot;装饰器类别&quot;">​</a></h2><p>前面说了装饰器主要是用于类中，所以就有类、类方法、类属性、类访问器属性、类方法参数装饰器，接下来我们就一个个介绍</p><p>在介绍装饰器前，先介绍个工具库，在装饰器中反射往往发挥着很大作用，<code>reflect-metadata</code>库通常在装饰器中都会使用，接下来介绍下其基本作用</p><h2 id="reflect-metadata-元数据" tabindex="-1">Reflect-metadata(元数据) <a class="header-anchor" href="#reflect-metadata-元数据" aria-label="Permalink to &quot;Reflect-metadata(元数据)&quot;">​</a></h2><p>严格地说，元数据和装饰器是EcmaScript中两个独立的部分。 然而，如果你想实现像是<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)" target="_blank" rel="noreferrer">反射</a>这样的能力，你总是同时需要它们。有了<a href="https://github.com/rbuckton/reflect-metadata" target="_blank" rel="noreferrer">reflect-metadata</a>的帮助， 我们可以获取编译期的类型。<br> 借助<code>reflect-metadata</code>，编译器可以拿到的类型有三种：</p><ul><li><code>design:type</code>：属性类型</li><li><code>design:paramtypes</code>：方法的参数类型</li><li><code>design:returntypes</code>：方法返回值的类型</li></ul><p>这三种方式拿到的结果都是构造函数（例如String和Number）。规则是：</p><ul><li>number -&gt; Number</li><li>string -&gt; String</li><li>boolean -&gt; Boolean</li><li>void/null/never -&gt; undefined</li><li>Array/Tuple -&gt; Array</li><li>Class -&gt; Construtor</li><li>Enum -&gt; 如果是纯数字枚举为Number，否则为Object</li><li>Function -&gt; function</li><li>其余都是Object</li></ul><h2 id="类装饰器" tabindex="-1">类装饰器 <a class="header-anchor" href="#类装饰器" aria-label="Permalink to &quot;类装饰器&quot;">​</a></h2><p>类型：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ClassDecorator</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">Func</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Func</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> Func</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数:</p><ul><li>@target：类的构造器</li><li>@return：如果有值将会替代原有的类构造器的声明；或不返回值也可以修改原有的类</li></ul><p>用途：</p><p>类装饰器可以继承现有类添加或修改一些属性或方法</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 扩展一个toString方法</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Consturctor</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Consturctor</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> class</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> target</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#F07178;"> toString</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#BABED8;">toString</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Car</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">public</span><span style="color:#BABED8;font-style:italic;"> prize</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> public</span><span style="color:#BABED8;font-style:italic;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ts不会智能的推导出toString方法</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Car</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1000</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">BMW</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // {&quot;prize&quot;:1000,&quot;name&quot;:&quot;BMW&quot;}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="属性装饰器" tabindex="-1">属性装饰器 <a class="header-anchor" href="#属性装饰器" aria-label="Permalink to &quot;属性装饰器&quot;">​</a></h2><p>类型：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> PropertyDecorator</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> prop</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li>@target：对于实例属性成员是类的原型链，对于静态属性是类的构造器</li><li>@prop：当前属性名称</li><li>@return：返回的值将被忽略</li></ul><p>用途：</p><p>属性装饰器可以收集信息，反射赋值，给类添加方法等等，下面介绍一个完整的例子</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">reflect-metadata</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 这里需要借助一个反射库</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Constructor</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> new</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用来管理所有可注入的service</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> services</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Constructor</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Constructor</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注入装饰器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Inject</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Constructor</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  services</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 获取注入的service装饰器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> Service</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> service</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> services</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMetadata</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">design:type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  service</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> service</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 常量装饰器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> constant</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#F07178;">      set</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用户相关Service</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 让当前service变成可注入</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#BABED8;">Inject</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> UserService</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 模拟获取用户信息</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> getUser</span><span style="color:#89DDFF;">(...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用户页面</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> UserPage</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">Service  </span><span style="color:#676E95;font-style:italic;">// 注入UserService</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> service</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> UserService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 让BASE_URL变成常量</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">constant</span><span style="color:#BABED8;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">env</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">BASE_URL </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">https://www.baidu.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  private</span><span style="color:#F07178;"> _BASE_URL</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> getUser</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">service</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">service</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">getUser</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> BASE_URL</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_BASE_URL</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  render</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={this.</span><span style="color:#BABED8;">getUser</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">获取用户信息</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><p>上面点击获取用户信息按钮就会去请求用户的信息，打印结果如下</p><p><img src="https://s3.bmp.ovh/imgs/2022/06/30/a4db1835bc490571.png" alt="https://s3.bmp.ovh/imgs/2022/06/30/a4db1835bc490571.png"></p><h2 id="方法装饰器" tabindex="-1">方法装饰器 <a class="header-anchor" href="#方法装饰器" aria-label="Permalink to &quot;方法装饰器&quot;">​</a></h2><p>类型：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Type </span><span style="color:#82AAFF;">MethodDecorator</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;"> </span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">prop</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> descriptor</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> PropertyDescriptor</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> PropertyDescriptor </span><span style="color:#89DDFF;">|</span><span style="color:#89DDFF;">  void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>参数：</p><ul><li>@target：对于静态成员是类构造器，对实例成员是原型链</li><li>@prop：属性名称</li><li>@descriptor：属性描述器</li><li>@return：属性描述器或不返回</li></ul><p>用途：</p><p>方法装饰器可以高阶目标方法，做一些参数转换，数据收集等等，如日志收集</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 接着上面的介绍，做一个日志收集logger</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 日志收集</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> logger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> descriptor</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> PropertyDescriptor</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> origin</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> async</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> +new</span><span style="color:#82AAFF;"> Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> rs</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#BABED8;"> origin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> end</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> +new</span><span style="color:#82AAFF;"> Date</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 打印请求耗时</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">@logger: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> api request spend</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> \`\${</span><span style="color:#BABED8;">end </span><span style="color:#89DDFF;">-</span><span style="color:#BABED8;"> start</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">ms.</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 这里可以做一些相关收集...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> rs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">err</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#BABED8;">Inject</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> UserService</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">logger</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 登录Request</span></span>
<span class="line"><span style="color:#C792EA;">  async</span><span style="color:#F07178;"> postLogin</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">username</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> time</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> rs</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#89DDFF;"> new</span><span style="color:#FFCB6B;"> Promise</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> reject</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">floor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">random</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 26</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">%</span><span style="color:#F78C6C;"> 10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">          resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">username</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;"> logined success...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">          reject</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span><span style="color:#BABED8;"> time</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> rs</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用户页面</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> UserPage</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">Service  </span><span style="color:#676E95;font-style:italic;">// 注入UserService</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> service</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> UserService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> async</span><span style="color:#F07178;"> toLogin</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">username</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">service</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">postLogin</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">username</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  render</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">toLogin</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Mr Ming</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">登录</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><p>上面点击登录后会记录请求耗时，控制台打印的结果如下：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tgd7rxirj30r60a640p.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tgd7rxirj30r60a640p.jpg"></p><h2 id="访问器装饰器" tabindex="-1">访问器装饰器 <a class="header-anchor" href="#访问器装饰器" aria-label="Permalink to &quot;访问器装饰器&quot;">​</a></h2><ul><li>访问器装饰器和方法装饰器差不多，唯一不同的就是key不同</li><li>方法装饰器：value、wriable、enumerable、configurable</li><li>访问器装饰器：get、set、enumerate、configurable</li></ul><p>用途：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 不变装饰器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> immutable</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  propertyKey</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  descriptor</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> PropertyDescriptor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 私有属性装饰器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> toPrivate</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> _val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> undefined;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> _val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      _val</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 用户页面</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> UserPage</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> React</span><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">Component</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">Service  </span><span style="color:#676E95;font-style:italic;">// 注入UserService</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> service</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> UserService</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">toPrivate</span></span>
<span class="line"><span style="color:#C792EA;">  private</span><span style="color:#F07178;"> _PORT</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 3306</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  get</span><span style="color:#F07178;"> PORT</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_PORT</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">immutable</span></span>
<span class="line"><span style="color:#C792EA;">  set</span><span style="color:#F07178;"> PORT</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">port</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">_PORT</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> port</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  render</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">PORT </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 2</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}&gt;</span><span style="color:#BABED8;">改变PORT</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p>现在给PORT赋值，将不会改变_PORT的值，如下图：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ti440ni7j312w0sgqbp.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ti440ni7j312w0sgqbp.jpg"></p><h2 id="参数装饰器" tabindex="-1">参数装饰器 <a class="header-anchor" href="#参数装饰器" aria-label="Permalink to &quot;参数装饰器&quot;">​</a></h2><p>类型：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ParamerDecorator</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> prop</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> paramIdx</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>参数：</p><ul><li>@target：对于实例属性是类的原型链，对于静态属性是类的构造器</li><li>prop：属性名</li><li>paramIdx：参数位置</li></ul><p>用途：</p><p>参数装饰器单独使用很有限，一般结合其他装饰器一起使用；下面介绍一个验证器案例，用户可以自定义验证器也可以使用原始类型来验证参数是否正确：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 参数装饰器</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> ParamerDecorator</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> (</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  prop</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  paramIdx</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 自定义验证器</span></span>
<span class="line"><span style="color:#C792EA;">type</span><span style="color:#FFCB6B;"> Validater</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> validatorStorage</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Validater</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> typeDecoratorFactory </span><span style="color:#89DDFF;">=</span></span>
<span class="line"><span style="color:#89DDFF;">  (</span><span style="color:#BABED8;font-style:italic;">validator</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Validater</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> ParamerDecorator</span><span style="color:#C792EA;"> =&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  (</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> prop</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> idx</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> targetValidators</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> validatorStorage</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">??</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    targetValidators</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">idx</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> validator</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    validatorStorage</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> targetValidators</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> isString </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> typeDecoratorFactory</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">str</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 源验证器或自定义参数验证器</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> validator</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  prop</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  descriptor</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> PropertyDescriptor</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 反射获取参数源类型</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> typeMetaDatas</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getMetadata</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    &#39;</span><span style="color:#C3E88D;">design:paramtypes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    prop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> origin</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  descriptor</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#F07178;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 取到自定义验证器</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> validators</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> validatorStorage</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">prop</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 验证参数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">args</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">arg</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> idx</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 自定义验证器</span></span>
<span class="line"><span style="color:#C792EA;">        const</span><span style="color:#BABED8;"> validate</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> validators</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">idx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 源类型验证器</span></span>
<span class="line"><span style="color:#C792EA;">        const</span><span style="color:#BABED8;"> metaValidate</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> typeMetaDatas</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">idx</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">        const</span><span style="color:#BABED8;"> errorMsg</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">Failed for parameter: </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">prop</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> at method of </span><span style="color:#89DDFF;">\${</span></span>
<span class="line"><span style="color:#BABED8;">          JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#BABED8;">(target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">constructor</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">match</span><span style="color:#BABED8;">(</span></span>
<span class="line"><span style="color:#89DDFF;">            /</span><span style="color:#C3E88D;">function </span><span style="color:#89DDFF;">(</span><span style="color:#C3E88D;">\\w</span><span style="color:#89DDFF;">+)/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          )</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#C3E88D;">, expect 【</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">metaValidate</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">toLowerCase</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">】but 【</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">】</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">validate</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#82AAFF;">validate</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arg</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TypeError</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">errorMsg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 没有自定义验证器执行默认验证器</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">validate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">metaValidate</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> arg</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">constructor</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">            throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> TypeError</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">errorMsg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">          }</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行源函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> origin</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#89DDFF;"> ...</span><span style="color:#BABED8;">args</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> LoginPage</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略前面代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#BABED8;">validator</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> async</span><span style="color:#F07178;"> toLogin</span><span style="color:#89DDFF;">(@</span><span style="color:#BABED8;">isString </span><span style="color:#BABED8;font-style:italic;">username</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;"> // 期望username为string</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;font-style:italic;"> await</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">service</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">postLogin</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">username</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  render</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &lt;&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">      &lt;</span><span style="color:#F07178;">button</span><span style="color:#C792EA;"> onClick</span><span style="color:#89DDFF;">={()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">toLogin</span><span style="color:#BABED8;">(xxx)}</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">登录</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#BABED8;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">    &lt;/&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br></div></div><p>现在当点击登录时，调用toLogin方法，就会验证username的参数是否合法（当然前提是参数不能为空的，ts也是无法知道参数是否必填，只是来验证参数的类型罢了），打印如下：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tt2o96xrj315k11ob29.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tt2o96xrj315k11ob29.jpg"></p><p>当将isString代码改为 typeDecoratorFactory((<em>str</em>: object) =&gt; str?.name === ‘Mr Ming’);</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ttid8rcnj31360e4alm.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ttid8rcnj31360e4alm.jpg"></p><p>当删除自定义验证器，再次执行会验证默认的类型验证器：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ttkha08bj31460lqh5j.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3ttkha08bj31460lqh5j.jpg"></p><h2 id="执行顺序" tabindex="-1">执行顺序 <a class="header-anchor" href="#执行顺序" aria-label="Permalink to &quot;执行顺序&quot;">​</a></h2><p>上面我们针对每个类型的装饰器分别做了介绍并作了相关的例子实验，现在我们可以同时使用不同的装饰器，测试一下不同类型装饰器的执行顺序是如何的：</p><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 记录</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> trace</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">evaluate: </span><span style="color:#BABED8;">\\t</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">call: </span><span style="color:#BABED8;">\\t\\t</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 类装饰器</span></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Class Decorator</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> People</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  protected</span><span style="color:#F07178;"> _name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Static Property _instance</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> static</span><span style="color:#F07178;"> _instance</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> People</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Instance Property grade</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> grade</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(@</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Constructor Parameter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">_name</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">grade</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">属性访问器</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> get</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_name</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Instance Method</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#F07178;">  add</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Instance Method Param x</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">x</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Instance Method Param y</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">y</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  ):</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> x</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> y</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Instance Property age</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> age</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Static Method getInstance</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> static</span><span style="color:#F07178;"> getInstance</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    @</span><span style="color:#82AAFF;">trace</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Static Method Param name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  ):</span><span style="color:#FFCB6B;"> People</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">_instance</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">_instance</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> People</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_instance</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>上面的打印结果如下：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tubgm2udj31680ymx4h.jpg" alt="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h3tubgm2udj31680ymx4h.jpg"></p><p>从上面的结果可以得出结论： <strong>装饰器访问顺序</strong></p><ol><li>实例属性：按定义从上往下 =&gt; 属性/方法(参数 -&gt; 方法名)/属性访问器</li><li>静态属性：按定义从上往下 =&gt; 属性/方法(参数 -&gt; 方法名)</li><li>构造器参数</li><li>类装饰器</li></ol><p>当改变实例或者静态属性的定义顺序，响应的执行顺序也会按着从上往下定义的顺序执行，有兴趣的小伙伴可以动手试试</p><p>至此，有关typescript的装饰器的基本使用就介绍完了，相信看到这里的小伙伴也会对其有相关的了解，希望读完后自己动手实践</p><h2 id="实践" tabindex="-1">实践 <a class="header-anchor" href="#实践" aria-label="Permalink to &quot;实践&quot;">​</a></h2><div class="language-tsx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 待补充</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,73);function F(y,D,i,b,B,u){const a=n("Reward"),l=n("Gitalk");return r(),o("div",null,[c,s(a),s(l)])}const E=p(t,[["render",F]]);export{A as __pageData,E as default};
