import{_ as n,c as e,o as a,V as s}from"./chunks/framework.SV1ROkXV.js";const f=JSON.parse('{"title":"编辑器相关","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/editor/index.md","filePath":"frontend/editor/index.md","lastUpdated":1709440279000}'),l={name:"frontend/editor/index.md"},i=s(`<h1 id="编辑器相关" tabindex="-1">编辑器相关 <a class="header-anchor" href="#编辑器相关" aria-label="Permalink to &quot;编辑器相关&quot;">​</a></h1><ul><li><p>DocumentORShadow.activeElement: 获取聚焦元素focus/active</p></li><li><p>Selection对象（window.getSelection / document.setSelection）: 用户选择的文本范围或光标的当前位置，<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Selection" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Selection</a></p></li><li><p>Range（接口表示一个包含节点与文本节点的一部分的文档片段）：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Range" target="_blank" rel="noreferrer">https://developer.mozilla.org/zh-CN/docs/Web/API/Range</a></p><ul><li>属性： <ul><li>collapsed</li><li>commonAncestorContainer</li><li>startContainer</li><li>endContainer</li><li>startOffset</li><li>endOffset</li></ul></li><li>方法： <ul><li>collapse</li><li>compareBoundaryPoints(how, sourceRange)边界比较</li><li>comparePoint(referenceNode, offset)返回 -1、0 或 1，分别表示端点在 Range 之前、内部还是之后</li><li>cloneContents：返回range中所有节点文档片段</li><li>cloneRange()</li><li>deleteContents()</li><li>getBoundingClientRect(): 返回范围内容的DOMRect</li><li>getClientRects</li><li>getIsPointInRange(node, offset): 判断某个节点在range里</li><li>insertNode(node): 在range开头插入节点</li><li>intersectsNode(node): 判断节点是否相交</li><li>selectNode(node): 选中节点，并将range起始节点的父节点和node的父节点相同</li><li>selectNodeContents(node): 设置包含节点内容</li><li>setEnd(node, offset): 设置range终点</li><li>setStart(node, offset): 设置起点</li><li>setEndAfter(refenceNode)</li><li>setEndBefore</li></ul></li></ul></li><li><p>粘贴对象（clipboardData）: ClipboardEvent.clipboardData <a href="https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Web/API/ClipboardEvent/clipboardData</a></p></li><li><p>零宽字符</p></li></ul><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span>零宽空格（zero-width space, ZWSP）用于可能需要换行处。</span></span>
<span class="line"><span>    Unicode: U+200B  HTML: &amp;#8203;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>零宽不连字 (zero-width non-joiner，ZWNJ)放在电子文本的两个字符之间，抑制本来会发生的连字，而是以这两个字符原本的字形来绘制。</span></span>
<span class="line"><span>    Unicode: U+200C  HTML: &amp;#8204;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>零宽连字（zero-width joiner，ZWJ）是一个控制字符，放在某些需要复杂排版语言（如阿拉伯语、印地语）的两个字符之间，使得这两个本不会发生连字的字符产生了连字效果。</span></span>
<span class="line"><span>    Unicode: U+200D  HTML: &amp;#8205;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>左至右符号（Left-to-right mark，LRM）是一种控制字符，用于计算机的双向文稿排版中。</span></span>
<span class="line"><span>    Unicode: U+200E  HTML: &amp;lrm; &amp;#x200E; 或&amp;#8206;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>右至左符号（Right-to-left mark，RLM）是一种控制字符，用于计算机的双向文稿排版中。</span></span>
<span class="line"><span>    Unicode: U+200F  HTML: &amp;rlm; &amp;#x200F; 或&amp;#8207;</span></span>
<span class="line"><span>    </span></span>
<span class="line"><span>字节顺序标记（byte-order mark，BOM）常被用来当做标示文件是以UTF-8、UTF-16或UTF-32编码的标记。</span></span>
<span class="line"><span>    Unicode: U+FEFF</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,3),p=[i];function r(t,o,c,d,m,b){return a(),e("div",null,p)}const h=n(l,[["render",r]]);export{f as __pageData,h as default};
