import{_ as l,c as o,J as e,V as n,o as t,G as a}from"./chunks/framework.SV1ROkXV.js";const b=JSON.parse('{"title":"关于DOMParser、XMLSerializer、createTreeWalker使用","description":"如何使用DOMParser、XMLSerializer、createTreeWalker,使用的场景有哪些","frontmatter":{"title":"关于DOMParser、XMLSerializer、createTreeWalker使用","description":"如何使用DOMParser、XMLSerializer、createTreeWalker,使用的场景有哪些","keywords":"DOMParser,XMLSerializer,createTreeWalker,解析dom字符串,dom解析"},"headers":[],"relativePath":"article/2020/domparser-xml.md","filePath":"article/2020/domparser-xml.md","lastUpdated":1709440279000}'),p={name:"article/2020/domparser-xml.md"},i=n(`<h1 id="关于domparser、xmlserializer、createtreewalker使用" tabindex="-1">关于DOMParser、XMLSerializer、createTreeWalker使用 <a class="header-anchor" href="#关于domparser、xmlserializer、createtreewalker使用" aria-label="Permalink to &quot;关于DOMParser、XMLSerializer、createTreeWalker使用&quot;">​</a></h1><h2 id="domparser" tabindex="-1">DOMParser <a class="header-anchor" href="#domparser" aria-label="Permalink to &quot;DOMParser&quot;">​</a></h2><blockquote><p>DOMParser 可以将存储在字符串中的 XML 或 HTML 源代码解析为一个 DOM Document。</p></blockquote><p>你可以使用XMLSerializer 接口执行相反的操作 - 将DOM树转换为XML或HTML源。</p><p>对于HTML文档，您还可以通过设置 Element.innerHTML 和outerHTML 属性的值，将部分 DOM 替换为从HTML构建的新 DOM 树。还可以读取这些属性以获取对应于相应 DOM 子树的 HTML 片段</p><h3 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> domparser </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> DOMParser</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>domparser</code>是个<code>DOMParser</code>对象 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h10cnj04f0j30q60ee430.jpg" alt="iShot2022-04-06 22.02.43.png"></p><h3 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h3><p>domparser对象拥有一个<code>parseFromString</code>的方法，使用如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> doc </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> domparser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parseFromString</span><span style="color:#BABED8;">(string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> mimeType)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>返回值基于 mimeType 参数，返回 Document 或 XMLDocument 或其他文档类型。</p><p><code>parseFromString</code>的参数解释：</p><ul><li>string：要解析的 DOMString。它必须包含 HTML、xml、xhtml+xml 或 svg 文档。</li><li>mimeType：表示解析的文档类型，支持下表这些参数值 |mimeType|返回文档类型| |--|--| |text/html|Document| |text/xml|XMLDocument| |application/xml|XMLDocument| |application/xhtml+xml|XMLDocument| |image/xvg+xml|XMLDocument|</li></ul><p>其中<code>Document</code>文档类型是会自动包含<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>标签的，而<code>XMLDocument</code>文档类型则不会主动添加<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>等标签</p><p>例子： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h10czrtn93j30qc0gojwk.jpg" alt="iShot2022-04-06 22.14.17.png"></p><h3 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><p>当<code>DOMParser</code>对象按指定的<code>mimeType</code>解析错误时，不会抛出任何异常，而是会返回一个给定的错误文档：</p><div class="language-xml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">parsererror</span><span style="color:#C792EA;"> xmlns</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://www.mozilla.org/newlayout/xml/parsererror.xml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">(error description)</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">sourcetext</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">(a snippet of the source XML)</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">sourcetext</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">parsererror</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h10d2mpudtj30qa0m012n.jpg" alt="iShot2022-04-06 22.17.12.png"></p><h2 id="xmlserializer" tabindex="-1">XMLSerializer <a class="header-anchor" href="#xmlserializer" aria-label="Permalink to &quot;XMLSerializer&quot;">​</a></h2><blockquote><p>XMLSerializer接口提供serializeToString() (en-US) 方法来构建一个代表 DOM 树的XML字符串。</p></blockquote><h3 id="语法-1" tabindex="-1">语法 <a class="header-anchor" href="#语法-1" aria-label="Permalink to &quot;语法&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> s </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> XMLSerializer</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>s</code>是个<code>XMLSerializer</code>对象 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h10d59333xj30q80csdk4.jpg" alt="iShot2022-04-06 22.19.45.png"></p><h3 id="方法-1" tabindex="-1">方法 <a class="header-anchor" href="#方法-1" aria-label="Permalink to &quot;方法&quot;">​</a></h3><p>XMLSerializer对象拥有一个<code>serializeToString</code>的方法，使用如下：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> str </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> s</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">serializeToString</span><span style="color:#BABED8;">(document)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>返回值是DOMString类型</p><p><code>serializeToString</code>的参数解释：</p><ul><li>document: 是一个dom节点</li></ul><p>例子： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/005HV6Avgy1h10db4mkdpj314w0qmqmt.jpg" alt="iShot2022-04-06 22.25.22.png"></p><h3 id="和outerhtml区别" tabindex="-1">和outerHTML区别 <a class="header-anchor" href="#和outerhtml区别" aria-label="Permalink to &quot;和outerHTML区别&quot;">​</a></h3><p><code>serializeToString</code>方法和<code>outerHTML</code>有些类似，但还是有所区别，主要有有下面两个：</p><ol><li>outerHTML只能作用在Element元素上，但是不能是其他节点类型，例如文本节点，注释节点之类。但是serializeToString()方法适用于任意节点类型。包括： |节点类型|释义| |--|--| |DocumentType|文档类型| |Document|文档| |DocumentFragment|文档片段| |Element|元素| |Comment|注释节点| |Text|文本节点| |ProcessingInstruction|处理指令| |Attr|属性节点|</li><li><code>serializeToString</code>方法会给根元素自动增加xmlns命名空间，如上图</li></ol>`,35);function c(d,m,u,h,D,y){const s=a("Reward"),r=a("Gitalk");return t(),o("div",null,[i,e(s),e(r)])}const F=l(p,[["render",c]]);export{b as __pageData,F as default};
