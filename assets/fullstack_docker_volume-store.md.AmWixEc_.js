import{_ as l,c as o,J as s,V as p,o as r,G as a}from"./chunks/framework.SV1ROkXV.js";const v=JSON.parse('{"title":"Docker数据卷与持久化","description":"docker数据卷挂载使用与数据持久化原理","frontmatter":{"title":"Docker数据卷与持久化","description":"docker数据卷挂载使用与数据持久化原理","keywords":"docker数据卷,docker volume,docker持久化","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-docker.png"},"headers":[],"relativePath":"fullstack/docker/volume-store.md","filePath":"fullstack/docker/volume-store.md","lastUpdated":1709440279000}'),c={name:"fullstack/docker/volume-store.md"},t=p(`<h1 id="docker数据卷与持久化" tabindex="-1">Docker数据卷与持久化 <a class="header-anchor" href="#docker数据卷与持久化" aria-label="Permalink to &quot;Docker数据卷与持久化&quot;">​</a></h1><p>本篇来讲docker数据卷(volume)的使用，那为什么要使用数据卷呢？通过前面文章的学习，大家都了解了如何去运行一个容器。假如你在本地测试运行一个<code>mysql</code>的容器，为你的本地应用程序做持久化服务，但当你删除这个容器后重新启动一模一样的容器，再次查看会发现数据都不见了，当然了你可能不会自己删除，但如果是团队使用呢，那就会有数据丢失的风险。因此docker中引入了数据卷的概念，用来做数据持久化的。</p><h2 id="概念与作用" tabindex="-1">概念与作用 <a class="header-anchor" href="#概念与作用" aria-label="Permalink to &quot;概念与作用&quot;">​</a></h2><p>Docker 数据卷是 Docker 容器持久化存储的重要组成部分。它允许用户将容器中的数据与容器实例分离，使数据持久化，方便数据的管理和迁移。Docker 数据卷（Docker Volumes）是一种特殊的目录，可以在容器之间共享和重用。数据卷可以在容器之间传递数据，而不需要使用联合文件系统。数据卷在 Docker 主机上独立于容器生命周期而存在，即使容器被删除，数据卷也不会受到影响。这使得数据卷成为容器中数据持久化的理想选择。</p><p>使用Docker 数据卷相比使用容器储存来讲的好处有：</p><ul><li>持久化存储数据：Docker 容器中的数据是存储在容器存储层中的，容器被删除或重建时数据也会被删除。使用数据卷可以将数据存储在宿主机上，即使容器被删除或重建，数据仍然可以保留。</li><li>方便数据共享：多个容器可以通过挂载同一个数据卷来共享数据，方便了数据的共享和备份。</li><li>更好的移植性：使用数据卷可以将容器与数据分离，使得容器更易于移植和部署。</li><li>更好的性能：使用数据卷可以将容器中的数据存储在宿主机上，可以减少容器存储层的使用，提高容器的性能。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>容器使用卷的本质其实就是文件或路径的挂载，类似与linux或<a href="https://zh.wikipedia.org/zh-cn/%E5%88%86%E6%95%A3%E5%BC%8F%E6%AA%94%E6%A1%88%E7%B3%BB%E7%B5%B1" target="_blank" rel="noreferrer">dfs</a>这种文件系统的挂载。</p></div><h2 id="卷的类型" tabindex="-1">卷的类型 <a class="header-anchor" href="#卷的类型" aria-label="Permalink to &quot;卷的类型&quot;">​</a></h2><p>Docker 数据卷（volume）可以分为三种类型：主机挂载（host-mounted）、命名卷（named volume）和临时卷（tmpfs volume）。</p><ol><li><p>主机挂载 主机挂载是最基本的数据卷类型，它将宿主机上的目录或文件夹直接挂载到容器中。主机挂载的优点是简单易用，但缺点是不够灵活，容器与宿主机的路径绑定较为紧密。</p></li><li><p>命名卷 命名卷是 Docker 引擎管理的卷，可以在多个容器之间共享和重用。命名卷的优点是灵活性大，容器与宿主机的路径解耦，可以在多个容器之间共享数据卷，但缺点是需要手动创建和管理。</p></li><li><p>临时卷 临时卷是一种轻量级的数据卷类型，仅存在于容器的生命周期中。临时卷的优点是方便快捷，不需要手动创建和管理，但缺点是数据不会持久化，容器停止后数据会丢失。</p></li></ol><h2 id="卷的使用" tabindex="-1">卷的使用 <a class="header-anchor" href="#卷的使用" aria-label="Permalink to &quot;卷的使用&quot;">​</a></h2><p>docker卷也是其一种对象资源，和其他如镜像、容器资源类似都有创建、查看、删除等相关的命令</p><h3 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-label="Permalink to &quot;创建&quot;">​</a></h3><p>卷的创建指的是命名卷的创建，<code>docker volume create</code> 是 Docker 命令行工具提供的创建数据卷的命令。它用于创建一个新的 Docker 数据卷（Docker volume），以便将宿主机上的目录或文件夹挂载到 Docker 容器中。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> volume create name</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><blockquote><p>使用docker创建的volume，其文件路径会被存放到<code>/var/lib/docker/volumes</code>文件路径下</p></blockquote><h3 id="查看" tabindex="-1">查看 <a class="header-anchor" href="#查看" aria-label="Permalink to &quot;查看&quot;">​</a></h3><p>查看已经创建的数据卷，这里只能查看使用docker创建管理的卷，如果直接使用宿主机的文件或路径，没有经过docker管理，就不会包含在卷的列表中</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> volume ls</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker volume ls</span></span>
<span class="line"><span style="color:#FFCB6B;">DRIVER</span><span style="color:#C3E88D;">    VOLUME NAME</span></span>
<span class="line"><span style="color:#C792EA;">local</span><span style="color:#F78C6C;">     1</span><span style="color:#C3E88D;">e1b4617ad8377a9b60029362215f35cc298c2d8d1c7fa5d1691d164795872c9</span></span>
<span class="line"><span style="color:#C792EA;">local</span><span style="color:#F78C6C;">     5</span><span style="color:#C3E88D;">cda6686c50d24138ea5285d035afb639e275b6cac3f0671dd8b3cf895eb3c3a</span></span>
<span class="line"><span style="color:#C792EA;">local</span><span style="color:#F78C6C;">     5</span><span style="color:#C3E88D;">e58646a0a1d133084a671b03b4878b730cba730818e062edbecc539a6e6a80a</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><p>删除卷会删除宿主机<code>/var/lib/docker/volumes</code>路径下指定的文件夹</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> volume rm name</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除名为 demo 卷</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> volume rm demo</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="挂载" tabindex="-1">挂载 <a class="header-anchor" href="#挂载" aria-label="Permalink to &quot;挂载&quot;">​</a></h3><p>在运行 Docker 容器时使用 <code>-v</code> 或 <code>--mount</code> 参数来指定数据卷的挂载方式</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 使用数据卷</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run -v someVolume:/path/on/container</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用宿主机路径</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run -v /path/on/host:/path/on/container myimage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以使用<code>--mount</code>参数时指定数据卷的类型、权限等等</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 使用宿主机路径</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run --mount type=bind,source=/host/somedir,target=/path/on/container</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用命名卷，并添加 rw 读写权限，不写默认是读写</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run --mount type=volume,source=myvolume:rw</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用临时卷</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run --mount type=tmpfs,destination=/path/on/containter:rw</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本篇讲了docker数据卷的使用，它是一种持久化存储数据的机制，可以将容器内的数据持久化到宿主机上，或者在多个容器之间共享数据。使用 Docker 数据卷可以实现高效的数据管理和迁移，同时也可以提高容器的可移植性和灵活性。</p>`,29);function i(d,u,m,b,h,k){const e=a("Reward"),n=a("Gitalk");return r(),o("div",null,[t,s(e),s(n)])}const C=l(c,[["render",i]]);export{v as __pageData,C as default};
