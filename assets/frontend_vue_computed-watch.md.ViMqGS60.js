import{_ as p,c as e,J as s,V as o,o as t,G as n}from"./chunks/framework.SV1ROkXV.js";const A=JSON.parse('{"title":"Vue源码分析之计算属性与侦听函数","description":"Vue应用中除了使用data来实现响应式外，还可以使用computed、watch实现对data的监听并触发对应的回调函数，那它们内部又是怎么实现的呢？接下来一起来探索实现原理吧","frontmatter":{"title":"Vue源码分析之计算属性与侦听函数","description":"Vue应用中除了使用data来实现响应式外，还可以使用computed、watch实现对data的监听并触发对应的回调函数，那它们内部又是怎么实现的呢？接下来一起来探索实现原理吧","keywords":"vue计算属性,vue侦听函数,computed,watch,计算属性原理,computed原理,computed缓存原理,watch原理","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-vue.png"},"headers":[],"relativePath":"frontend/vue/computed-watch.md","filePath":"frontend/vue/computed-watch.md","lastUpdated":1709440279000}'),c={name:"frontend/vue/computed-watch.md"},r=o(`<h1 id="vue源码分析之计算属性与侦听函数" tabindex="-1">Vue源码分析之计算属性与侦听函数 <a class="header-anchor" href="#vue源码分析之计算属性与侦听函数" aria-label="Permalink to &quot;Vue源码分析之计算属性与侦听函数&quot;">​</a></h1><p>上一节我们从头到尾分析了<a href="/frontend/vue/reactivity.html">vue的响应式原理</a>（包括vue3），接下来趁热打铁分析下computed、watch的实现原理。如果你对vue的响应式原理还很模糊，建议先阅读上一篇搞明白响应式原理再来看本篇文章，当然computed、watch是对响应式的扩展，响应式懂了这里才不会迷茫</p><blockquote><p>还是一样如果你对于某些原理不是很明白时，学会自己打断点调试，用最简单的例子多分析几遍有助于理解</p></blockquote><h2 id="计算属性" tabindex="-1">计算属性 <a class="header-anchor" href="#计算属性" aria-label="Permalink to &quot;计算属性&quot;">​</a></h2><p>计算属性顾名思义就是由计算得来的值，在vue中通常用来使用需要通过简单计算后的属性，引用vue官方描述：<em><u>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护</u></em></p><h3 id="简单使用" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用" aria-label="Permalink to &quot;简单使用&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line diff remove"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，今年 </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 岁</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;"> }}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> intro </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  data</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Jack</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  computed</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    intro</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，今年 </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 岁</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面便是一个最简单的计算属性使用例子，通过计算得到的一个值，使用计算属性模板更易维护也方便后续的扩展</p><h3 id="计算属性缓存" tabindex="-1">计算属性缓存 <a class="header-anchor" href="#计算属性缓存" aria-label="Permalink to &quot;计算属性缓存&quot;">​</a></h3><p>应该都听说过计算属性有缓存吧，也就是当计算属性依赖的data值没有发生变化时，是不会重新执行计算属性的函数的，那在页面渲染时也就只会执行一次，我们使用上面的例子简单来验证下：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  &lt;!-- 模板中使用3个计算属性 --&gt;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> intro </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> intro </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#BABED8;"> intro </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#F07178;">  computed</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    intro</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">执行了intro函数</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">// 看这里会打印几次</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，今年 </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 岁</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520110155472.png" alt=""></p><p>从以上结果可以看到<code>intro</code>函数只打印了一次，也就是说在模板渲染中对intro函数的执行只触发了一次，这也就是所谓的<code>计算属性缓存</code>，如果同样的函数定义在方法体中就会执行多遍，严重影响性能</p><p>看上去还挺神奇的，接下来就一探究竟👇</p><h3 id="计算属性本质" tabindex="-1">计算属性本质 <a class="header-anchor" href="#计算属性本质" aria-label="Permalink to &quot;计算属性本质&quot;">​</a></h3><p>我们知道vue中存在3种watcher分别是：<code>render watcher</code>、<code>computed watcher</code>、<code>user watcher</code>，watcher主要用来执行对应的表达式，而watcher又是被dep控制的，dep大家应该都知道在对data进行getter/setter拦截时所附加的一个对象，用来收集相关联的watcher对象，当触发setter时便通知watcher进行更新，watcher也就会执行对应的表达式进行更新，这就是响应式的过程</p><p>那么计算属性其实本质就是一个watcher，由于定义在computed中又被称为<code>计算wathcer</code>。其实通过响应式过程你大概已经知道了计算属性缓存的原因了，大概就是<u>watcher的更新只被dep控制，只要dep所属的属性值没变就不会通知watcher进行更新，所以在模板渲染时并不会触发计算属性的多次执行，因为computed对应的data值没变，这就是原理</u></p><p>vue内部会统一把computed变成对象形式包含get/set两个函数，如上面的写法其实内部会变成：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">intro </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，今年 </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 岁</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  set</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> noop </span><span style="color:#676E95;font-style:italic;">// 空函数</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>通常计算属性的set使用也不多也不推荐使用set，一般一个计算属性一个函数就行了</p><p>下面通过一张图来加强理解计算属性的工作过程： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/vue-computed-202005202342.svg" alt=""></p><p>上图清晰的展示了只有data改变时便会通过dep通知计算watcher进行更新也就会执行计算属性的get函数，模板渲染时并不会触发计算属性的多次执行。上图也反映了一个问题：<u>当data改变时只会通知计算watcher进行更新，而计算watcher并不会通知渲染watcher更新(只有dep会收集watcher，watcher不会收集watcher)，那么渲染watcher又是如何知道需要重新渲染的呢</u>？你是否也有一样的疑问呢❓</p><p>通过这个疑问并根据响应式原理应该能推出dep肯定和渲染watcher也会有关系的，就是这个关系是怎么建立起来的❓从响应式原理中我们知道dep会通过<code>Dep.watcher</code>这个属性值和watcher产生关系也就是依赖收集，而当计算watcher表达式执行时，当前的<code>Dep.watcher</code>也只会是计算watcher的get函数，并不会是渲染watcher，dep也就不会收集到渲染watcher，那么dep到底是如何收集到渲染watcher的，接下来带着这个疑问进一步了解下</p><h3 id="原理实现" tabindex="-1">原理实现 <a class="header-anchor" href="#原理实现" aria-label="Permalink to &quot;原理实现&quot;">​</a></h3><ol><li>组件初始化时对computed属性进行初始化：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/state 58行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> initState</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_watchers</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 初始化computed</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">initComputed</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>遍历computed为每一个属性生成对应的watcher（计算watcher）：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/state 137行</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> initComputed</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> computed</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 组件实例上定义 _computedWatchers 属性用来存放所有的computedwatcher</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> watchers</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_computedWatchers</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">null</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 遍历 computed，生成对应的watcher</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> computed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> computed</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果是function就直接取值，反之对象取 get 属性</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;"> :</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 定义当前 key 的watcher， 也就是计算属性watcher</span></span>
<span class="line"><span style="color:#BABED8;">    watchers</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">      vm</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      getter</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 这里看到 表达式就是 我们定义的函数或者get函数</span></span>
<span class="line"><span style="color:#BABED8;">      noop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      {</span><span style="color:#F07178;"> lazy</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;"> }</span><span style="color:#676E95;font-style:italic;">   // 注意这个选项很重要，用来标识这个是计算属性watcher（记住这个，后面会用到）</span></span>
<span class="line"><span style="color:#F07178;">    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 代理每个computed属性到实例上，这就是为什么 this可以获取到计算属性的原因</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      defineComputed</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> userDef</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ol start="3"><li>来看看计算watcher实例化时会怎么样，初始化时由于opts传入lazy，所以不会立即执行函数：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/watcher</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  lazy</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里的expOrFn就是计算属性的getter</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // cb为空，opts 为 {lazy: true}</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> opts</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">options</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    	// lazy: true</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">lazy</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !!</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">lazy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注意这个 dirty 很重要，来缓存计算属性的值，首先进来为 true</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">lazy</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // getter 变成了 计算属性的get函数</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 由于lazy为true，外面初始化时也就不会执行函数</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">lazy</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> undefined</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><ol start="4"><li>接着第2步骤最后代码，代理computed中的每个key到this实例上，这个步骤很关键也是重点。上一步骤我们知道了computed在初始化watcher时并不会立马执行，那么当组件执行render函数的过程中就会访问computed属性（假设模板中用到了computed属性），这时就会触发下方的getter函数</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> sharedPropertyDefinition </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  set</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> defineComputed</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  userDef</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 值为函数时</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    sharedPropertyDefinition</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> createComputedGetter</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    sharedPropertyDefinition</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;"> // 值为对象时</span></span>
<span class="line"><span style="color:#BABED8;">    sharedPropertyDefinition</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span></span>
<span class="line"><span style="color:#89DDFF;">      ?</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">cache</span><span style="color:#89DDFF;"> !==</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;">        ?</span><span style="color:#82AAFF;"> createComputedGetter</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        :</span><span style="color:#82AAFF;"> createGetterInvoker</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">userDef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      :</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果有set函数，没有设置noop 空函数</span></span>
<span class="line"><span style="color:#BABED8;">    sharedPropertyDefinition</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> userDef</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> noop</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置描述对象，对key进行getter/setter拦截，也就是访问 target[key] 时，就会访问下方的getter函数</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> sharedPropertyDefinition</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// this实例上获取 computed时，就会触发这里的get</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createComputedGetter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">key</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> computedGetter</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_computedWatchers</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_computedWatchers</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">watcher</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dirty</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evaluate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><p>首先通过this拿到当前computed属性的watcher，刚开始<code>dirty</code>的值时true，那么就会执行<code>watcher.evaluate()</code>，内部会执行watcher的get方法，get中又会执行getter方法，从第3步应该知道<code>this.getter</code>就是计算属性的函数。在执行计算属性函数过程中就会对data进行访问触发响应式对象对应的dep的depend对当前watcher进行收集，也就是会收集当前计算属性的watcher，最后计算的值赋值给当前watcher的value，这时<u>将dirty设置为false</u>。然后下一步判断<code>Dep.target</code>为true时执行<code>watcher.depend</code>，当前计算属性函数执行完后就会将Dep.target变成上一个watcher，这里就假设为渲染watcher，那么来看看watcher的depend干了啥</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  lazy</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略部分代码...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 设置Dep.target为当前计算属性的watcher</span></span>
<span class="line"><span style="color:#82AAFF;">    pushTarget</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行计算属性 函数，此过程会访问响应式对应，就会触发get进行dep进行depend当前watcher（依赖收集）</span></span>
<span class="line"><span style="color:#BABED8;">    value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">    popTarget</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 出栈</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // dirty为true时执行</span></span>
<span class="line"><span style="color:#F07178;">  evaluate</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p><u>depend中会遍历所有的deps（也就是收集了当前计算watcher的所有dep，也就是某些对象等key的dep），执行每个dep的depend方法，主动让这些响应式对象对当前的<code>Dep.target</code>进行收集，上面我们说了当前的target为渲染watcher，也就是这个操作会让响应式对象和渲染watcher产生关系。</u></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  lazy</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 遍历所有收集了当前计算watcher的dep，执行dep的depend方法主动进行依赖收集</span></span>
<span class="line"><span style="color:#F07178;">  depend</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">deps</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>再来想想如果render函数中有很多地方用到了同一个计算属性，那么就会再次访问当前实例的计算属性getter，首先还是获取到当前计算属性的watcher，<u>这时dirty值为false，所以就不会再执行<code>watcher.evaluate</code>也就不会再执行计算属性的函数了，直接返回上一次计算后的结果<code>watcher.value</code>，这也就是为什么计算属性会缓存的真实面目</u></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 省略部分代码...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// dirtry为false时，不会执行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dirty) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">evaluate</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ol start="5"><li>当对应的响应式对象更新时就会触发计算属性的watcher更新，执行update函数，这里lazy为true顾将dirty设置为true，然后啥都不用做。接着dep会通知渲染watcher进行更新（上面讲了dep会收集渲染watcher），这样就会重新执行render函数，再次会访问计算属性的getter，那么就和第一次页面渲染访问计算属性一样的逻辑，执行计算属性的函数得到最新的值，这里就不再重复了</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  dirty</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略部分代码...</span></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">lazy</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>到这里计算属性的原理就讲的差不多了，其实很简单。计算属性的执行的重新执行是由对应的data属性的dep控制的，并且dep也会收集渲染watcher。只有data的值改变时计算属性才会执行，否则都会使用上次的值，这样的逻辑也合情合理</p><div class="tip custom-block"><p class="custom-block-title">小提示</p><p>computed可以通过<code>cache:false</code>来取消缓存，通过它可以设置成不同的getter，这样在每次访问计算属性时都会执行它的函数，当然一般也用不到这个选项，官方文档也没有给出这个选项，这里可以从源码中定义初始化计算属性的getter时会进行判断，感兴趣的可以看看</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">computed</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#FFCB6B;">  intro</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    get</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">执行了intro函数</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，今年 </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 岁</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#FFCB6B;">    cache</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这样在每次访问intro都会执行，那么就会打印多次</p><h3 id="代码调试" tabindex="-1">代码调试 <a class="header-anchor" href="#代码调试" aria-label="Permalink to &quot;代码调试&quot;">​</a></h3><p>这里我们简单调试下上面的代码，来证明下以上的想法，首先是data的dep会收集渲染watcher，另一个就是多次使用同一个计算属性不会再执行</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520170823927.png" alt=""></p><div class="img-title">render函数第一次访问计算属性</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520170902170.png" alt=""></p><div class="img-title">第一次会执行evaluate函数</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520171336826.png" alt=""></p><div class="img-title">执行计算属性函数触发依赖收集</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520171502357.png" alt=""></p><div class="img-title">计算属性中的响应式对象收集渲染函数</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520171729187.png" alt=""></p><div class="img-title">render函数后面访问计算属性不再执行</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520172147154.png" alt=""></p><div class="img-title">响应式对象确实收集了计算watcher和渲染watcher</div><h3 id="vue3的computed" tabindex="-1">Vue3的computed <a class="header-anchor" href="#vue3的computed" aria-label="Permalink to &quot;Vue3的computed&quot;">​</a></h3><p>Vue3中的computed其实可vue2差不多，唯一一处不一样的就是响应式对象不会直接收集render函数，他只会收集对应的computed函数，而computed函数会收集render函数，因此当响应式对象的值发生变化时更新遵循以下规则：<code>data =&gt; computed =&gt; render</code>，其实这样设计能更好的反映出每个对象的真正effect</p><p>以下是一个最简单的vue的computed使用例子：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">number</span><span style="color:#89DDFF;">++</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">改变number</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  {{</span><span style="color:#BABED8;"> total </span><span style="color:#89DDFF;">}}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> ref</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> computed</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> from</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  setup</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> number</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> total</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> computed</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> number</span><span style="color:#89DDFF;"> %</span><span style="color:#F78C6C;"> 5</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> total</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这个例子定义了一个<code>number</code>响应式对象，然后定义了一个计算属性total，它是通过number的值并进行计算得到的。因此在页面render时会访问total，total会收集当前的<code>activeEffect</code>也就是render函数，然后computed初次执行会访问number属性，触发number的get这样number就会收集当前的<code>activeEffect</code>也就是total中的函数。这样当在页面中点击按钮改变number的值时，number首先会通知computed重新计算，computed在通知render函数重新渲染</p><p>当然computed也是有缓存的功能，也是通过<code>dirty</code>来控制的，只要对应的响应式对象的值不变，dirty就为false不会执行，直接返回上次的值（首次dirty为true）；接下来简单分析下整个流程👇：</p><ol><li>computed的内部实现过程，首先但我们用<code>computed(() =&gt; number.value % 5)</code>这样的代码时先执行computed函数，内部会对传入的参数做统一处理，你可以传函数也可以传对象（<code>{get(),set()}</code>），最后实例化<code>ComputedRefImpl</code>并返回。ComputedRefImpl实例化首先会创建<code>ReactiveEffect</code>，并标识当前computed属性，来表示是计算属性</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/computed 112行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> computed</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  getterOrOptions</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> WritableComputedOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  debugOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> DebuggerOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  isSSR</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> setter</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ComputedSetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> onlyGetter</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> isFunction</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getterOrOptions</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 函数形式</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">onlyGetter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getterOrOptions</span></span>
<span class="line"><span style="color:#BABED8;">    setter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> NOOP</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 对象形式和vue2一样</span></span>
<span class="line"><span style="color:#BABED8;">    getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getterOrOptions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span></span>
<span class="line"><span style="color:#BABED8;">    setter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getterOrOptions</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">set</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> cRef</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ComputedRefImpl</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> setter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> onlyGetter</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">setter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> isSSR</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 返回当前 ComputedRefImpl 实例</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> cRef</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> any</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// computed真正的对象，computed.value 就是这个类中的属性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ComputedRefImpl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> dep</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  private</span><span style="color:#F07178;"> _value</span><span style="color:#89DDFF;">!:</span><span style="color:#FFCB6B;"> T</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> readonly</span><span style="color:#F07178;"> effect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> _dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> _cacheable</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> _setter</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 创建自己的ReactiveEffect对象</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReactiveEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">_dirty</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">_dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#82AAFF;">        triggerRefValue</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><ol start="2"><li>然后当组件render函数执行时会获取computed的value属性，首先会执行<code>trackRefValue</code>函数内部会让当前计算属性的<code>dep</code>对render函数进行收集，然后由于初次<code>_dirty</code>为true，就会执行<code>effect.run</code>也就是ReactiveEffect的run，此过程会设置<code>activeEffect</code>为当前computed，然后执行computed中我们定义函数。内部会访问<code>number</code>触发它的get然后对computed的effect进行收集，最后执行完后<code>_dirty</code>变成false，这样就完成了初次的依赖回收过程</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ComputedRefImpl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> dep</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> undefined</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  private</span><span style="color:#F07178;"> _value</span><span style="color:#89DDFF;">!:</span><span style="color:#FFCB6B;"> T</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#C792EA;"> readonly</span><span style="color:#F07178;"> effect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> _dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#C792EA;">  public</span><span style="color:#F07178;"> _cacheable</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // render获取计算属性值时触发</span></span>
<span class="line"><span style="color:#C792EA;">  get</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> toRaw</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line highlighted"><span style="color:#82AAFF;">    trackRefValue</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">self</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// 此过程会让computed对render进行收集</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_dirty</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_cacheable</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 第一次 dirty 为true，会执行run也就是执行computed回调函数，内部会访问响应式对象使computed被对应的data收集</span></span>
<span class="line"><span style="color:#BABED8;">      self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">!</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_value</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  set</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">_setter</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/effect 53行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  run</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> parent</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> activeEffect</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> lastShouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> shouldTrack</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">parent</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> this</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#BABED8;">      parent</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> parent</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">parent</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> activeEffect</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 改变当前activeEffect为 computed的Effect</span></span>
<span class="line"><span style="color:#BABED8;">      activeEffect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#BABED8;">      shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">      trackOpBit</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> &lt;&lt;</span><span style="color:#89DDFF;"> ++</span><span style="color:#BABED8;">effectTrackDepth</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effectTrackDepth</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#BABED8;"> maxMarkerBits</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">        initDepMarkers</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        cleanupEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 执行computed 回调函数，内部访问number值，触发number对computed的收集</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br></div></div><ol start="3"><li>当改变number的值时，会派发更新通知number的dep中的所有effect进行更新，这里就会通知computed effect进行更新，但这里不会执行<code>ReactiveEffect</code>的run函数，而执行<code>scheduler</code>函数，scheduler仅仅会将<code>_dirty</code>的值改为false，然后通知computed自己的dep中的所有effect进行更新，这样render函数重新执行时就和第一次执行一致了：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// number触发自己的依赖进行更新</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> triggerEffects</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> debuggerEventExtraInfo</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> effects</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> :</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> effects</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行计算属性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      triggerEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> debuggerEventExtraInfo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> triggerEffect</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">effect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> debuggerEventExtraInfo</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> DebuggerEventExtraInfo</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> activeEffect</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">allowRecurse</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注意这个 scheduler 属性很重要，这个在 ComputedRefImpl 实例化时会传入</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 所以它会执行 scheduler，而不是run函数，也就是不会立马执行computed回调，等到render时才会执行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scheduler</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">scheduler</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ComputedRefImpl</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 部分省略...</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    getter</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ComputedGetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> readonly</span><span style="color:#BABED8;font-style:italic;"> _setter</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ComputedSetter</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    isReadonly</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    isSSR</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"><span style="color:#89DDFF;">  )</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReactiveEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span><span style="color:#676E95;font-style:italic;"> // 这个就是 scheduler</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">_dirty</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">_dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 上面执行这里时，computed通知自己dep中收集的所有依赖进行更新，这时就会重新执行render</span></span>
<span class="line"><span style="color:#82AAFF;">        triggerRefValue</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div><p>以上就是vue3的computed整体过程，整体来说vue3的实现更加清晰。vue3中通过<code>track、trigger</code>effect机制完成依赖收集和派发更新，因此所有对象都可能是effect，而没有像vue2中那样死板。再者就是vue3的computed依赖收集能真正反映出依赖的收集关系，而不像vue2中data还需要额外对render收集一次！</p><h2 id="侦听函数" tabindex="-1">侦听函数 <a class="header-anchor" href="#侦听函数" aria-label="Permalink to &quot;侦听函数&quot;">​</a></h2><p><u>侦听函数</u>在vue中就是我们常用的watch又称<code>user watcher</code>，之所以这么称呼是因为它也是一个watcher对象并且user的值为true。watch通常用来监听响应式对象，当响应式对象setter执行时会通过dep通知user watcher执行，就会执行我们watch中定义的回调函数，然后再做点什么👀</p><h3 id="简单使用-1" tabindex="-1">简单使用 <a class="header-anchor" href="#简单使用-1" aria-label="Permalink to &quot;简单使用&quot;">​</a></h3><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">++</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">改变</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  data</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  watch</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">watchCount</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  methods</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    watchCount</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> o</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> o</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>你可以能没见过以上watch形式，<code>count</code>的值仅仅是一个字符串，并不是我们常用的函数或者对象，但是他确实能监听到count的变化，执行的是methods中对应的方法，这种写法后面你就会明白 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520181916845.png" alt=""></p><h3 id="初始化过程" tabindex="-1">初始化过程 <a class="header-anchor" href="#初始化过程" aria-label="Permalink to &quot;初始化过程&quot;">​</a></h3><p>其实user watch很简单，这里就简单的啃下源码：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/state 58行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> initState</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果定义了watch，就进行初始化</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watch</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watch</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> nativeWatch</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    initWatch</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watch</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 初始化</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> initWatch</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> watch</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> watch</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> watch</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // watch属性值为数组的情况</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">        createWatcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    	// watch 属性的值为普通对象</span></span>
<span class="line"><span style="color:#82AAFF;">      createWatcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每个watch 创建对应的watch</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createWatcher</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  handler</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 这里会对handler做统一处理，handler也就是回调函数，可能是函数、对象、字符串</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 如果当前的属性的值（handler）为对象，那么回调函数就为 对象的 handler 属性（这种方式应该用过）</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isPlainObject</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    options</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    handler</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">handler</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当前属性的值（handler）为字符串，回调就从当前实例上取</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    handler</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">handler</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 最后执行执行 $watch 方法</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">expOrFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> handler</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>这里列举下以上watch的不同的定义形式：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 函数</span></span>
<span class="line"><span style="color:#82AAFF;">  count</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 数组和字符串，循环时就是字符串；字符串时回调函数会从this上拿，也就是vm[&#39;cb1&#39;]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这就是为什么我们的例子可以写成字符串的形式，其实通过vm[&#39;watchCount&#39;]会取到methods上的方法</span></span>
<span class="line"><span style="color:#FFCB6B;">  count</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cb1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">cb2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">  count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">cb1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 对象</span></span>
<span class="line"><span style="color:#FFCB6B;">  count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    handler</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="watch" tabindex="-1">$watch <a class="header-anchor" href="#watch" aria-label="Permalink to &quot;$watch&quot;">​</a></h3><p>我们定义的watch最终内部会调用原型<code>$watch</code>方法，所以我们还可以使用$watch进行函数侦听：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#BABED8;">(key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ops)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol><li>$watch是实现侦听函数的核心，那么就来看看它内部具体实现：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#BABED8;">  options</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 设置user为true，这个很重要用来表示当前Watcher为user watcher</span></span>
<span class="line"><span style="color:#BABED8;">  options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建user Watcher</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果设置 immediate，会立即执行一次 cb</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // $watch 函数会返回一个函数，执行它 会执行 watcher.teardown</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> unwatchFn</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">teardown</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><ol start="2"><li>创建userWatcher时会标识当前watcher为user watcher(user = true)，并且有cb也就是watch的回调函数。这里最重要的就是<code>parsePath</code>对<code>expOrFn</code>的解析，通常watch用来检测响应式对象，一般都会写对应的key也可以嵌套（如：<code>foo、foo.bar</code>）。parsePath返回一个函数并赋值给<code>watcher.getter</code>，然后立即执行getter，也就会执行parsePath返回的函数，执行时会将当前vm传入，然后根据watch监听的key循环获取到对应的响应式属性的值，然后返回。此过程就会触发检测的key对当前userWatcher的收集</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  user</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // this.user 为true</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">options</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !!</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">;}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // cb 就是 watch 的回调函数</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 这里需要注意 expOrFn 通常为 字符串 如：this.$watch(&quot;a.b.c&quot;, cb, {});</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 那么就会走这里，这里会通过parsePath将 用户监听的 key 传递进去，最后返回</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    else</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> parsePath</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">expOrFn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 最后执行得到值</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">lazy</span><span style="color:#89DDFF;"> ?</span><span style="color:#89DDFF;"> undefined</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// parsePath 会返回一个函数</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bailRE </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">[^</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">unicodeRegExp</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.$_</span><span style="color:#BABED8;">\\\\</span><span style="color:#C3E88D;">d]</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> parsePath</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">path</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">bailRE</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">path</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;font-style:italic;"> return</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> segments</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> segments</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#BABED8;">      obj</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">segments</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]]</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> obj</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><ol start="3"><li>当watch监听的key值被修改后就会让dep通知user watcher进行更新，user watcher就会执行update方法，然后通过异步更新队列策略，最后执行watcher的run方法：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // dep通知watch更新</span></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">lazy</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">sync</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 这里user watcheer 会进入更新队列</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    else</span><span style="color:#89DDFF;"> {</span><span style="color:#82AAFF;"> queueWatcher</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 更新队列执行时会执行watcher.run</span></span>
<span class="line"><span style="color:#F07178;">  run</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">active</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 拿到最新的值</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> ||</span><span style="color:#82AAFF;"> isObject</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">deep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">        const</span><span style="color:#BABED8;"> oldValue</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 如果是user watcher，执行cb</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">user</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          this.</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> oldValue</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">          this.</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> oldValue</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><h3 id="immediate" tabindex="-1">immediate <a class="header-anchor" href="#immediate" aria-label="Permalink to &quot;immediate&quot;">​</a></h3><p>immediate会让watch立即执行一次，来看它的实现：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果设置 immediate，会立即执行一次 cb</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    cb</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="事件卸载" tabindex="-1">事件卸载 <a class="header-anchor" href="#事件卸载" aria-label="Permalink to &quot;事件卸载&quot;">​</a></h3><p>watch可以主动进行监听的卸载，watch会返回一个函数，执行它就会卸载监听。原理就是通过watcher的teardown方法遍历当前watcher的所有dep执行移除当前watcher，这样data更新时就不会再被通知更新了：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$watch</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // $watch 函数会返回一个函数，执行它 会执行 watcher.teardown</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> unwatchFn</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">teardown</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 来看下teardown的实现</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 遍历当前user watcher所有被收集的dep，执行removeSub这样就会让dep移除对user watcher的收集</span></span>
<span class="line"><span style="color:#F07178;">  teardown</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">active</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        this.</span><span style="color:#BABED8;">deps</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">removeSub</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">active</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="deep" tabindex="-1">deep <a class="header-anchor" href="#deep" aria-label="Permalink to &quot;deep&quot;">​</a></h3><p>deep选项主要用来深层监听某个属性，比如下面深层监听foo，那么当foo或者bar改变时都会触发user watcher的回调函数执行：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  foo</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    bar</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> deep</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>那么内部是如何实现deep的呢？其实道理很简单<u>只要让深层嵌套的属性的dep也都收集当前的user watcher，那么深层嵌套的属性值改变时也会通知user watcher进行更新</u>。主要就是通过<code>traverse</code>方法深度遍历嵌套对象访问对应的key就会触发dep收集当前watcher，这样深层嵌套的属性值改变时也会通知watcher进行更新：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 省略</span></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    pushTarget</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> catch</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">e</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">user</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">        handleError</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">getter for watcher &quot;</span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">expression</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">&quot;</span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> finally</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    	// 当执行当前get方法获取到响应式对应的value时，如果用户设置了deep</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    	// 那么就对当前值执行 traverse 方法，内部会循环遍历key，触发它们的get</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">deep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#82AAFF;">        traverse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/traverse </span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> traverse</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  _traverse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> seenObjects</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  seenObjects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clear</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> _traverse</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> seen</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SimpleSet</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> keys</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> isA</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 不合法的值直接return</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> ((</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">isA</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isFrozen</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#FFCB6B;"> VNode</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">val</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__ob__</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> depId</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__ob__</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">seen</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">depId</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    seen</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">depId</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 值是数组或者对象时，深层遍历就会触发每个key的get</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 然后触发每个key的dep执行depend，这样深层嵌套的key就会收集当前的user watcher</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">isA</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    i</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">_traverse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> seen</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    keys</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">    i</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> keys</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    while</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">--</span><span style="color:#F07178;">) </span><span style="color:#82AAFF;">_traverse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">keys</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]]</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> seen</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br></div></div><h3 id="sync" tabindex="-1">sync <a class="header-anchor" href="#sync" aria-label="Permalink to &quot;sync&quot;">​</a></h3><p>这个属性顾名思义同步执行，通常情况下user watcher会被push到异步更新队列中去，然后按顺序进行更新。当设置了这个属性后，每次监听对象值的更新，都会立即执行user watcher的cb，而不会被推到异步更新队列中去，执行也就会被提前</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 省略...</span></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">lazy</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">dirty</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // dep通知更新时，由于sync位true，会立即执行run得到最新的值然后执行cb</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">sync</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      queueWatcher</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h3><p>watch的侦听函数中不能再对所侦听的对象进行值的修改，这样就会造成死循环不断执行回调函数：</p><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">  &lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;">++</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">改变</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">  data</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  watch</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    count</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">watchCount</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  methods</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    watchCount</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">n</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> o</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">count</span><span style="color:#89DDFF;"> ++;</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> o</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230520224222376.png" alt=""></p><h3 id="vue3的watch" tabindex="-1">Vue3的watch <a class="header-anchor" href="#vue3的watch" aria-label="Permalink to &quot;Vue3的watch&quot;">​</a></h3><p>vue3中的watch其实和vue2的没啥区别，vue3的选项多了一个<code>flush: &#39;pre&#39; | &#39;post&#39; | &#39;sync&#39;</code>参数，其用来控制回调函数的执行时机，默认值为<code>pre</code>会推送到<code>queueJob</code>队列中，在页面渲染前执行；如果值为<code>post</code>那么会将回调推送到<code>postFlushCbs</code>中，这会在<code>queue</code>执行完后再执行<code>postFlushCbs</code>中的回调，在页面渲染后执行；最后一个值<code>sync</code>和vue2一样，当watch的对象值改变时会立马执行不需要进入队列异步更新</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/runtime-core/src/apiWatch 158行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> watch</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Immediate</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> Readonly</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> false</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> WatchOptions</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Immediate</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> WatchStopHandle</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#82AAFF;"> doWatch</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> doWatch</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> WatchEffect</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchCallback</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#BABED8;font-style:italic;"> immediate</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> deep</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> flush</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> onTrack</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> onTrigger</span><span style="color:#89DDFF;"> }:</span><span style="color:#FFCB6B;"> WatchOptions</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> EMPTY_OBJ</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> WatchStopHandle</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;"> =</span></span>
<span class="line"><span style="color:#82AAFF;">    getCurrentScope</span><span style="color:#F07178;">() </span><span style="color:#89DDFF;">===</span><span style="color:#BABED8;"> currentInstance</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">scope</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> currentInstance</span><span style="color:#89DDFF;"> :</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // const instance = currentInstance</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> any</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> forceTrigger</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> isMultiSource</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略代码...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1. 先对watch对象的值进行规范化，值可能是 对象、数组、函数等等</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // deep时深度遍历</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> deep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> baseGetter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getter</span></span>
<span class="line"><span style="color:#82AAFF;">    getter</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> traverse</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">baseGetter</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> cleanup</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> OnCleanup</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    cleanup</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onStop</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      callWithErrorHandling</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ErrorCodes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">WATCH_CLEANUP</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> isMultiSource</span></span>
<span class="line"><span style="color:#89DDFF;">    ?</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Array</span><span style="color:#F07178;">((</span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#F07178;"> [])</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">INITIAL_WATCHER_VALUE</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    :</span><span style="color:#BABED8;"> INITIAL_WATCHER_VALUE</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 对回调做一次包装</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">active</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 省略...</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // watchEffect</span></span>
<span class="line"><span style="color:#BABED8;">      effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 处理flush 参数，用来区别不同的执行时机</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> scheduler</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> EffectScheduler</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">flush</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    scheduler</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> any</span><span style="color:#676E95;font-style:italic;"> // the scheduler function gets called directly</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">flush</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    scheduler</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> queuePostRenderEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">suspense</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">pre</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">instance</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">job</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">uid</span></span>
<span class="line"><span style="color:#82AAFF;">    scheduler</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> queueJob</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">job</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建 ReactiveEffect</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReactiveEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> scheduler</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 处理 immediate 情况，立即执行一次</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">immediate</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      job</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 否则计算一次旧的值</span></span>
<span class="line"><span style="color:#BABED8;">      oldValue</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">flush</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    queuePostRenderEffect</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">      effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">run</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">      instance</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">suspense</span></span>
<span class="line"><span style="color:#F07178;">    )</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 卸载事件</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> unwatch</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scope</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      remove</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">effects</span><span style="color:#89DDFF;">!,</span><span style="color:#BABED8;"> effect</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> unwatch</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br></div></div><h3 id="watcheffect" tabindex="-1">watchEffect <a class="header-anchor" href="#watcheffect" aria-label="Permalink to &quot;watchEffect&quot;">​</a></h3><p>watchEffect本质还是watch，只不过参数调换了位置而已，这里更像React的useEffect，内部的回调会主动执行，并且当内部的依赖发生改变时，再次触发回调执行：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#BABED8;">(effect: </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> OnCleanup</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> void,</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">?:</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> flush?</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>watchEffect原理很简单内部主动会执行一次回调函数，这个过程中就会访问到对应的响应式对象，然后触发对当前回调函数的收集，同理data更新时也会通知回调再次执行。回调函数在内部会被封装一次，将<code>onCleanup</code>作为参数传入：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> watchEffect</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  effect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchEffect</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> WatchOptionsBase</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> WatchStopHandle</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#82AAFF;"> doWatch</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> null,</span><span style="color:#BABED8;"> options</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> doWatch</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  source</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> WatchSource</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> WatchEffect</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WatchCallback</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  {</span><span style="color:#BABED8;font-style:italic;"> immediate</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> deep</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> flush</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> onTrack</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> onTrigger</span><span style="color:#89DDFF;"> }:</span><span style="color:#FFCB6B;"> WatchOptions</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> EMPTY_OBJ</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> WatchStopHandle</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // source 为function</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isFunction</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">source</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 没有cb，不会走这里</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // getter with cb</span></span>
<span class="line"><span style="color:#82AAFF;">      getter</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span></span>
<span class="line"><span style="color:#82AAFF;">        callWithErrorHandling</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">source</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ErrorCodes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">WATCH_GETTER</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // watchEffect 回调会被封装一次</span></span>
<span class="line"><span style="color:#82AAFF;">      getter</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">isUnmounted</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">          return</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cleanup</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">          cleanup</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        // 这里就会把 onCleanup 作为参数传入</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#82AAFF;"> callWithAsyncErrorHandling</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">          source</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          instance</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          ErrorCodes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">WATCH_CALLBACK</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          [</span><span style="color:#BABED8;">onCleanup</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">        )</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 清除副作用</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> cleanup</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> OnCleanup</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    cleanup</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onStop</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">      callWithErrorHandling</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">fn</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> ErrorCodes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">WATCH_CLEANUP</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> job</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> SchedulerJob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">active</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">cb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span><span style="color:#676E95;font-style:italic;"> /* 省略... */</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // watchEffect</span></span>
<span class="line"><span style="color:#BABED8;">      effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReactiveEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> scheduler</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // initial run</span></span>
<span class="line"><span style="color:#BABED8;">  effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> unwatch</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stop</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scope</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      remove</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">scope</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">effects</span><span style="color:#89DDFF;">!,</span><span style="color:#BABED8;"> effect</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> unwatch</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><p>watchEffect还是很好理解的，剩下的还有<code>watchPostEffect</code>、<code>watchSyncEffect</code>都和这个一样，自己看看就行了</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>到这里就把vue的响应式原理全部讲解完了，其中包括vue3的。响应式遵循发布/订阅模式，通过拦截对象的getter/setter实现对当前的effect进行收集和通知，这样就可以精确的进行更新，这也是为什么vue的更新粒度可以做到组件的原因。如果你对它的响应式还是比较模糊，建议你结合这两篇响应式原理文章尝试写几个例子并进行断点调试，可以帮助你解决自己的疑惑，你也可以在下方留言我会及时回复。接下来一起来看看<a href="/frontend/vue/template-compiler.html">vue的模板编译</a>过程吧</p>`,119);function F(D,y,i,b,u,B){const a=n("Reward"),l=n("Gitalk");return t(),e("div",null,[r,s(a),s(l)])}const E=p(c,[["render",F]]);export{A as __pageData,E as default};
