import{_ as e,c as p,J as s,V as o,o as t,G as n}from"./chunks/framework.SV1ROkXV.js";const E=JSON.parse('{"title":"JS类型隐式转换与装箱拆箱","description":"搞明白JS动态弱类型语言的隐式转换规则及装箱拆箱规则来提高你的程序稳定性","frontmatter":{"title":"JS类型隐式转换与装箱拆箱","description":"搞明白JS动态弱类型语言的隐式转换规则及装箱拆箱规则来提高你的程序稳定性","keywords":"类型隐式转换,装箱拆箱,运算转换,类型转换规则,type conversion,toPrimitive,弱类型,OrdinaryToPrimitive","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-js.png"},"headers":[],"relativePath":"article/2019/js-type-transfer.md","filePath":"article/2019/js-type-transfer.md","lastUpdated":1709440279000}'),r={name:"article/2019/js-type-transfer.md"},c=o(`<h1 id="js类型隐式转换与装箱拆箱" tabindex="-1">JS类型隐式转换与装箱拆箱 <a class="header-anchor" href="#js类型隐式转换与装箱拆箱" aria-label="Permalink to &quot;JS类型隐式转换与装箱拆箱&quot;">​</a></h1><p>如果你写过大多数强类型语言如<code>Java</code>对数据的类型一定不会陌生，如定义两个变量：<code>int num = 1</code>和<code>boolean bool = false</code>，比较两个变量是否相等时结果很明显时<code>false</code>(不同类型直接会报错)，类型不同的变量永远不会相等。由于JS被定位成<code>动态弱类型语言</code>，其往往会颠覆你的认知。</p><p>JS引擎往往会最大限度的降低程序的错误，假如你会写<code>num = 1;num.name=xxx</code>这种很明显的错误，但当你运行时却不会报错，这里就涉及到了<code>装箱和拆箱</code>；还有<code>1 == true; 1 == [1]</code>你会发现竟然结果都为<code>true</code>，如果你不了解JS内部的装箱、拆箱和类型的隐式转换规则，这些可能都会让你产生困惑，如果你有这些疑惑，接着看下面的内容吧。</p><blockquote><p>注：如遇到有一些链接无法访问可能需要科学上网</p></blockquote><h2 id="装箱与拆箱" tabindex="-1">装箱与拆箱 <a class="header-anchor" href="#装箱与拆箱" aria-label="Permalink to &quot;装箱与拆箱&quot;">​</a></h2><p>什么是装箱和拆箱？JS中有<code>string</code>、<code>number</code>、<code>boolean</code>基础类型，它们都有对应的包装类型(引用类型)<code>String</code>、<code>Number</code>、<code>Boolean</code>，<u>装箱就是将基础类型转换为对应的包装类型，而拆箱则将包装类型转换为对应的基础类型。</u></p><p><u>如果你对<strong>拆箱</strong>操作不了解，将会影响你对隐式转换的理解。</u></p><h3 id="装箱" tabindex="-1">装箱 <a class="header-anchor" href="#装箱" aria-label="Permalink to &quot;装箱&quot;">​</a></h3><p>装箱可以通过显式new进行装箱，JS引擎也可以隐式装箱，下面就来了解下两种不同的装箱操作。</p><ol><li>显式装箱</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// string</span></span>
<span class="line"><span style="color:#BABED8;">str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">str </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> String</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// boolean</span></span>
<span class="line"><span style="color:#BABED8;">bool </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">bool </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Boolean</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// number</span></span>
<span class="line"><span style="color:#BABED8;">num </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">num </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Number</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><ol start="2"><li>隐式装箱</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 例1</span></span>
<span class="line"><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toUpperCase</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // JS</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 例2</span></span>
<span class="line"><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age </span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 自动装箱 =&gt; name = new String(&#39;js&#39;) =&gt; name.age = 1 =&gt; 下一行前销毁当前对象</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(name</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // undefined</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>上面隐式装箱<code>name</code>是个基础类型，基础类型不会有属性的，但却拥有<code>toUpperCase</code>方法，其本质还是<code>String</code>对象的方法，当执行此方法时会隐式的将name转换为对象<code>name =&gt; new String(name)</code>，然后就会拥有对应的方法；而给其设置<code>age</code>属性后重新获取却为<code>undefined</code>，这里JS引擎就处理了错误的赋值操作，也会将<code>name</code>转换为<code>new String(name)</code>然后在执行下一行前又会销毁此对象，可以理解为当前对象就是来为赋值操作服务的。</p><h3 id="拆箱" tabindex="-1">拆箱 <a class="header-anchor" href="#拆箱" aria-label="Permalink to &quot;拆箱&quot;">​</a></h3><p>拆箱则是将包装类型转化为对应的基础类型，通过执行<code>valueOf</code>方法可以得到它的原始值：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">num </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Number</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">123</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Number {123}</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> num</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // object</span></span>
<span class="line"><span style="color:#BABED8;">num</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 123</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">bool </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Object</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Boolean {true}</span></span>
<span class="line"><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> booll</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // object</span></span>
<span class="line"><span style="color:#BABED8;">bool</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>除了执行<code>valueOf</code>，<code>toString</code>方法也可以将包装类型转换为基础类型字符串形式，其实除了以上几个包装类型拆箱，其他的引用类型也会根据一定的规则进行转换，下面就来一起看看。</p><h2 id="toprimitive、-ordinarytoprimitive" tabindex="-1">toPrimitive、 OrdinaryToPrimitive <a class="header-anchor" href="#toprimitive、-ordinarytoprimitive" aria-label="Permalink to &quot;toPrimitive、 OrdinaryToPrimitive&quot;">​</a></h2><p>对于引用类型在特殊条件下都会转换为基础类型，其拆箱都会遵循<a href="https://tc39.es/ecma262/#sec-toprimitive" target="_blank" rel="noreferrer">【toPrimitive规则】</a></p><p>JS引擎內部toPrimitive的签名如下：input是待转换的对象，perferedType为转换的类型，有<code>string/number</code>两种</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">toPrimitive</span><span style="color:#BABED8;">(input</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> perferedType)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. If input is an Object, then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   a. Let exoticToPrim be ? GetMethod(input, @@toPrimitive).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   b. If exoticToPrim is not undefined, then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     i. If preferredType is not present, let hint be &quot;default&quot;.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     ii. Else if preferredType is string, let hint be &quot;string&quot;.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     iii. Else,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       1. Assert: preferredType is number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//       2. Let hint be &quot;number&quot;.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     iv. Let result be ? Call(exoticToPrim, input, « hint »).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     v. If result is not an Object, return result.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     vi. Throw a TypeError exception.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   c. If preferredType is not present, let preferredType be number.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   d. Return ? OrdinaryToPrimitive(input, preferredType).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. Return input.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>这里的<code>toPrimitive</code>属性其实就是<code>Symbol.toPrimitive</code>属性，其内部转换可以概括步骤如下（<strong>重点</strong>）：</p><ol><li><u><strong>当进行类型转换时会首先判断有没有<code>Symbol.toPromitive</code>属性：</strong></u><ul><li>当<code>perferedType</code>为<code>string</code>时，返回<code>string</code>条件结果。</li><li>当<code>perferedType</code>为<code>number</code>时返回<code>number</code>条件结果。</li><li>当<code>perferedType</code>为空时，返回<code>default</code>条件结果。</li><li>如果以上返回的结果不是基本类型时抛异常<code>Cannot convert object to primitive value</code></li></ul></li><li><u><strong>如果没有<code>Symbol.toPromitive</code>属性，会执行内部的<a href="https://tc39.es/ecma262/#sec-ordinarytoprimitive" target="_blank" rel="noreferrer">OrdinaryToPrimitive</a>方法，此方法会根据优先级调用<code>toString</code>和<code>valueOf</code>方法，其调用顺序如下：</strong></u><ul><li>当指定转换类型为<code>string</code>时，会优先调用<code>toString</code>方法，若执行结果为基础类型则返回，否则执行<code>valueOf</code>方法，基本类型结果将会返回，否则将会抛异常。</li><li>当指定转换类型为<code>number</code>时，会优先调用<code>valueOf</code>方法，若执行结果为基础类型则返回，否则执行<code>toString</code>方法，基本类型结果将会返回，否则将会抛异常。</li><li>在不指定类型情况下，除了<code>Date</code>会优先执行<code>toString</code>方法，其余的都会优先执行<code>valueOf</code>方法，然后根据前两条规则执行。</li></ul></li></ol><p><code>OrdinaryToPrimitive</code>签名如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">OrdinaryToPrimitive</span><span style="color:#BABED8;">(O</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> hint)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. If hint is string, then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   a. Let methodNames be « &quot;toString&quot;, &quot;valueOf&quot; ».</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. Else,</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   a. Let methodNames be « &quot;valueOf&quot;, &quot;toString&quot; ».</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. For each element name of methodNames, do</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   a. Let method be ? Get(O, name).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//   b. If IsCallable(method) is true, then</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     i. Let result be ? Call(method, O).</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//     ii. If result is not an Object, return result.</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4. Throw a TypeError exception.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p><code>OrdinaryToPrimitive</code>的执行也可以在源码(<a href="https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-objects.cc;l=2107?q=OrdinaryToPrimitive&amp;ss=chromium%2Fchromium%2Fsrc&amp;start=11" target="_blank" rel="noreferrer">c代码</a>、<a href="https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/node_modules/es-abstract/2020/OrdinaryToPrimitive.js;l=16?q=OrdinaryToPrimitive&amp;sq=&amp;ss=chromium" target="_blank" rel="noreferrer">JS代码</a>)中找到，你可以在<a href="https://source.chromium.org/chromium" target="_blank" rel="noreferrer">source.chromium.org</a>中搜索对应的关键字<code>OrdinaryToPrimitive</code>，就可以找到。下面代码也证明了<code>OrdinaryToPrimitive</code>的执行的执行步骤</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> OrdinaryToPrimitive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">O</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> hint</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">Type</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">O</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> $TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Assertion failed: Type(O) is not Object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#676E95;font-style:italic;">/* Type(hint) !== &#39;String&#39; || */</span><span style="color:#BABED8;"> hint</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> hint</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> $TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Assertion failed: \`hint\` must be &quot;string&quot; or &quot;number&quot;</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  var</span><span style="color:#BABED8;"> methodNames</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> hint</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ?</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">valueOf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">valueOf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">toString</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">var</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> methodNames</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> +=</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> name</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> methodNames</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    var</span><span style="color:#BABED8;"> method</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> Get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">O</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">IsCallable</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">method</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">      var</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> Call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">method</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> O</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">Type</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">!==</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Object</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  throw</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> $TypeError</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">No primitive value for </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#82AAFF;"> inspect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">O</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>接下来通过下面的代码来证明以上总结的步骤，首先会执行<code>Symbol.toPrimitive</code>方法，没有则会执行<code>OrdinaryToPrimitive</code>的方法。</p><p><strong>Symbol.toPrimitive证明</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 根据toPrimitive签名定义方法</span></span>
<span class="line"><span style="color:#BABED8;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toPrimitive]</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">perferedType</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">perferedType</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">perferedType</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 1. perferedType为string</span></span>
<span class="line"><span style="color:#89DDFF;">\`\${</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;str&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. perferedType为number</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3. perferedType为 undefined</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> obj</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;default&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 若返回的结果不是基础类型则抛异常，这里修改一个number返回对象</span></span>
<span class="line"><span style="color:#BABED8;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  [Symbol</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toPrimitive]</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">perferedType</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">perferedType</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">number</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">perferedType</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Uncaught TypeError: Cannot convert object to primitive value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>通过上面的代码再次证明了确实是以上的步骤，接下来看OrdinaryToPrimitive</p><p><strong>OrdinaryToPrimitive证明</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 1. hint为string会先执行toString方法</span></span>
<span class="line"><span style="color:#89DDFF;">\`\${</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;2&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">array</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">\`\${</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;array&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 2. hint为number会先执行valueOf方法</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 1</span></span>
<span class="line"><span style="color:#FFCB6B;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">+</span><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 2</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 3.当不指定 hint 类型时，除Date类型其它会优先执行\`valueOf\`，然后执行\`toString\`，Date正好相反</span></span>
<span class="line highlighted"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;1&#39;</span></span>
<span class="line highlighted"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 2</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;Thu Dec 01 2021 12:56:23 GMT+0800 (中国标准时间)&#39;</span></span>
<span class="line"><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">date</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 修改Date的toString方法</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // date</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 4.若某一个方法返回的不是基础类型，继续执行下一个方法，否则抛异常</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 2 =&gt; 执行toSting</span></span>
<span class="line"><span style="color:#FFCB6B;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 修改Date的toString方法</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;1609459200000&#39; =&gt; 执行 valueOf</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;">valueOf</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> toString</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // Uncaught TypeError: Cannot convert object to primitive value</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>以上就是OrdinaryToPrimitive的执行步骤，其实<code>valueOf</code>执行结果更趋向于自己原本的值(除Date外)，而<code>toString</code>一定会返回string类型，如：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// valueOf</span></span>
<span class="line"><span style="color:#BABED8;">obj </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> name</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> };</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // { name: 1 }</span></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // f(){}</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // [1,2,3]</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^</span><span style="color:#BABED8;">\\d</span><span style="color:#C3E88D;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">valueOf</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // /^d+/i</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// toString</span></span>
<span class="line"><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;1,2,3&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^</span><span style="color:#BABED8;">\\d</span><span style="color:#C3E88D;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;/^d+/i&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>通过上面的内容你应该对装箱与拆箱有了更深的认识，从拆箱中应该也看到了类型转换的影子(上面代码中12,13行高亮部分)<code>&#39;&#39; + ({valueOf: () =&gt; 1, toString: () =&gt; 2}); // &#39;1&#39;</code>，返回的结果是个<u>字符串1而不是数字</u>，而<code>1 + ({valueOf: () =&gt; 1, toString: () =&gt; 2}); // 2</code>返回的却是数字2，两者只因相加位类型的不同结果也不同，这里就涉及到了类型的隐式转换，<code>number =&gt; string</code>的转换。</p><p>了解了对象转换为原始类型(拆箱)后，接下来就来看看类型隐式转换是如何运作的。</p><h2 id="类型隐式转换" tabindex="-1">类型隐式转换 <a class="header-anchor" href="#类型隐式转换" aria-label="Permalink to &quot;类型隐式转换&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">提示</p><p>如果你在类型隐式转换的阅读过程中产生的疑问过多，建议将装箱和拆箱的内容多读、多练几遍。</p></div><p><u>类型隐式转换可以归结为<code>number</code>、<code>string</code>和<code>boolean</code>等其它基础类型之间通过运算符<code>==</code>、<code>*、/、+、-</code>或逻辑运算的转换。</u>由于JS的弱类型特征，像<code>==</code>比较者可以为任意类型任意值，而<code>===</code>比较者的类型不同永远不会相等（<code>1 == 1</code>、<code>1 === &#39;1&#39;</code>）。</p><p>其实转换者可以是基础类型和对象类型，但归根还是基础类型之间的转换，<u>若转换者存在对象类型，会根据拆箱优先级进行拆箱转换为基础类型后</u>，然后在根据类型隐式转换的规则进行转换。</p><p>这里列出一张不同类型转换表格，里面包含了不同类型转换到原始值或其它基础类型的规则，通常情况下记住这张表的转换规则就可以解决所有隐式转换的问题了（当然对象类型转换为基础类型要学会前面讲的<a href="/frontend/js/implicit-conversion.html#拆箱toprimitive、-ordinarytoprimitive">拆箱规则</a>）。</p><table><thead><tr><th style="text-align:left;">类型</th><th style="text-align:right;">值</th><th style="text-align:center;">to Boolean</th><th style="text-align:center;">to Number</th><th style="text-align:center;">to String</th></tr></thead><tbody><tr><td style="text-align:left;">Boolean</td><td style="text-align:right;">true</td><td style="text-align:center;">true</td><td style="text-align:center;">1</td><td style="text-align:center;">&#39;true&#39;</td></tr><tr><td style="text-align:left;">Boolean</td><td style="text-align:right;">false</td><td style="text-align:center;">false</td><td style="text-align:center;">0</td><td style="text-align:center;">&#39;false&#39;</td></tr><tr><td style="text-align:left;">Number</td><td style="text-align:right;">100</td><td style="text-align:center;">true</td><td style="text-align:center;">100</td><td style="text-align:center;">&#39;100&#39;</td></tr><tr><td style="text-align:left;">Number</td><td style="text-align:right;">Infinity</td><td style="text-align:center;">true</td><td style="text-align:center;">Infinity</td><td style="text-align:center;">&#39;Infinity&#39;</td></tr><tr><td style="text-align:left;">Number</td><td style="text-align:right;">0</td><td style="text-align:center;">false</td><td style="text-align:center;">0</td><td style="text-align:center;">&#39;0&#39;</td></tr><tr><td style="text-align:left;">Number</td><td style="text-align:right;">NaN</td><td style="text-align:center;">false</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;NaN&#39;</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:right;">&#39;&#39;</td><td style="text-align:center;">false</td><td style="text-align:center;">0</td><td style="text-align:center;">&#39;&#39;</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:right;">&#39;100&#39;</td><td style="text-align:center;">true</td><td style="text-align:center;">100</td><td style="text-align:center;">&#39;100&#39;</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:right;">&#39;100abc&#39;</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;100abc&#39;</td></tr><tr><td style="text-align:left;">String</td><td style="text-align:right;">&#39;abc&#39;</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;abc&#39;</td></tr><tr><td style="text-align:left;">Null</td><td style="text-align:right;">null</td><td style="text-align:center;">false</td><td style="text-align:center;">0</td><td style="text-align:center;">&#39;null&#39;</td></tr><tr><td style="text-align:left;">Undefined</td><td style="text-align:right;">undefined</td><td style="text-align:center;">false</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;undefined&#39;</td></tr><tr><td style="text-align:left;">Function</td><td style="text-align:right;">function(){}</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;function(){}&#39;</td></tr><tr><td style="text-align:left;">Object</td><td style="text-align:right;">{}</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;[object Object]&#39;</td></tr><tr><td style="text-align:left;">Array</td><td style="text-align:right;">[]</td><td style="text-align:center;">true</td><td style="text-align:center;">0</td><td style="text-align:center;">&#39;&#39;</td></tr><tr><td style="text-align:left;">Array</td><td style="text-align:right;">[&#39;abc&#39;]</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;abc&#39;</td></tr><tr><td style="text-align:left;">Array</td><td style="text-align:right;">[&#39;123&#39;]</td><td style="text-align:center;">true</td><td style="text-align:center;">123</td><td style="text-align:center;">&#39;123&#39;</td></tr><tr><td style="text-align:left;">Array</td><td style="text-align:right;">[&#39;123&#39;, &#39;abc&#39;]</td><td style="text-align:center;">true</td><td style="text-align:center;">NaN</td><td style="text-align:center;">&#39;123,abc&#39;</td></tr><tr><td style="text-align:left;">Date</td><td style="text-align:right;">new Date</td><td style="text-align:center;">true</td><td style="text-align:center;">数字(时间戳)</td><td style="text-align:center;">&#39;Wed Nov 16 2020 16:51:31 GMT+0800 (中国标准时间)&#39;</td></tr><tr><td style="text-align:left;">Symbol</td><td style="text-align:right;">Symbol(&#39;a&#39;)</td><td style="text-align:center;">true</td><td style="text-align:center;">throw TypeError</td><td style="text-align:center;">throw TypeError</td></tr></tbody></table><h2 id="算术运算符转换" tabindex="-1">算术运算符转换 <a class="header-anchor" href="#算术运算符转换" aria-label="Permalink to &quot;算术运算符转换&quot;">​</a></h2><p>算术运算符主要包括<code>+、-、*、/</code>，除了<code>+</code>运算符外，其余算术运算符都针对的是数字number，也就是说运算双方都必须是或转换为数字，这个相对来说简单直接套上面的表格即可，而<code>+</code>运算符最为特殊，<code>+</code>不仅可以进行算术运算也可以进行字符串的拼接，同时也是最常见的隐式转换。</p><h3 id="减乘除" tabindex="-1">减乘除 <a class="header-anchor" href="#减乘除" aria-label="Permalink to &quot;减乘除&quot;">​</a></h3><p>参与双方若是基础类型都会转换为<code>number</code>类型，而一方为<u>引用类型时会先进行内部拆箱转换成<strong>最兼容number类型的基本类型</strong></u>，下面用一段代码加深下印象：</p><ol><li>string转number</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 0</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 0</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">1a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这里<code>&#39;1&#39;</code>会涉及到<code>string =&gt; number</code>的转换，从上面的表格中得到转换值为<code>1</code>，而<code>&#39;1a&#39;</code>转换后并不能兼容数字所以是<code>NaN</code>。</p><ol start="2"><li>boolean转number</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;">  // 1</span></span>
<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 1</span></span>
<span class="line"><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;">  // 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>true转换为1，false转换为0。</p><ol start="3"><li>undefined、null转number</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // -1</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>undefined转换为NaN，null转换为0。</p><ol start="4"><li>对象类型转number</li></ol><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // -1</span></span>
<span class="line"><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">*</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 0</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 0</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">() </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // 1577836799999</span></span>
<span class="line"><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">^</span><span style="color:#BABED8;">\\w</span><span style="color:#C3E88D;">+</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">i</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;">  // NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>对象类型会根据<code>OrdinaryToPrimitive</code>拆箱规则进行转换为基础类型number类型，然后进行计算。</p><p>以上便是<code>-、*、/</code>运算符转换为number类型的规则，比较简单。</p><h3 id="加运算" tabindex="-1">加运算 <a class="header-anchor" href="#加运算" aria-label="Permalink to &quot;加运算&quot;">​</a></h3><p>加法运算最为特殊同时也是类型转换最多的，不仅可以进行算术运算也可以进行字符串的拼接。其转换规则为：</p><ol><li>若一方是<code>string</code>类型，则另一方也会转换为字符串，进行字符串的拼接</li><li>若一方为<code>number</code>类型，另一方为原始类型，将其转换为number类型，进行算术相加。</li><li>若一方为<code>number</code>类型，另一方为引用类型，将其拆箱转换为基本类型后，进行字符串的拼接。</li></ol><blockquote><p>以上转换规则优先级从高到低进行转换。</p></blockquote><p>下面用几个例子演示这些规则：</p><p>转换规则1：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> // &#39;1&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // &#39;true&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">str</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> undefined</span><span style="color:#676E95;font-style:italic;"> // &#39;strundefined&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> null</span><span style="color:#676E95;font-style:italic;"> // &#39;null&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> [] </span><span style="color:#676E95;font-style:italic;">// &#39;&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// &#39;1,2,3&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;"> // &#39;[object Object]&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// &#39;function(){}&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>转换规则2：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> // 2</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> // 2</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> null</span><span style="color:#676E95;font-style:italic;"> // 1</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> undefined</span><span style="color:#676E95;font-style:italic;"> // NaN</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>转换规则3：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> [] </span><span style="color:#676E95;font-style:italic;">// &#39;1&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">] </span><span style="color:#676E95;font-style:italic;">// &#39;11,2&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){}</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// &#39;1function(){}&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// &#39;1[objectObject]&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">() </span><span style="color:#676E95;font-style:italic;">// &#39;1Fri Dec 02 2020 11:40:48 GMT+0800 (中国标准时间)&#39;</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> RegExp</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">\\s</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">ig</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// &#39;1/s/gi&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>以上便是加法的隐式转换，根据上面三条规则的优先级进行转换，基础不同类型转换的值可以根据上面的表格进行判断，引用类型根据拆箱规则结合转换优先级即可。</p><h2 id="逻辑运算转换" tabindex="-1">逻辑运算转换 <a class="header-anchor" href="#逻辑运算转换" aria-label="Permalink to &quot;逻辑运算转换&quot;">​</a></h2><h3 id="运算转换" tabindex="-1">!运算转换 <a class="header-anchor" href="#运算转换" aria-label="Permalink to &quot;!运算转换&quot;">​</a></h3><p>逻辑运算的转换常见的就是<code>!</code>和<code>==</code>的转换，相对来说非常简单。一般像<code>null、undefined、0、&#39;&#39;、NaN、false</code>等为false外，其余的都是true（如：<code>[]、{}</code>等等）。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">!null</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#89DDFF;">!undefined</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#89DDFF;">!NaN</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">[] </span><span style="color:#676E95;font-style:italic;">// false</span></span>
<span class="line"><span style="color:#89DDFF;">!{}</span><span style="color:#676E95;font-style:italic;"> // false</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="运算转换-1" tabindex="-1">==运算转换 <a class="header-anchor" href="#运算转换-1" aria-label="Permalink to &quot;==运算转换&quot;">​</a></h3><p><code>==</code>转换规则一般总结为一下五条：</p><ul><li><code>NaN</code>和任何其他类型(包括自己)比较值都是false。</li><li><code>Boolean</code>和其他类型比较时，自己转化为<code>Number</code>类型然后进行比较.</li><li><code>Number</code>和<code>String</code>类型比较，将<code>String</code>类型转换为<code>Number</code>类型后进行比较。</li><li><code>undefined</code>除了和<code>null</code>比较结果为true外，其余的比较都是false。</li><li>原始值和引用类型进行比较时，引用类型根据拆箱规则转换成基础类型后进行比较。</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> NaN</span><span style="color:#676E95;font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#89DDFF;">NaN</span><span style="color:#89DDFF;"> ==</span><span style="color:#F78C6C;"> 0</span><span style="color:#676E95;font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;"> ==</span><span style="color:#F78C6C;"> 2</span><span style="color:#676E95;font-style:italic;"> // false  true =&gt; 1</span></span>
<span class="line"><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#676E95;font-style:italic;"> // true  &#39;1&#39; =&gt; 1</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> null</span><span style="color:#676E95;font-style:italic;"> // true</span></span>
<span class="line"><span style="color:#89DDFF;">undefined</span><span style="color:#89DDFF;"> ==</span><span style="color:#89DDFF;"> NaN</span><span style="color:#676E95;font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#89DDFF;">null</span><span style="color:#89DDFF;"> ==</span><span style="color:#FF9CAC;"> false</span><span style="color:#676E95;font-style:italic;"> // false</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> // true  [1] =&gt; 1</span></span>
<span class="line"><span style="color:#BABED8;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;"> 1</span><span style="color:#676E95;font-style:italic;"> // false  [1,2] =&gt; &#39;1,2&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>到这里基本上学会了以上的内容，隐式转换就可以搞懂了，其实也没什么难度，把这些转换概念摸清楚就可以游刃有余。</p><h2 id="问题" tabindex="-1">问题 <a class="header-anchor" href="#问题" aria-label="Permalink to &quot;问题&quot;">​</a></h2><p>有些同学可能看到这里，还没有完全掌握，这里就提供几个小菜，提供给大家练习，看和你的想法一直不，如果一直可以说清楚具体逻辑不，想法有出入那又是问什么？</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{}</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">+</span><span style="color:#BABED8;"> []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>查看结果</summary><p>答案：<code>&#39;[object Object]&#39;</code>，两者首先拆箱转换为基础类型，<code>{} =&gt; [object Object]</code>、<code>[] =&gt; &#39;&#39;</code>然后进行字符串拼接</p></details><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">==</span><span style="color:#BABED8;"> []</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>查看结果</summary><p>答案：false，这里不会进行拆箱，类型相同的变量会直接比较，两者都是引用类型，地址不同不会相等</p></details><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">==</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">[]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><details class="details custom-block"><summary>查看结果</summary><p>答案：true，<code>![]</code>先转换转换为false，<code>[]</code>进行拆箱变成0，<code>false</code>在转换成0</p></details><p>这里笔者发现一个有趣的问题，看看通过上面的知识你能解决吗：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 请让变量a满足以下条件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (a </span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> a </span><span style="color:#89DDFF;">==</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><details class="details custom-block"><summary>查看结果</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">a </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">  valueOf</span><span style="color:#89DDFF;">:()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> a</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">++</span><span style="color:#BABED8;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>以上就是解决方案，是不是很简单。 首先要想a同时满足<code>1、2、3</code>的值，直接排除掉基础类型值，那么a一定是个引用类型，引用类型和基础类型的<code>==</code>比较，会通过拆箱规则转换，那么就会执行<code>valueOf、toString</code>方法，又根据拆箱优先级会先执行<code>valueOf</code>方法，那么在此方法做文章就可以了，每次读取值时进行自加，这样就会满足<code>1、2、3</code></p></details><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本篇主要讲了JS怎么进行隐式转换的，通过拆箱和装箱了解到JS引擎对程序的包容性还是很高的，学会引用类型根据<code>toPrimitive</code>优先级规则进行转换，也学会了从简单的算术运算到逻辑运算的隐式转换规则。</p><p>相关参考:</p><ul><li><a href="https://tc39.es/ecma262/#sec-toprimitive" target="_blank" rel="noreferrer">https://tc39.es/ecma262/#sec-toprimitive</a></li><li><a href="https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/node_modules/es-abstract/2020/OrdinaryToPrimitive.js;l=16?q=OrdinaryToPrimitive&amp;sq=&amp;ss=chromium" target="_blank" rel="noreferrer">https://source.chromium.org/chromium/chromium/src/+/main:third_party/devtools-frontend/src/node_modules/es-abstract/2020/OrdinaryToPrimitive.js;l=16?q=OrdinaryToPrimitive&amp;sq=&amp;ss=chromium</a></li><li><a href="https://www.youtube.com/watch?v=XYFg6_V-c9Q" target="_blank" rel="noreferrer">https://www.youtube.com/watch?v=XYFg6_V-c9Q</a></li></ul>`,97);function i(y,F,D,d,u,b){const a=n("Reward"),l=n("Gitalk");return t(),p("div",null,[c,s(a),s(l)])}const B=e(r,[["render",i]]);export{E as __pageData,B as default};
