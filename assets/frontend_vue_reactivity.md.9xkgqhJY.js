import{_ as p,c as o,J as s,V as e,o as c,G as n}from"./chunks/framework.SV1ROkXV.js";const E=JSON.parse('{"title":"Vue源码分析之响应式原理","description":"本文结合源码具体实现和手写响应式来搞懂Vue的响应式原理是如何运作的,以及Vue2版本的响应式缺陷和解决手段，最后就是Vue3的响应式原理以及和Vue2的对比优势","frontmatter":{"title":"Vue源码分析之响应式原理","description":"本文结合源码具体实现和手写响应式来搞懂Vue的响应式原理是如何运作的,以及Vue2版本的响应式缺陷和解决手段，最后就是Vue3的响应式原理以及和Vue2的对比优势","keywords":"Vue响应式,vue reactivity,vue3响应式,vue2响应式,vue2响应式原理,Vue3响应式原理,vue Proxy,Reflect","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-vue.png"},"headers":[],"relativePath":"frontend/vue/reactivity.md","filePath":"frontend/vue/reactivity.md","lastUpdated":1709440279000}'),r={name:"frontend/vue/reactivity.md"},t=e(`<h1 id="vue源码分析之响应式原理" tabindex="-1">Vue源码分析之响应式原理 <a class="header-anchor" href="#vue源码分析之响应式原理" aria-label="Permalink to &quot;Vue源码分析之响应式原理&quot;">​</a></h1><p>本模块都是vue原理系列文章，其中包含响应式原理、计算属性、侦听函数、编译原理、组件创建及渲染、插槽和状态管理等等相关方面，总之对于vue的使用及核心思想这里都会涉及到。目前vue从主流版本vue2升级到vue3了，因此文章中也会比对两个版本之间同一原理实现差别</p><p>学习vue源码对于每一个使用它的伙伴都很重要，尤其对于面试八股文是一把 🔑 ，但最重要的还是一种<u>透过表象看本质的态度，提高自我技能和成长的过程 💪</u></p><p>源码会涉及到大量的代码，面对大量的代码要学会任务划分，先搞明白自己熟悉的部分如：响应式，然后可以尝试自己手写一遍加强理解。源码体量太大了，千万不要开始就从头到尾分析，这样很难让自己专注于某个功能，啃源码也会非常痛苦。同时也要学会调试某个具体功能，通过调试堆栈也可以很清晰看到流程是怎么样的，当将拆解的模块搞熟搞透了，再看看整体的流程是怎么样的，将会游刃有余</p><blockquote><p>vue系列模块都是深入原理知识，会涉及到大量的分析和调试，因此更新周期会拉长，请耐心等待</p></blockquote><h2 id="vue2分析" tabindex="-1">Vue2分析 <a class="header-anchor" href="#vue2分析" aria-label="Permalink to &quot;Vue2分析&quot;">​</a></h2><p>众所周知vue2是通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="noreferrer">Object.defineProperty</a> 这个API实现响应式的，定义如下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> prop</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> descriptor)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>obj</code>：要定义属性的对象</li><li><code>prop</code>：要定义或修改的属性的名称</li><li><code>descriptor</code>：目标属性所拥有的特性，包含以下可选属性： <ul><li><code>configurable</code>：是否允许属性被删除或修改，默认值为 false</li><li><code>enumerable</code>：是否可被枚举，默认值为 false</li><li><code>value</code>：属性的值，默认值为 undefined</li><li><code>writable</code>：是否可被赋值运算符改变其值，默认值为 false</li><li><code>get</code>：获取函数，默认值为 undefined</li><li><code>set</code>：设置函数，默认值为 undefined</li></ul></li></ul><p>该方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，通常设置属性的 <code>getter</code> 或 <code>setter</code> 函数，从而实现对属性的拦截和控制</p><blockquote><p>本次分析的vue2版本为2.6.11</p></blockquote><h3 id="简单实现" tabindex="-1">简单实现 <a class="header-anchor" href="#简单实现" aria-label="Permalink to &quot;简单实现&quot;">​</a></h3><p>通过一个简单的例子看下效果：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">访问属性：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">设置属性</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> ,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">值</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">      value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(user)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>以上定义了一个<code>user</code>对象，并使用<code>defineReactive</code>方法访问和设置该对象的属性时打印日志，现在我们尝试访问和设置它的属性，以下为实际打印情况： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230510080432330.png" alt=""></p><p>既然可以拦截到对象属性的值访问和修改，也就可以做一些其他的操作；比如改变属性时执行某个方法：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">intro</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#BABED8;">(obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">访问属性：</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 设置属性时执行intro方法</span></span>
<span class="line"><span style="color:#82AAFF;">    intro</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>这样在user的属性改变时，执行intro都可以获取到最新的值。以上有个弊端就是需要将执行方法写死在set里，如果有n个依赖方法要写n个，可以这样简单封装下：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 省略部分代码</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> cbs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 添加待执行的方法</span></span>
<span class="line"><span style="color:#BABED8;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(intro)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Object.defineProperty</span></span>
<span class="line"><span style="color:#82AAFF;">set</span><span style="color:#BABED8;">(newValue) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 现在设置值时，只需要将cbs里的方法执行一遍</span></span>
<span class="line"><span style="color:#BABED8;">	cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">cb</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> cb</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>这样解决了set里写很多执行方法的问题，但再仔细看一看问题又来了，cbs中的执行方法需要手动添加，如果有很多个方法也是需要先写死在里面，如何解决这个问题呢？如果能自动收集需要执行的方法就完美了！你可能有以下几个疑问❓</p><ul><li>如何自动收集：上面借用了<code>Object.defineProperty</code>的set方法执行了cb，同样可以使用get方法，可以在访问属性时对正在执行的方法进行收集</li><li>收集的对象范围：当然是谁使用了当前对象的属性就收集时，而其他就是没有任何关联性的方法，改变了当前对象什么都不会发生</li></ul><h3 id="依赖自动收集与更新" tabindex="-1">依赖自动收集与更新 <a class="header-anchor" href="#依赖自动收集与更新" aria-label="Permalink to &quot;依赖自动收集与更新&quot;">​</a></h3><p>通过上面实现遗留的问题，接着来看看如何解决并实现它们：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#BABED8;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#BABED8;">(user)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> p1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">【people1】名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> p2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">【people2】名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> cbs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当前正在运行的函数</span></span>
<span class="line diff add"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> activeFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line diff add"><span style="color:#BABED8;">activeFn </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> p1</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#82AAFF;">p1</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">小王</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BABED8;">activeFn </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> p2</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#82AAFF;">p2</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	  // 收集当前正在执行的函数</span></span>
<span class="line diff add"><span style="color:#BABED8;">      cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeFn</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get log: 访问属性 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">当前activeFn为 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> activeFn</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set log: 设置属性 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">当前activeFn为 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> activeFn</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">cb</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> cb</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>上面定义了两个执行方法p1、p2，其中<u>p1使用了name属性，p2使用name、age属性</u>，执行p1时将activeFn设置为p1，代表当前的执行函数为p1；然后将activeFn设置为p2再执行p2，这样执行两者的过程中会访问到user属性，就会触发get函数，然后将当前的activeFn添加到cbs中，这里使用set作为数据结构去重，最终p1和p2都会添加进去。当修改user的属性值时触发set，执行cbs里的方法也就是p1、p2。上面的执行结果如下图：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230510101953597.png" alt=""></p><p>从图中可以看出执行主动p1、p2都会打印正确的值，而且修改了name属性后确实会触发cbs执行。细心的同学会发现，当修改age属性值时，所有的回调p1、p2都执行了，按理说p1只用到name属性不会执行，因为他和age没有任何关联；从以上代码分析我们将对象的每个属性的依赖都添加到了同一个cbs中，并访问set时，执行了所有的cbs，所以才会都执行。解决这个问题就需要针对每个属性做区分或者分开存储，下面我们进行简单改造：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line diff remove"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> cbs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> cbs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactives</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff remove"><span style="color:#BABED8;">      cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeFn</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#BABED8;">        cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      }</span></span>
<span class="line diff add"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> deps</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#BABED8;">      deps</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeFn</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get log: 访问属性 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">当前activeFn为 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> activeFn</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">set log: 设置属性 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">当前activeFn为 </span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> activeFn</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line diff remove"><span style="color:#BABED8;">      cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">cb</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> cb</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> deps</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cbs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#BABED8;">      deps</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> dep</span><span style="color:#F07178;">()) </span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>上面将cbs改成map结构，每个key对应一个set数据结构，针对对象的不同key单独来存储对应的cbs，这样在更新某个属性的值时只会触发对应key的所有cb执行，来看下改造后的执行结果：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230510134034308.png" alt=""></p><p>从上面执行结果可以看到改造后当修改age时只会执行p2函数，而修改了name属性值后p1、p2都会被执行，这符合我们的预期</p><p>以上基本上实现了依赖的自动收集和派发更新，可能有人说还需要手动执行<code>activeFn</code>的赋值操作，我的回答是必须的，当然在以上的例子中确实每次都要手动赋值，我们并没有实现递归组件创建等过程，这里只是演示一下如何触发依赖收集；不管怎么在依赖收集前都是要主动执行一次，当使用Vue时也是如此：<code>new Vue</code>，当new时内部会触发一系列操作如：模板编译、依赖收集等等，递归创建组件时也会不断地进行依赖的收集，总之都会有一次主动执行</p><p>现在简单用官方的方式实现一下，<u>支持深度嵌套，其主要涉及到observe、Observer、Dep、Watcher等函数和对象</u>：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 步骤：initData =&gt; observe =&gt; defineReactive =&gt; dep =&gt; watcher =&gt; update =&gt; render</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 渲染函数，把它当成vue的组件render函数</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> render</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">renderFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> renderFn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watcher</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">renderFn</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">renderFn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watcher</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    renderFn</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">watcher</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#BABED8;">  Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> watcher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">  renderFn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每个组件渲染函数都有一个watcher，watcher中包含了被dep收集的所有dep</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  deps</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Dep</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  addDep</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">    dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addSub</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;"> ()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">cb</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 每个属性都有自己的Dep对象，用来收集watcher，当值变化时通知所有的watcher进行更新</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  static</span><span style="color:#F07178;"> target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  subs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Watcher</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  addSub</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">sub</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">includes</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">sub</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">sub</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  depend</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addDep</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  notify</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">subs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 拦截对象入口</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> observe</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 保证只会生成一次</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Observer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__ob__</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用Observer对象用来标识当前属性已经被拦截了，也就是有了dep对象</span></span>
<span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  dep</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#BABED8;">    Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">__ob__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">      configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#BABED8;"> self</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">walk</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 深度遍历对象</span></span>
<span class="line"><span style="color:#F07178;">  walk</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#FFCB6B;">Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">toString</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">[object Object]</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">        defineReactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 待拦截的对象，支持深度嵌套</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  friends</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    total</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 3</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 响应式核心</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> k</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">get</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> setter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">getter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    val</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> obj</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 每个被observe过的对象都会有一个 闭包 dep对象，并且有一个\`__ob__\`属性</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">  observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">setter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        val</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newVal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        setter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newVal</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#BABED8;">      dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// render前先对 user 对象进行拦截</span></span>
<span class="line"><span style="color:#82AAFF;">observe</span><span style="color:#BABED8;">(user)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 模拟每个组件的真实渲染数据</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> page1 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">页面1： =====&gt; 我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> page2 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">页面2： =====&gt; 年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，我有</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">total</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">朋友</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> page3 </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">页面3： =====&gt; 我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，我有</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">total</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">朋友</span><span style="color:#89DDFF;">\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 模拟vue的组件递归渲染</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(page1)</span></span>
<span class="line"><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小李</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(page2)</span></span>
<span class="line"><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">校长</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(page3)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br><span class="line-number">100</span><br><span class="line-number">101</span><br><span class="line-number">102</span><br><span class="line-number">103</span><br><span class="line-number">104</span><br><span class="line-number">105</span><br><span class="line-number">106</span><br><span class="line-number">107</span><br><span class="line-number">108</span><br><span class="line-number">109</span><br><span class="line-number">110</span><br><span class="line-number">111</span><br><span class="line-number">112</span><br><span class="line-number">113</span><br><span class="line-number">114</span><br><span class="line-number">115</span><br><span class="line-number">116</span><br><span class="line-number">117</span><br><span class="line-number">118</span><br><span class="line-number">119</span><br><span class="line-number">120</span><br><span class="line-number">121</span><br><span class="line-number">122</span><br><span class="line-number">123</span><br><span class="line-number">124</span><br><span class="line-number">125</span><br><span class="line-number">126</span><br><span class="line-number">127</span><br><span class="line-number">128</span><br><span class="line-number">129</span><br><span class="line-number">130</span><br><span class="line-number">131</span><br><span class="line-number">132</span><br><span class="line-number">133</span><br><span class="line-number">134</span><br><span class="line-number">135</span><br><span class="line-number">136</span><br><span class="line-number">137</span><br><span class="line-number">138</span><br><span class="line-number">139</span><br><span class="line-number">140</span><br><span class="line-number">141</span><br><span class="line-number">142</span><br><span class="line-number">143</span><br><span class="line-number">144</span><br><span class="line-number">145</span><br><span class="line-number">146</span><br><span class="line-number">147</span><br><span class="line-number">148</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230512085229815.png" alt=""></p><p>以上便是用最最简洁的代码还原了下官方的实现过程，趁热打铁来看看vue对其真正的实现过程</p><h3 id="官方实现" tabindex="-1">官方实现 <a class="header-anchor" href="#官方实现" aria-label="Permalink to &quot;官方实现&quot;">​</a></h3><p>以上我们使用<code>Object.defineProperty</code>简单的实现了响应式的原理，从设计模式看其也是典型<code>发布-订阅</code>模式，在Vue中主要通过<code>Dep</code>、<code>Watcher</code>实现了发布订阅模型，每个对象的属性都有一个对应的Dep，Dep中收集了所有需要派发更新的回调即：<code>Watcher</code>，在属性更新时Dep会通知相关的Watcher进行更新，Watcher会进行页面的重新渲染，这就是为什么当修改数据时页面也会实时更新的原因</p><h4 id="整体流程" tabindex="-1">整体流程 <a class="header-anchor" href="#整体流程" aria-label="Permalink to &quot;整体流程&quot;">​</a></h4><p>这里我先简述一下vue响应式的整体过程，然后再以一张响应式模型图描述整个流程。</p><blockquote><p>首先要明白<u>vue的更新粒度是组件级别</u>，也就是数据更新只会触发当前组件重新渲染，而不是整个应用。这种更新方式可以提高渲染性能，因为只需要对变化的组件进行更新，而不需要重新渲染整个应用</p></blockquote><ul><li>初始化：以new Vue为例开始创建根组件，创建组件过程会对相关属性的初始化，比如data、props等等</li><li>对象响应化：拦截data进行改造，也就是getter、setter进行拦截，并生成对应的dep（完成对属性拦截的相关逻辑）</li><li>挂载：执行挂载时<code>$mount</code>，过程中可能会对模板进行编译</li><li>render：render函数生成vnode，最后patch整个vnode生成dom</li></ul><p>其中在<u>render过程中每个组件都会生成对应的watcher（<code>渲染watcher</code>），组建在访问内部的数据（data、computed等等）时，会触发<code>getter</code>函数然后通过当前属性的dep收集当前的watcher<code>渲染watcher</code>，这样就完成了依赖的收集（这里省略了computed、watcher等处理逻辑，下一篇讲），当然组件创建或render是个递归过程，因此<code>targetWatcher</code>（用来告诉Dep当前需要收集的Watcher）一定指向当前的组件渲染watcher</u>；当改变某个对象的属性值时便会触发<code>setter</code>，所持有的dep将会通知收集的watcher进行更新，watcher再次执行render更新页面。用一张图来描述这个过程：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/vue2-reactive-2020051123234.svg" alt="vue响应式模型"></p><div class="img-title"> Vue响应式模型 </div><h4 id="具体实现" tabindex="-1">具体实现 <a class="header-anchor" href="#具体实现" aria-label="Permalink to &quot;具体实现&quot;">​</a></h4><p>vue的响应式实现大体涵盖了Observe、Dep、Watcher等方法与对象，这里根据流程给出对应的代码，读者只需了解过程是怎么样的，每段代码的含义知道大概意思即可</p><ol><li>首先组件的初始化会执行Vue的<code>_init</code>实例方法，内部通过<code>initState</code>进行组件相关属性的设置，其中就包含了对data的拦截：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/init 57行</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_init</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略一大堆代码...</span></span>
<span class="line"><span style="color:#82AAFF;">  initState</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/state 54行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> initState</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> opts</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">opts</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">    initData</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/state 114行</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> initData</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  data</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_data</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> typeof</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> ?</span><span style="color:#82AAFF;"> getData</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> data</span><span style="color:#89DDFF;"> ||</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 观测观测组件data，也就是进行setter、getter拦截</span></span>
<span class="line"><span style="color:#82AAFF;">  observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">,</span><span style="color:#FF9CAC;"> true</span><span style="color:#676E95;font-style:italic;"> /* asRootData */</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><ol start="2"><li>通过observe入口为每一个级别对象生成对应的Observer对象，并深度遍历实现对组件data属性的拦截：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/index 110行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> observe</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> asRootData</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;">boolean</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> void</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Observer</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/index 37行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">    def</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">__ob__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">walk</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 深度遍历对象</span></span>
<span class="line"><span style="color:#F07178;">  walk</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> keys</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> keys</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      defineReactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> keys</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // ....</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/index 135行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getOwnPropertyDescriptor</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // cater for pre-defined getter/setters</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">get</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> setter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> property</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">set</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> childOb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">shallow</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    enumerable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    configurable</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#82AAFF;">    get</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactiveGetter</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 收集watcher</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#82AAFF;">    set</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactiveSetter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newVal</span><span style="color:#89DDFF;"> ===</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> ||</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">newVal</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> newVal</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">setter</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        setter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newVal</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">        val</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> newVal</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#BABED8;">      childOb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">shallow</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newVal</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 通知更新</span></span>
<span class="line"><span style="color:#BABED8;">      dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br></div></div><ol start="3"><li>拦截对象的每个属性都会有一个<code>闭包Dep</code>，这个闭包Dep很重要，在getter/setter用来和watcher进行关联，来看看Dep的实现(Watcher实现后面看)：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/dep</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Dep的实现很简单，省略了部分代码</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 全局唯一激活的 Watcher</span></span>
<span class="line"><span style="color:#C792EA;">  static</span><span style="color:#F07178;"> target</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;">Watcher</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 用来存放 存放了当前Dep的 所有watcher</span></span>
<span class="line"><span style="color:#F07178;">  subs</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Watcher</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  addSub</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">sub</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">sub</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 收集依赖</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // Dep.Watcher会添加当前的Dep</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 同时Watcher的addDep也会执行Dep的addSub将watcher添加到当前Dep（看Watcher方法）</span></span>
<span class="line"><span style="color:#F07178;">  depend</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addDep</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 派发更新，对象的属性值改变时会通过自己的dep.notify通知所有的watcher执行update</span></span>
<span class="line"><span style="color:#F07178;">  notify</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">subs</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">subs</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#676E95;font-style:italic;">// 这里是用来设置当前的watcher，dep和watcher进行联系的桥梁</span></span>
<span class="line diff add"><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> null;</span><span style="color:#676E95;font-style:italic;">当前的watcher</span></span>
<span class="line diff add"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> targetStack </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">维护wather栈结构</span></span>
<span class="line diff add"><span style="color:#676E95;font-style:italic;">// 进栈、设置当前watcher </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> pushTarget</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;">Watcher</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#BABED8;">  targetStack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BABED8;">  Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">}</span></span>
<span class="line diff add"><span style="color:#676E95;font-style:italic;">// 出栈、当前watcher为栈最后一个</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> popTarget</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#BABED8;">  targetStack</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">pop</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BABED8;">  Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetStack</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">targetStack</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> -</span><span style="color:#F78C6C;"> 1</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><ol start="4"><li>上面我们也说了vue响应式主要由dep、watcher等方法完成，Dep这里有了，目前就差一个watcher了，那它又是怎么来的呢？不要忘记上面说过组件在渲染的过程中会执行render函数，每个组件都会生成对应的渲染watcher，而渲染又是从mount开始的：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 执行了$mount才会真正的进行页面渲染（或者el参数不为空）</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#82AAFF;"> Vue</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#82AAFF;"> render</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;font-style:italic;"> h</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> h</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">#app</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>来从源码看看<code>$mount</code>的执行位置：vue针对不同的环境做了一些参数处理，这里我们看浏览器环境下</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// $mount =&gt; 模板编译(compiler-runtime) =&gt; mountComponent =&gt; render =&gt; createElement(VNode，此过程会获取当前组件数据，触发对象的getter对当前渲染watcher进行收集) =&gt; patch</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/platforms/web/entry-runtime-with-compiler 20行</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> mount </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$mount</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  el</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Element</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  el</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> query</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">$options</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 用户没有提供 render 函数时，根据提供的template/el 的innerHTML 模板进行编译，最后生成 render函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">render</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> template</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">template</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">template</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> template</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">string</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">template</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">charAt</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">#</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">          template</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> idToTemplate</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">template</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">template</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">nodeType</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        template</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> template</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHTML</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#89DDFF;"> this;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">el</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      template</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> getOuterHTML</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">el</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">template</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 模板编译 生成 render 函数</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> render</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> staticRenderFns</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> compileToFunctions</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">        template</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        {</span></span>
<span class="line"><span style="color:#F07178;">          outputSourceRange</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> process</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">env</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">NODE_ENV</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">production</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          shouldDecodeNewlines</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">          shouldDecodeNewlinesForHref</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          delimiters</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">delimiters</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">          comments</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">comments</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        },</span></span>
<span class="line"><span style="color:#89DDFF;">        this</span></span>
<span class="line"><span style="color:#F07178;">      )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 将 render 函数赋值给 当前示例的render属性</span></span>
<span class="line"><span style="color:#BABED8;">      options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">render</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> render</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      options</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">staticRenderFns</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> staticRenderFns</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 最后执行mount</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> mount</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> hydrating</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// src/platforms/web/runtime/index 37行</span></span>
<span class="line"><span style="color:#FFCB6B;">Vue</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$mount</span><span style="color:#89DDFF;"> =</span><span style="color:#C792EA;"> function</span><span style="color:#89DDFF;"> (</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  el</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Element</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  el</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> inBrowser</span><span style="color:#89DDFF;"> ?</span><span style="color:#82AAFF;"> query</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">el</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> undefined;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 执行mount真正执行的函数 mountComponent</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#82AAFF;"> mountComponent</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> hydrating</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br></div></div><ol start="5"><li>揭开组件的渲染watcher真面目：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/instance/lifecycle.js 141行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> mountComponent</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  el</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ?</span><span style="color:#FFCB6B;">Element</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  hydrating</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> boolean</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">$el</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> el</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> updateComponent</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这个函数很重要，当组件的data更新时通知渲染watcher更新，watcher会再次执行当前函数</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里只需知道：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //     1. render函数会生成vnode此过程会获取到对应的对象就会触发getter</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  //     2. update用来将新的vnode渲染成dom</span></span>
<span class="line"><span style="color:#82AAFF;">  updateComponent</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_update</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">_render</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> hydrating</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建组件的渲染watcher，这里是最外层的watcher</span></span>
<span class="line"><span style="color:#89DDFF;">  new</span><span style="color:#82AAFF;"> Watcher</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">    vm</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    updateComponent</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> // watcher更新时会触发</span></span>
<span class="line"><span style="color:#BABED8;">    noop</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#F07178;">      before</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_isMounted</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_isDestroyed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">          callHook</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">beforeUpdate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      },</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#FF9CAC;">    true</span><span style="color:#676E95;font-style:italic;"> /* isRenderWatcher */</span></span>
<span class="line"><span style="color:#F07178;">  )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><p>上面执行<code>mountComponent</code>方法时会<u>创建一个watcher对象，并将重要的<code>updateComponent</code>参数传进去；先来看看updateComponent函数的作用，他通过执行render生成vnode，并将vnode传递给update进行patch页面渲染真实dom，在数据更新时重新渲染也就是重新执行当前的updateComponent方法</u>，现在就来看看组件data和watcher是如何联系起来的。先来分析下watcher的执行过程：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/watcher</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 部分代码省略...</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#89DDFF;font-style:italic;"> default</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Watcher</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // expOrFn是外面传进来的 updateComponent 也就会重新页面渲染</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">vm</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Component</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> expOrFn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">,</span><span style="color:#82AAFF;"> cb</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    vm</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">_watchers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">cb</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> cb</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">active</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">deps</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">newDeps</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">depIds</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">newDepIds</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">function</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // getter 变成了 updateComponent</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> expOrFn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 执行get方法</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 设置当前watcher</span></span>
<span class="line"><span style="color:#82AAFF;">    pushTarget</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> vm</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 注意这里 执行 updateComponent 方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // updateComponent 就会执行 render函数，其在生成vnode的过程中</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 会访问组件实例vm中的数据，此时就会触发对象的getter进行依赖收集</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 收集的就是 Dep.target, 也就是当前的 watcher </span></span>
<span class="line"><span style="color:#BABED8;">    value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">vm</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> vm</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">    popTarget</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // 执行完后，复原Dep.Watcher</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">cleanupDeps</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 依赖收集时，dep.depend 会执行当前watcher的addDep 将对象的dep添加进去</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 同时将自己添加到dep中，两者是多对多的关系</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 其实每次添加有个去重的关系，主要是为了避免不必要的渲染，如v-if为false时，页面也没必要渲染，这里不展开讲了</span></span>
<span class="line"><span style="color:#F07178;">  addDep</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> id</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">newDepIds</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">newDepIds</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">newDeps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!this.</span><span style="color:#BABED8;">depIds</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">id</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addSub</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当用户在页面改变值或者其他方法改变某个数据的值时，就会触发对象的setter</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // dep.notify会执行watcher的update方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里只看 queueWatcher，其也就是vue的 异步批量更新 方法，最终会执行watcher的 run方法</span></span>
<span class="line"><span style="color:#F07178;">  update</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 省略...</span></span>
<span class="line"><span style="color:#82AAFF;">    queueWatcher</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // queueWatcher 中会执行此方法，这里只要知道会执行 get 方法即可</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 而get会执行 updateComponent 也就是触发render、patch重新渲染页面</span></span>
<span class="line"><span style="color:#F07178;">  run</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 省略部分代码...</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br></div></div><p>到这里也就讲完了vue的响应式过程，可能对源码不熟悉的可能就有点懵。如果你不熟悉的话我推荐你断点调试一个最简单的vue组件，然后将上面的代码每个位置打上断点，自己过几遍就应该明白了</p><h3 id="数组实现" tabindex="-1">数组实现 <a class="header-anchor" href="#数组实现" aria-label="Permalink to &quot;数组实现&quot;">​</a></h3><p>Vue通过用<code>Object.defineProperty</code>实现了对对象的的拦截，但对于值为数组类型<code>Array</code>或者添加新属性时，此方法都无法监听到值的改变。我们接着上面自己实现的响应式举个例子：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 改变friends 结构，添加 intro 新方法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  friends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">小红</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小李</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> intro </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，我的朋友：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">join</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">、</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">render</span><span style="color:#BABED8;">(intro)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 当分别改变 name 和 friends 的值时，只有name改变才会重新执行 intro</span></span>
<span class="line"><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">鲁班七号</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">小卫</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230513110401742.png" alt=""> 上面我们验证了确实无法对数组修改进行拦截，那么Vue是如何实现对数组拦截的呢❓答案就是改写数组的原型方法，改写后就可以实现拦截了，再来看下Observer对象的过程：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/index</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 处理数组</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#676E95;font-style:italic;">// 这里就是改写 array 的原型方法，具体的方法在 arrayMethods中，这里就是替换这个值的原型，而不是Array整体原型</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">hasProto</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#82AAFF;">        protoAugment</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arrayMethods</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#82AAFF;">        copyAugment</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arrayMethods</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arrayKeys</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      }</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">observeArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 上面我们只说了这里，用来处理嵌套对象</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#82AAFF;">walk</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#676E95;font-style:italic;">// 如果数据中的数据是对象 对每个对象拦截</span></span>
<span class="line diff add"><span style="color:#F07178;">  observeArray</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">items</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> items</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#82AAFF;">      observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">items</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>具体来看数组方法的改造实现：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// src/core/observer/array</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arrayProto </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> arrayMethods </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#BABED8;">(arrayProto)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 待改写的方法</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> methodsToPatch </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">pop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">shift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">sort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reverse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">methodsToPatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">method</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 原始方法</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> original</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arrayProto</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">method</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#82AAFF;">  def</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arrayMethods</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> method</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> mutator</span><span style="color:#89DDFF;"> (...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 通过原始方法拿到结果</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> original</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取当前数组的dep</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> ob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">__ob__</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> inserted</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    switch</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">method</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        inserted</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> args</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        break</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#BABED8;">        inserted</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">        break</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果是 新增 数据时，对新增的数据再进行 观察，因为新增的值可能是对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">inserted</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">ob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observeArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">inserted</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 然后通知更新，这是关键，这里ob是自己的ob，在getter中就是childOb</span></span>
<span class="line highlighted"><span style="color:#BABED8;">    ob</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>这里总结下上面方法改写，也就是当你执行数组的方法时如：<code>arr.push</code>时，内部通过<code>ob.dep.notify</code>手动通知更新，这样重新渲染页面就会看到新的数据了。你可能对当前dep是哪个dep，数组的dep又是如何收集到watcher的？如下：<code>ob.dep.notify</code>的dep是<code>[1, 2, 3]</code>自己的dep，而不是<code>defineProperty</code>中的那个闭包dep</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">	friends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 3</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 数组改写方法中通过this拿到ob，__ob__就是Observer对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> ob </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">__ob__</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Dep</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 这里每个值都会生成自己的ob，也可以通过 value.__ob__获取到</span></span>
<span class="line"><span style="color:#82AAFF;">    def</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">__ob__</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> this</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>那在何时进行依赖收集的呢❓</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 省略....</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 这里对值继续进行oberve，当是数组时在Observer中就会对数组进行改写</span></span>
<span class="line diff add"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> childOb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">shallow</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">    get</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactiveGetter</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">childOb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        	// 这里是关键，当访问某个属性时，如果当前属性时数组，那么就会通过他自己的</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">        	// ob中的dep进行依赖收集，你可以认为这里就是为数组准备的</span></span>
<span class="line diff add"><span style="color:#BABED8;">          childOb</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">          if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#82AAFF;">            dependArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">          }</span></span>
<span class="line"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#82AAFF;">    set</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactiveSetter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    	// 属性值改变时对新的值重新进行观测，并改变childOb</span></span>
<span class="line diff add"><span style="color:#BABED8;">      childOb</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">shallow</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newVal</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>可能上面一时半会有点绕，还是一样自己多调试几遍简单的demo就会明白的，下面我们再对自己实现的进行改造，让它支持数组：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> Observer</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  	// 处理数组，改写原型方法</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#BABED8;">      Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setPrototypeOf</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> arrayMethods</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">observeArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      this.</span><span style="color:#82AAFF;">walk</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#F07178;">  observeArray</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">items</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> items</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#BABED8;"> l</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> i</span><span style="color:#89DDFF;">++</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#82AAFF;">      observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">items</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">i</span><span style="color:#F07178;">])</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略其他...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> arrayProto </span><span style="color:#89DDFF;">=</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> const</span><span style="color:#BABED8;"> arrayMethods </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">create</span><span style="color:#BABED8;">(arrayProto) </span></span>
<span class="line diff add"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> methodsToPatch </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">pop</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">shift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">sort</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">reverse</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#BABED8;">methodsToPatch</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">method</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> original</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> arrayProto</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">method</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> any</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">arrayMethods</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> method</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#F07178;">    value</span><span style="color:#89DDFF;">(...</span><span style="color:#BABED8;font-style:italic;">args</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> original</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">apply</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this,</span><span style="color:#BABED8;"> args</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> ob</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">__ob__</span></span>
<span class="line diff add"><span style="color:#C792EA;">      let</span><span style="color:#BABED8;"> inserted</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      switch</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">method</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">push</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">unshift</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line diff add"><span style="color:#BABED8;">          inserted</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> args</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">          break</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        case</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">splice</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span></span>
<span class="line diff add"><span style="color:#BABED8;">          inserted</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> args</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">slice</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">2</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">          break</span></span>
<span class="line diff add"><span style="color:#89DDFF;">      }</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">inserted</span><span style="color:#F07178;">) </span><span style="color:#BABED8;">ob</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">observeArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">inserted</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#BABED8;">      ob</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">() </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> result</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> defineReactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#BABED8;font-style:italic;"> k</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> childOb</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> observe</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">defineProperty</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">childOb</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#BABED8;">          childOb</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">depend</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">        }</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;"> ?</span><span style="color:#BABED8;"> getter</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">call</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br></div></div><p>修改后再看看结果确实符合预期，当修改friends的值时也会执行对应的回调： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230513130429238.png" alt=""> 细心的读者应该会发现，使用索引修改值时却没有执行回调，是的！这也是vue的问题，虽然内部拦截了数组的一些方法，但却无法拦截通过索引修改值，这是硬伤也是<code>Object.defineProperty</code>的缺陷。为了解决这个问题，vue提供了<code>$set</code>方法，接下来带着好奇往下看吧</p><h3 id="set原理" tabindex="-1">$Set原理 <a class="header-anchor" href="#set原理" aria-label="Permalink to &quot;$Set原理&quot;">​</a></h3><p>其实$set的实现没有那么神秘，原理非常简单：<u>主动进行依赖收集并触发更新</u>，我们直接看看它的实现过程：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Array</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> val</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 目标对象是 数组时，那么key就是索引， 判断索引是否合法，最终还是调用了 splice方法</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 所以 this.$set(arr, 2, &#39;something&#39;) 本质还是调用了splice方法，当然这个方法已经改写了</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">Array</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#82AAFF;"> isValidArrayIndex</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Math</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">max</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">splice</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 如果目标不是数组对象</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 若key已经存在了，直接返回啥都不做</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> in</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#89DDFF;"> !</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> in</span><span style="color:#FFCB6B;"> Object</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> ob</span><span style="color:#89DDFF;"> =</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;font-style:italic;"> as</span><span style="color:#FFCB6B;"> any</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">__ob__</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 目标对象没有__ob__证明不是响应式对象，直接返回不做处理</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">ob</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 主动将key属性变成响应式，触发依赖收集</span></span>
<span class="line"><span style="color:#82AAFF;">  defineReactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ob</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> val</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 通知更新</span></span>
<span class="line"><span style="color:#BABED8;">  ob</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">notify</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><p>仔细看看这段代码相信你已经可以搞明白它是如何运作的了，除了<code>$set</code>外Vue还提供了<code>$delete</code>方法当删除某个属性时通知更新视图，其原理和set道理一样，自己看看吧</p><p>到这里关于Vue2的响应式过程就结束了，还有一些<code>computed</code>、<code>watch</code>的实现没有讲我们放在<a href="/frontend/vue/computed-watch.html">「计算属性与侦听函数」</a>本篇，相信现在你应该对Vue2的响应式有一定的认识了，当然需要你多动动手多写几个例子，然后多调试一下思路就会很清晰了</p><h2 id="vue3分析" tabindex="-1">Vue3分析 <a class="header-anchor" href="#vue3分析" aria-label="Permalink to &quot;Vue3分析&quot;">​</a></h2><p>从Vue2到使用Vue3是个无感过程应该很多人也在用了，Vue3最明显的特点就是不再支持IE了，这里最根本原因是内部使用了一些新的语言特性，这些特性只被现代浏览器支持，比如：响应式原理本质是使用了Proxy、Reflect等API，这些API原生支持属性拦截，不需要再兼容大量代码，因此速度更快、性能更好</p><p>Vue3的官方仓库全部采用了typescript开发，类型提示更加友好。采用monorepo方式将核心功能拆分独立的包，提供给用户更多的选择权，同时也更有利于tree shaking。这里我们先来看看Vue3的响应式是如何实现的吧👇</p><blockquote><p>本次分析的vue3版本为3.3.0</p></blockquote><h3 id="核心api" tabindex="-1">核心API <a class="header-anchor" href="#核心api" aria-label="Permalink to &quot;核心API&quot;">​</a></h3><p>在Vue3中响应式的核心原理不再使用<code>Object.property</code>，而由<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy" target="_blank" rel="noreferrer">Proxy</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="noreferrer">Reflect</a>代替，后者是天生的元编程性能更好，如果你对这两者API还不太熟悉的话，可以先阅读我的<a href="/frontend/js/meta-coding.html">「元编程」</a>一文</p><p>举个简单例子看下这两个API的强大：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 源对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 代理对象</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> proxyUser </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Proxy</span><span style="color:#BABED8;">(user</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">访问了：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#F07178;">  set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> newValue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">设置 </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 的值由 </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">target[key]</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> 改为 </span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">newValue</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514161918330.png" alt=""> 从上面的例子可以看到使用<code>Proxy</code>可以对对象进行get/set拦截，并且支持对未初始化的属性进行拦截(如上id属性)，我们知道新属性对于Object.defineProperty是拦截不到的，而proxy却可以优雅的解决掉这个问题。Reflect方法提供了多个静态方法，用来获取或设置原对象的值，更多关于两者的使用这里就不再多说，接下来我用最简单的代码同样实现上面自己实现的响应式</p><h3 id="简单实现-1" tabindex="-1">简单实现 <a class="header-anchor" href="#简单实现-1" aria-label="Permalink to &quot;简单实现&quot;">​</a></h3><p>其实<u>响应式万变不离其宗，通过对对象的get/set进行拦截，获取对象属性时对依赖进行收集，修改对象属性时派发更新，收集的目标是全局唯一正在运行的函数</u>。也就是说每次运行一个函数时都会将其设置为正在运行的函数，然后其访问某个属性时，这个属性就会收集当前运行函数，有多少个运行函数就会收集多少个，那么当值被修改时就会通知当前属性的所有依赖进行更新，也就会让这些函数重新执行一遍。下面看下实现过程：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 当前正在运行的函数</span></span>
<span class="line"><span style="color:#C792EA;">let</span><span style="color:#BABED8;"> activeEffect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> null</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 副作用函数用来修改 activeEffect 的值</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> effect</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">fn</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Function</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  activeEffect</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> fn</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 主动执行一次，函数内部访问对象属性时就会触发依赖收集</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  activeEffect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> null;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 依赖收集集合</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> targetMap </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WeakMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Map</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> Set</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Function</span><span style="color:#89DDFF;">&gt;&gt;&gt;</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 收集依赖</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> track</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#F07178;">()))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Set</span><span style="color:#F07178;">()))</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 将当前的 activeEffect 添加到当前 属性的依赖里</span></span>
<span class="line"><span style="color:#BABED8;">    dep</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeEffect</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 派发更新</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> trigger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> deps</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 获取当前 属性 的所有依赖，执行他们</span></span>
<span class="line"><span style="color:#BABED8;">  deps</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> dep</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 拦截对象的get/set等等</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Proxy</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 收集依赖</span></span>
<span class="line"><span style="color:#82AAFF;">      track</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#F07178;">    set</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> newValue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> oldValue</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> target</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 值一样直接返回</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">oldValue</span><span style="color:#89DDFF;"> ===</span><span style="color:#BABED8;"> newValue</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> newValue</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 出发当前key依赖更新</span></span>
<span class="line"><span style="color:#82AAFF;">      trigger</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// p1</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p1：我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// p2</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p2：年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br></div></div><p>下图是执行结果，可以看出每个属性改变时都会正确的派发更新 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514170511277.png" alt=""></p><p>再来看看依赖的结构，从下图可以很明显的看到<code>name</code>只有一个依赖p1，而<code>age</code>就有两个依赖p1、p2 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514170613204.png" alt=""></p><p>以上简单的实现了对对象的拦截，但还存在一个问题那就是没有对深层对象进行拦截，如下代码修改了<code>info.hobby</code>却不会正确的派发更新：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#F07178;">  info</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#F07178;">    hobby</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">篮球</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p3：我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，爱好：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">hobby</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514180158297.png" alt=""></p><h3 id="深层嵌套" tabindex="-1">深层嵌套 <a class="header-anchor" href="#深层嵌套" aria-label="Permalink to &quot;深层嵌套&quot;">​</a></h3><p>要解决以上的问题就要深层对对象进行代理，我们的代码使用<code>new Proxy</code>仅仅会拦截对象的第一层对象，因此在获取深层属性时，是不会触发拦截的。要解决这个问题很简单，那就是<u>判断当前属性的值是不是原始类型（假如），如果不是就需要对值再进行拦截也就是再执行<code>reactive</code>方法进行代理</u>，这样就会正常的拦截到深层嵌套的属性了。来看下实现，很简单：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Record</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Proxy</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">      const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 收集依赖</span></span>
<span class="line"><span style="color:#82AAFF;">      track</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 判断当前的值是不是对象，如果是对象继续代理拦截</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 这样在访问深层对象时，其实访问的代理对象</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">typeof</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">object</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">        return</span><span style="color:#82AAFF;"> reactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 省略...</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#F07178;">  info</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#F07178;">    hobby</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">篮球</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#F07178;">    girlFriend</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#F07178;">      name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">鲁班</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    }</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  },</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p3：我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，爱好：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">hobby</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，女朋友：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">info</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">girlFriend</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>以上改造好了后看下执行结果： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514190938135.png" alt=""></p><p>到这里其实还差对数组结构方法的拦截，看如下代码：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> user </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> reactive</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  name</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">小明</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  age</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#F07178;">  friends</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">鲁班</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">钟馗</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">] </span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p4：我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，朋友：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">friends</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">join</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">、</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230514193552900.png" alt=""></p><h3 id="实现数组" tabindex="-1">实现数组 <a class="header-anchor" href="#实现数组" aria-label="Permalink to &quot;实现数组&quot;">​</a></h3><p>那么对于数组的方法又是如何拦截的呢？对数组的修改通常都会获取length属性触发track，然后通过索引触发set，因此在使用数组方法触发trigger时判断当前对象是不是数组并且当前key为数字，那就通知更新数组length属性的依赖。来看下简单改造：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> trigger</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 当key为数字时 通知length属性依赖更新</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">Number</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">length</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> dep</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> deps</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  deps</span><span style="color:#89DDFF;">?.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#82AAFF;"> dep</span><span style="color:#89DDFF;">?.</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230515092428104.png" alt=""></p><p>这样当使用数组的方法修改时就可以正确派发更新了</p><h3 id="实现ref" tabindex="-1">实现Ref <a class="header-anchor" href="#实现ref" aria-label="Permalink to &quot;实现Ref&quot;">​</a></h3><p>在reactive的基础上实现ref变得非常简单，由于<code>proxy</code>只能拦截对象无法对原始类型进行拦截，因此可以将原始对象包装成对象然后再进行拦截即可。在vue3中通常这样使用：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> loading </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">loading</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value </span><span style="color:#89DDFF;">=</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(loading</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>现在我们来简单实现下ref函数：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line diff add"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> ref</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> number</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#82AAFF;"> reactive</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> loading </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> ref</span><span style="color:#BABED8;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> loading</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">加载中。。。</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以上打印结果如下： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230515133128806.png" alt=""></p><h3 id="实现torefs" tabindex="-1">实现toRefs <a class="header-anchor" href="#实现torefs" aria-label="Permalink to &quot;实现toRefs&quot;">​</a></h3><p>toRefs主要用来解决对象解构后不再响应式的问题，解决这个也很简单，让解构的属性值获取的还是原来的对象，这样在访问/修改属性时还是触发的原来响应式对象</p><p>我们来简单的实现下这个功能：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight has-diff vp-code"><code><span class="line diff add"><span style="color:#C792EA;">class</span><span style="color:#FFCB6B;"> ObjectRef</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span></span>
<span class="line diff add"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> readonly</span><span style="color:#BABED8;font-style:italic;"> _object</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#C792EA;">    private</span><span style="color:#C792EA;"> readonly</span><span style="color:#BABED8;font-style:italic;"> _key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">,</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  )</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#C792EA;">  get</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">_object</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">_key</span><span style="color:#F07178;">] </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> val</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line diff add"><span style="color:#C792EA;">  set</span><span style="color:#F07178;"> value</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">newVal</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#89DDFF;">    this.</span><span style="color:#BABED8;">_object</span><span style="color:#F07178;">[</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">_key</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> newVal</span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line diff add"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> toRefs</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">obj</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line diff add"><span style="color:#BABED8;">  Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">keys</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#BABED8;font-style:italic;">k</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line diff add"><span style="color:#BABED8;">    res</span><span style="color:#F07178;">[</span><span style="color:#BABED8;">k</span><span style="color:#F07178;">] </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ObjectRef</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">obj</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> k</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">) </span></span>
<span class="line diff add"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;">;</span></span>
<span class="line diff add"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>使用toRefs的功能验证是否结构后不会失去响应式：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> age </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> toRefs</span><span style="color:#BABED8;">(user)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p1：我的名字：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">，年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">user</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 使用解构的属性，来验证它的响应式</span></span>
<span class="line"><span style="color:#82AAFF;">effect</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">p2：年龄：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">age</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}\`</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230515135531377.png" alt=""></p><h3 id="官方实现-1" tabindex="-1">官方实现 <a class="header-anchor" href="#官方实现-1" aria-label="Permalink to &quot;官方实现&quot;">​</a></h3><p>上面我们尝试着使用proxy简单实现了下vue3的响应式原理和一些函数，接下来就来扫一下源码是如何实现的。源码写的很健壮这里大家了解下大概流程即可，对于特殊情况可以单独进行分析</p><ol><li>实现对象拦截代理，这里我们看最普通的reactive：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/reactive 82行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#C792EA;"> extends</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">&gt;(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> UnwrapNestedRefs</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> reactive</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 只读对象</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isReadonly</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> target</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#82AAFF;"> createReactiveObject</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#BABED8;">    target</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FF9CAC;">    false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    mutableHandlers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    mutableCollectionHandlers</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    reactiveMap</span></span>
<span class="line"><span style="color:#F07178;">  )</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/reactive 248行</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createReactiveObject</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Target</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  isReadonly</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  baseHandlers</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ProxyHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  collectionHandlers</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ProxyHandler</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">any</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  proxyMap</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> WeakMap</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Target</span><span style="color:#89DDFF;">,</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 省略...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 真正 proxy 拦截的地方</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> proxy</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Proxy</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> baseHandlers</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">  proxyMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> proxy</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> proxy</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 这里看下get和set实现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/baseHandlers 48行</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> get </span><span style="color:#89DDFF;">=</span><span style="color:#676E95;font-style:italic;"> /*#__PURE__*/</span><span style="color:#82AAFF;"> createGetter</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> set </span><span style="color:#89DDFF;">=</span><span style="color:#676E95;font-style:italic;"> /*#__PURE__*/</span><span style="color:#82AAFF;"> createSetter</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createGetter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">isReadonly</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> shallow</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> get</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> receiver</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取使用Reflect获取值</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> res</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 以来收集</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">isReadonly</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      track</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> TrackOpTypes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">GET</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 如果属性值为对象 如 {}、[] 等等，深层拦截</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">isObject</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#BABED8;"> isReadonly</span><span style="color:#89DDFF;"> ?</span><span style="color:#82AAFF;"> readonly</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">:</span><span style="color:#82AAFF;"> reactive</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> res</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createSetter</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">shallow</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> set</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> string</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> symbol</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    value</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> unknown</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">    receiver</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span></span>
<span class="line"><span style="color:#89DDFF;">  ):</span><span style="color:#FFCB6B;"> boolean</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> hadKey</span><span style="color:#89DDFF;"> =</span></span>
<span class="line"><span style="color:#82AAFF;">      isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#82AAFF;"> isIntegerKey</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">        ?</span><span style="color:#82AAFF;"> Number</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;"> target</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">length</span></span>
<span class="line"><span style="color:#89DDFF;">        :</span><span style="color:#82AAFF;"> hasOwn</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 获取结果</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> result</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> Reflect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> receiver</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 通知更新</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;"> ===</span><span style="color:#82AAFF;"> toRaw</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">receiver</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">hadKey</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">        trigger</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> TriggerOpTypes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">ADD</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;font-style:italic;"> if</span><span style="color:#F07178;"> (</span><span style="color:#82AAFF;">hasChanged</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> oldValue</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">        trigger</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> TriggerOpTypes</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">SET</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> value</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> oldValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    return</span><span style="color:#BABED8;"> result</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br></div></div><ol start="2"><li>接着来看依赖收集过程也就是track函数的实现：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/effect 247行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> track</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> TrackOpTypes</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> unknown</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 首先判断可以收集、是否有正在运行的函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">shouldTrack</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#BABED8;"> activeEffect</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> Map</span><span style="color:#F07178;">()))</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#C792EA;">    let</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">set</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> createDep</span><span style="color:#F07178;">()))</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#82AAFF;">    trackEffects</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> trackEffects</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  dep</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  debuggerEventExtraInfo</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> false</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effectTrackDepth</span><span style="color:#89DDFF;"> &lt;=</span><span style="color:#BABED8;"> maxMarkerBits</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#82AAFF;">newTracked</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      dep</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">n</span><span style="color:#89DDFF;"> |=</span><span style="color:#BABED8;"> trackOpBit</span><span style="color:#676E95;font-style:italic;"> // set newly tracked</span></span>
<span class="line"><span style="color:#BABED8;">      shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#82AAFF;">wasTracked</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> !</span><span style="color:#BABED8;">dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">has</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeEffect</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 这里只看这一步即可</span></span>
<span class="line"><span style="color:#BABED8;">  dep</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">add</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">activeEffect</span><span style="color:#89DDFF;">!</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ol start="3"><li>依赖收集的过程就是收集<code>activeEffect</code>它是如何运作的呢？来看effect的实现：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/effect 180行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> effect</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;(</span></span>
<span class="line"><span style="color:#82AAFF;">  fn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  options</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> ReactiveEffectOptions</span></span>
<span class="line"><span style="color:#89DDFF;">):</span><span style="color:#FFCB6B;"> ReactiveEffectRunner</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> _effect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> ReactiveEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">fn</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 执行</span></span>
<span class="line"><span style="color:#BABED8;">  _effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  return</span><span style="color:#BABED8;"> runner</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// ReactiveEffect实现</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/effect 53行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> class</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;"> =</span><span style="color:#FFCB6B;"> any</span><span style="color:#89DDFF;">&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">  active</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#F07178;">  deps</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#BABED8;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> []</span></span>
<span class="line"><span style="color:#C792EA;">  constructor</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#C792EA;">    public</span><span style="color:#82AAFF;"> fn</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#FFCB6B;"> T</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  )</span><span style="color:#89DDFF;"> {}</span></span>
<span class="line"><span style="color:#BABED8;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 创建effect后执行 run方法</span></span>
<span class="line"><span style="color:#F07178;">  run</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    try</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> activeEffect</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 绑定为当前实例</span></span>
<span class="line"><span style="color:#BABED8;">      activeEffect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this</span></span>
<span class="line"><span style="color:#BABED8;">      shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#FF9CAC;"> true</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 执行传进来的函数</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      return</span><span style="color:#89DDFF;"> this.</span><span style="color:#82AAFF;">fn</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#89DDFF;font-style:italic;"> finally</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 执行完后还原</span></span>
<span class="line"><span style="color:#BABED8;">      activeEffect</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> this.</span><span style="color:#BABED8;">parent</span></span>
<span class="line"><span style="color:#BABED8;">      shouldTrack</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> lastShouldTrack</span></span>
<span class="line"><span style="color:#89DDFF;">      this.</span><span style="color:#BABED8;">parent</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> undefined</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><ol start="4"><li>依赖收集后那么在修改属性值时会触发set同通过<code>trigger</code>用来派发更新：</li></ol><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// packages/reactivity/src/effect 305行</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> trigger</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  target</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> object</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  type</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> TriggerOpTypes</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  key</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> unknown</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> depsMap</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> targetMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">depsMap</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;font-style:italic;">return</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 统一放在 deps 中处理</span></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> deps</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> (</span><span style="color:#FFCB6B;">Dep</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> undefined</span><span style="color:#F07178;">)[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 数组处理逻辑</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> &amp;&amp;</span><span style="color:#82AAFF;"> isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">target</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#BABED8;"> newLength</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> Number</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">newValue</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#BABED8;">    depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">dep</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> key</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> ===</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">length</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> ||</span><span style="color:#BABED8;"> key</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#BABED8;"> newLength</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">        deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">      }</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // schedule runs for SET | ADD | DELETE</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">key</span><span style="color:#89DDFF;"> !==</span><span style="color:#89DDFF;"> void</span><span style="color:#F78C6C;"> 0</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      deps</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">depsMap</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">key</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">    // 省略 删除、添加判断</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> effects</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#F07178;">[] </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> []</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> deps</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">      effects</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#82AAFF;">  triggerEffects</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">createDep</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effects</span><span style="color:#F07178;">))</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#C792EA;"> function</span><span style="color:#82AAFF;"> triggerEffects</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  dep</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> Dep</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#BABED8;">[]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  debuggerEventExtraInfo</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // spread into array for stabilization</span></span>
<span class="line"><span style="color:#C792EA;">  const</span><span style="color:#BABED8;"> effects</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> isArray</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">?</span><span style="color:#BABED8;"> dep</span><span style="color:#89DDFF;"> :</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">dep</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 计算属性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> effects</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      triggerEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> debuggerEventExtraInfo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 非计算属性</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">  for</span><span style="color:#F07178;"> (</span><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> effect</span><span style="color:#89DDFF;"> of</span><span style="color:#BABED8;"> effects</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">computed</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      triggerEffect</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">effect</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> debuggerEventExtraInfo</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> triggerEffect</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  effect</span><span style="color:#89DDFF;">:</span><span style="color:#FFCB6B;"> ReactiveEffect</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;font-style:italic;">  debuggerEventExtraInfo</span><span style="color:#89DDFF;">?:</span><span style="color:#FFCB6B;"> DebuggerEventExtraInfo</span></span>
<span class="line"><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // effect是个ReactiveEffect类，执行run函数，触发外部函数执行</span></span>
<span class="line"><span style="color:#BABED8;">  effect</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">run</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div><p>到这里基本上就关于vue3的响应式基本原理就讲通了，当然只是笼统的梳理下响应式的过程，对于其中特殊的实现这里不再赘述，读者自己尝试打断点分析一下即可。还有一些其它功能如：Ref、toRefs、computed等这些功能其实都很简单，自己尝试看看应该能看懂</p><h2 id="响应式对比" tabindex="-1">响应式对比 <a class="header-anchor" href="#响应式对比" aria-label="Permalink to &quot;响应式对比&quot;">​</a></h2><p>1️⃣ vue2响应式原理及缺点：</p><ul><li>原理：使用 Object.defineProperty 进行响应式数据的劫持和侦听。它会在实例化时递归地将对象的属性转换为 getter 和 setter，从而在属性访问时触发依赖收集和更新；对于新增或删除的属性，需要使用 Vue.set 或 Vue.delete 进行特殊处理，以确保它们也是响应式的</li><li>缺点：存在一些性能和限制方面的问题，例如无法监听数组索引的变化，需要使用特定的数组方法进行变异操作</li></ul><p>2️⃣ vue3响应式原理和优势：</p><ul><li>原理：基于 ES6 Proxy 的响应式系统，取代了 Object.defineProperty。Proxy 可以捕获对对象的任何属性的访问、赋值和删除操作，并触发相应的更新</li><li>优势： <ul><li>更好的性能：使用 ES6 Proxy 的响应式系统在某些情况下比 Object.defineProperty 更高效，因为它可以直接捕获属性的操作，无需递归地转换整个对象</li><li>更好的数组响应：Vue.js 3 的响应式系统可以直接监听数组索引的变化，并通过新的数组方法实现了可响应的变异操作，使得数组的处理更加直观和灵活</li><li>更全面的响应式追踪：Vue.js 3 的响应式系统可以追踪 Map、Set 等内置对象的变化，提供了更全面的响应式能力</li><li>更简洁的语法：reactive API 可以更直接地将对象转换为响应式对象，不再需要依赖全局的 Vue 实例</li></ul></li></ul><h2 id="源码调试技巧" tabindex="-1">源码调试技巧 <a class="header-anchor" href="#源码调试技巧" aria-label="Permalink to &quot;源码调试技巧&quot;">​</a></h2><p>本次以vue3为例，打开vue3的项目首先看<code>package.json</code>中的脚本，我们使用以下脚本：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 启动项目</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#C3E88D;"> dev</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动静态服务</span></span>
<span class="line"><span style="color:#FFCB6B;">pnpm</span><span style="color:#C3E88D;"> serve -p </span><span style="color:#F78C6C;">10010</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在vscode中添加调试配置，需要注意在跟路径下创建：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// .vscode/launch.json</span></span>
<span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">version</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">0.2.0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">configurations</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">    {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">      // 这里我们使用启动chrome，访问serve服务的地址</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Launch Chrome</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">request</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">launch</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">type</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">pwa-chrome</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">http://localhost:10010</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      &quot;</span><span style="color:#FFCB6B;">webRoot</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">\${workspaceFolder}</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">    },</span></span>
<span class="line"><span style="color:#89DDFF;">  ]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><blockquote><p>关于vscode的更多调试技巧可以看我的<a href="/frontend/debug-skill/vscode.html">「vscode调试技巧」</a>一文</p></blockquote><p>点击侧边栏debugger图标，然后选择我们设置调试配置名字<code>Launch Chrome</code>点击启动 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230516091548907.png" alt=""></p><p>上面启动后会新开一个chrome，运行我们的serve静态服务，然后我们找到<code>/packages/vue/examples/</code>下的对应的html文件</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230516092054051.png" alt=""></p><p>如下图，我们在<code>reactivity.html</code>中打了断点，当访问当前页面时就会debug：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230516092008913.png" alt=""></p><p>使用vscode的好处就是，可以直接在编辑器中调试，不需要看chrome的打印结果：</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230516092947214.png" alt=""></p><p>这样借助vscode调试对于源码的阅读更加友好和清晰，一定要学会调试技巧在工作中也是很有帮助的</p><h2 id="ioc实现响应式" tabindex="-1">IOC实现响应式 <a class="header-anchor" href="#ioc实现响应式" aria-label="Permalink to &quot;IOC实现响应式&quot;">​</a></h2><p>写作中...</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>总之Vue的响应式都是通过拦截对象的setter/getter，进而实现合理依赖收集的过程，当对象改变时便通知以来进行更新。这也是Vue核心概念<code>数据驱动视图</code>。通过将数据和视图进行绑定，当数据发生变化时，视图会自动更新。这种响应式的设计方式使得开发者可以更加方便地管理和更新应用程序的状态，减少了手动操作 DOM 的繁琐工作</p><p>到了这里相信你也知道数据驱动视图的背后原理了，接下来我们接着分析<a href="/frontend/vue/computed-watch.html">「计算属性与侦听函数」</a></p>`,158);function F(y,D,i,b,B,A){const a=n("Reward"),l=n("Gitalk");return c(),o("div",null,[t,s(a),s(l)])}const m=p(r,[["render",F]]);export{E as __pageData,m as default};
