import{_ as l,c as o,J as s,V as p,o as c,G as a}from"./chunks/framework.SV1ROkXV.js";const F=JSON.parse('{"title":"Docker基础教程","description":"docker架构、镜像、容器、仓库使用指南","frontmatter":{"title":"Docker基础教程","description":"docker架构、镜像、容器、仓库使用指南","keywords":"docker架构,docker命令,docker镜像,docker仓库,docker构建镜像,docker文件传输","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-docker.png"},"headers":[],"relativePath":"fullstack/docker/base-tutorial.md","filePath":"fullstack/docker/base-tutorial.md","lastUpdated":1709440279000}'),r={name:"fullstack/docker/base-tutorial.md"},t=p(`<h1 id="docker基础教程" tabindex="-1">Docker基础教程 <a class="header-anchor" href="#docker基础教程" aria-label="Permalink to &quot;Docker基础教程&quot;">​</a></h1><p>Docker 是一个开源的容器化平台，可以帮助开发者和运维人员更快地构建、发布和运行应用程序。Docker 使用容器技术，将应用程序和其依赖项打包到一个可移植的容器中，从而实现跨平台、快速部署和易于管理的目的。</p><p>本文主要从docker的基础开始学习，包括基本架构、全局命令、镜像、仓库、容器</p><h2 id="docker架构" tabindex="-1">Docker架构 <a class="header-anchor" href="#docker架构" aria-label="Permalink to &quot;Docker架构&quot;">​</a></h2><p>Docker 架构分为<strong>客户端-服务器架构</strong>和<strong>主从架构</strong>，具体如下：</p><p><strong>客户端-服务器架构</strong>：也称为<code>C/S</code>架构，Docker 采用客户端-服务器架构，其中客户端是 Docker 命令行工具，用于与 Docker 服务端通信。Docker 服务端是 Docker 引擎，负责管理和运行 Docker 容器。客户端和服务端可以运行在同一台机器上，也可以通过网络连接运行在不同的机器上。</p><p><strong>主从架构</strong>：集群模式，Docker Swarm 是一个用于管理多个 Docker 容器的集群工具，采用主从架构。Docker Swarm 集群由一个管理节点和多个工作节点组成，管理节点负责整个集群的管理和调度，工作节点负责运行 Docker 容器。管理节点和工作节点可以运行在同一台机器上，也可以通过网络连接运行在不同的机器上。</p><h2 id="全局命令" tabindex="-1">全局命令 <a class="header-anchor" href="#全局命令" aria-label="Permalink to &quot;全局命令&quot;">​</a></h2><ol><li>查看docker版本<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> version</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>查看docker详细信息<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> info</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>查看docker磁盘使用情况<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker system df</span></span>
<span class="line"><span style="color:#FFCB6B;">TYPE</span><span style="color:#C3E88D;">            TOTAL     ACTIVE    SIZE      RECLAIMABLE</span></span>
<span class="line"><span style="color:#FFCB6B;">Images</span><span style="color:#F78C6C;">          12</span><span style="color:#F78C6C;">        5</span><span style="color:#F78C6C;">         4.138</span><span style="color:#C3E88D;">GB   </span><span style="color:#F78C6C;">713.6</span><span style="color:#C3E88D;">MB </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">17%</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Containers</span><span style="color:#F78C6C;">      5</span><span style="color:#F78C6C;">         0</span><span style="color:#F78C6C;">         2.634</span><span style="color:#C3E88D;">MB   </span><span style="color:#F78C6C;">2.634</span><span style="color:#C3E88D;">MB </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">100%</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Local</span><span style="color:#C3E88D;"> Volumes   </span><span style="color:#F78C6C;">24</span><span style="color:#F78C6C;">        2</span><span style="color:#F78C6C;">         649.6</span><span style="color:#C3E88D;">MB   </span><span style="color:#F78C6C;">607.7</span><span style="color:#C3E88D;">MB </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">93%</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">Build</span><span style="color:#C3E88D;"> Cache     </span><span style="color:#F78C6C;">0</span><span style="color:#F78C6C;">         0</span><span style="color:#F78C6C;">         0</span><span style="color:#C3E88D;">B        </span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">B</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li>查看docker server的实时信息，我们从架构可以知道docker是基于<code>C/S</code>架构的，docker server端负责管理和运行docker容器，我们可以查看其具体的操作步骤，先使用以下命令开始监听server端，然后新开一个终端，启动或停止容器查看输出：<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> system events</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 示例</span></span>
<span class="line"><span style="color:#FFCB6B;">2020-03-26T10:53:23.497642694+08:00</span><span style="color:#C3E88D;"> container kill </span><span style="color:#F78C6C;">999511</span><span style="color:#C3E88D;">b43ca0ffa61979ccb6561ff20f499b087be99aba95836cee20edb794a3 </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">image</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">nginx:1.15.3, maintainer=NGINX Docker Maintainers </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">docker-maint@nginx.co</span><span style="color:#BABED8;">m</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">, name=nginx, signal=</span><span style="color:#F78C6C;">15</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">2020-03-26T10:53:23.936509503+08:00</span><span style="color:#C3E88D;"> network disconnect </span><span style="color:#F78C6C;">3</span><span style="color:#C3E88D;">d9d929e9d34b4c776d993158c3bd8c6074fea2e1de0ab43c846e571c1191711 </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">container</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">999511</span><span style="color:#C3E88D;">b43ca0ffa61979ccb6561ff20f499b087be99aba95836cee20edb794a3, name=bridge, type=bridge</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">2020-03-26T10:53:23.953543859+08:00</span><span style="color:#C3E88D;"> container stop </span><span style="color:#F78C6C;">999511</span><span style="color:#C3E88D;">b43ca0ffa61979ccb6561ff20f499b087be99aba95836cee20edb794a3 </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">image</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">nginx:1.15.3, maintainer=NGINX Docker Maintainers </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">docker-maint@nginx.co</span><span style="color:#BABED8;">m</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">, name=nginx</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#FFCB6B;">2020-03-26T10:53:23.958016229+08:00</span><span style="color:#C3E88D;"> container die </span><span style="color:#F78C6C;">999511</span><span style="color:#C3E88D;">b43ca0ffa61979ccb6561ff20f499b087be99aba95836cee20edb794a3 </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;">exitCode</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">, image=nginx:1.15.3, maintainer=NGINX Docker Maintainers </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">docker-maint@nginx.co</span><span style="color:#BABED8;">m</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">, name=nginx</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li><li>查看对象的详细信息，可以查看指定镜像、容器等等<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> inspect [name</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">ID]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li></ol><h2 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h2><ul><li>镜像（Image）：一个root文件系统的模板，相当于 一个类</li><li>容器（Container）：docker run 镜像就是容器（最小的linux内核文件和运行的应用程序），镜像和容器的关系，就像是面向对象程序设计中的 <code>类</code> 和 <code>实例</code>一样，镜像是静态的定义，容器是镜像运行时的实体</li><li>仓库（Repositry）：保存镜像的仓库，每个仓库可以包含多个Tag，对应不同的镜像</li></ul><h2 id="镜像" tabindex="-1">镜像 <a class="header-anchor" href="#镜像" aria-label="Permalink to &quot;镜像&quot;">​</a></h2><p>Docker 镜像 是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。镜像 不包含 任何动态数据，其内容在构建之后也不会被改变。</p><blockquote><p>对于linux而言，内核启动后会挂载root文件系统为用户提供空间支持，如一个基本的centos镜像就包含了一套完整的centos的root文件系统。</p></blockquote><p>镜像最重要的概念就是镜像层，以及它的存储原理。</p><h3 id="镜像层" tabindex="-1">镜像层 <a class="header-anchor" href="#镜像层" aria-label="Permalink to &quot;镜像层&quot;">​</a></h3><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/docker-layer.png" alt="docker-layer"></p><p>Docker 使用<a href="https://en.wikipedia.org/wiki/UnionFS" target="_blank" rel="noreferrer">UnionFS（联合文件系统)</a>来实现镜像层之间的共享和复用，从而节省存储空间和加速构建过程。UnionFS 是一种基于文件系统的技术，它能够将多个不同的文件系统合并成为一个虚拟的文件系统。</p><p>在 Docker 中，UnionFS 主要由以下三个部分组成：</p><ul><li>基础文件系统：Docker镜像中的每个层都有一个基础文件系统，它是一个只读的文件系统，包含了镜像的构建信息和运行时所需要的依赖项。</li><li>容器文件系统：Docker容器层有一个可读写的容器文件系统，它是由基础文件系统和其他层共同组成的。当容器启动时，Docker 会将容器文件系统挂载到主机上，使其在主机上可以被访问和修改。</li><li>UnionFS：UnionFS将多个文件系统合并成为一个虚拟的文件系统，使得用户可以看到一个统一的文件系统结构。Docker使用UnionFS来管理镜像层之间的依赖关系和共享信息，从而实现镜像的复用和节省存储空间的目的。</li></ul><p>BootFS 文件系统是一个只读的文件系统，它位于 Docker 镜像的最底层。当 Docker 启动容器时，它会将 BootFS 文件系统加载到内存中，并在其上启动操作系统。操作系统启动后，Docker 会将其他文件系统（如容器层和其他镜像层）挂载到操作系统上，使得容器中的应用程序可以访问这些文件系统中的文件和数据。</p><p>在使用 UnionFS 时，Docker 会将各个镜像层以只读的方式合并到一个虚拟的文件系统中，然后再将容器层以可读写的方式挂载到虚拟文件系统上。这样，容器就能够访问和修改虚拟文件系统中的内容，而对于只读的镜像层，则不会被修改，从而实现了镜像的共享和复用。</p><p>总的来说，Docker 使用 UnionFS 技术来实现镜像层之间的共享和复用，从而节省存储空间和加速构建过程。UnionFS 技术能够将多个文件系统合并成为一个虚拟的文件系统，并且支持只读和可读写两种模式，使得用户可以看到一个统一的文件系统结构。</p><h3 id="查看本地镜像" tabindex="-1">查看本地镜像 <a class="header-anchor" href="#查看本地镜像" aria-label="Permalink to &quot;查看本地镜像&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 命令</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> images [options] [REPOSITORY[:TAG]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 列出所有镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker images</span></span>
<span class="line"><span style="color:#FFCB6B;">REPOSITORY</span><span style="color:#C3E88D;">       TAG         IMAGE ID       CREATED         SIZE</span></span>
<span class="line"><span style="color:#FFCB6B;">alpine</span><span style="color:#C3E88D;">           latest      </span><span style="color:#F78C6C;">8</span><span style="color:#C3E88D;">e1d7573f448   </span><span style="color:#F78C6C;">16</span><span style="color:#C3E88D;"> months ago   </span><span style="color:#F78C6C;">5.33</span><span style="color:#C3E88D;">MB</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#F78C6C;">            1.15</span><span style="color:#C3E88D;">.3      c5e5a72af32f   </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;"> years ago     </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker images --filter reference=nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">REPOSITORY</span><span style="color:#C3E88D;">   TAG       IMAGE ID       CREATED       SIZE</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#F78C6C;">        1.15</span><span style="color:#C3E88D;">.3    c5e5a72af32f   </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;"> years ago   </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>以上会以表格的方式列表镜像，其中包含了镜像仓库、标签、镜像ID、创建时间、大小等等，上面列出了<code>alpine</code>和<code>nginx</code>两个镜像</p><p>常用的参数：</p><ul><li><code>-a</code>：显示所有镜像中间层镜像</li><li><code>-q</code>：只输出镜像ID</li><li><code>--filter</code>：筛选镜像 <ul><li><code>dangling=true|false</code>：显示有无使用的镜像</li><li><code>reference=&lt;镜像名&gt;</code>：根据名字或标签进行筛选镜像</li></ul></li><li><code>--format</code>：以哪种格式输出，<code>table、json、TEMPLATE</code>，默认<code>table</code></li></ul><h3 id="搜索、下载、推送" tabindex="-1">搜索、下载、推送 <a class="header-anchor" href="#搜索、下载、推送" aria-label="Permalink to &quot;搜索、下载、推送&quot;">​</a></h3><ol><li><p>搜索镜像</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> search imageName [options]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker search nginx --limit </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#FFCB6B;">NAME</span><span style="color:#C3E88D;">            DESCRIPTION                  STARS     OFFICIAL   AUTOMATED</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#C3E88D;">           Official build of Nginx.     </span><span style="color:#F78C6C;">18278</span><span style="color:#C3E88D;">     [OK]</span></span>
<span class="line"><span style="color:#FFCB6B;">bitnami/nginx</span><span style="color:#C3E88D;">   Bitnami nginx Docker Image   </span><span style="color:#F78C6C;">155</span><span style="color:#C3E88D;">                  [OK]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>搜索镜像会默认从官方的<a href="https://hub.docker.com/search" target="_blank" rel="noreferrer">docker registry</a>进行搜索，你可以使用<code>--limit</code>参数限制搜索数</p></li><li><p>下载</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 下载，没有tag时默认 latest</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> pull imageName:tag</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 下载nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> pull nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li><li><p>推送</p><p>镜像推送指将本地的镜像推送到远程仓库，如将项目代码提交到远程的git仓库，推送首先要登录</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 登录</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> login</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 推送</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> push imageName:tag</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h3 id="创建、删除" tabindex="-1">创建、删除 <a class="header-anchor" href="#创建、删除" aria-label="Permalink to &quot;创建、删除&quot;">​</a></h3><ol><li><p>创建</p><p>创建新镜像的方式有很多，可以通过打新的标签、commit、Dockerfile来创建新镜像</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 通过打新标签</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> tag nginx:1.1 nginx-me:v1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 通过commit</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> commit container imageName:tag</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 通过Dockerfile</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> build -t imageName:tag .</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><blockquote><p>有关Dockerfile的概念和使用可以查看我的「<a href="/fullstack/docker/dockerfile.html">使用Dockerfile构建镜像</a>」一文</p></blockquote></li><li><p>删除</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 删除</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> image rm image ... / docker rmi image ...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除latest版本nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> rmi nginx</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除所有镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> rmi </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> images -qa</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除虚悬镜像（虚悬镜像看以下部分）</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> image prune</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li></ol><h3 id="其他命令" tabindex="-1">其他命令 <a class="header-anchor" href="#其他命令" aria-label="Permalink to &quot;其他命令&quot;">​</a></h3><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 将镜像导出为 tar文件</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> save imageName</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#C3E88D;"> file.tar</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 解压镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> load -i file.tar</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看镜像构建历史</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> history imageName</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看镜像详细信息</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> inspect imageName</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="虚悬镜像" tabindex="-1">虚悬镜像 <a class="header-anchor" href="#虚悬镜像" aria-label="Permalink to &quot;虚悬镜像&quot;">​</a></h3><p>Docker 虚悬镜像（dangling image）指的是没有被任何容器使用的镜像。在 Docker 中，每个新构建的镜像都会创建一个新的镜像 ID，并且旧的镜像 ID 会被保留在本地。当使用 docker images 命令查看本地镜像列表时，可能会看到一些虚悬镜像，它们的 REPOSITORY 和 TAG 字段显示为 <code>&lt;none&gt;</code></p><p>虚悬镜像可能是由于以下原因导致的：</p><ul><li>构建新版本的镜像时，旧的镜像 ID 会被保留在本地，而新的镜像 ID 会覆盖旧的镜像 ID。</li><li>删除容器时，容器所依赖的镜像不会被自动删除，因此可能会留下一些虚悬镜像。</li><li>在使用<code>docker rmi</code>命令删除镜像时，如果没有指定正确的镜像ID或名称，也可能会删除不正确的镜像，从而产生虚悬镜像。</li></ul><p>举一个重复构建同名同tag的nginx镜像：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker images --filter reference=nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">REPOSITORY</span><span style="color:#C3E88D;">   TAG       IMAGE ID       CREATED       SIZE</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#F78C6C;">        1.15</span><span style="color:#C3E88D;">.3    c5e5a72af32f   </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;"> years ago   </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动容器</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker run -d --name nginx nginx:1.15.3</span></span>
<span class="line"><span style="color:#FFCB6B;">1453e55d41100b57f5f76ed036f65276e311db36c4f3e9afd3fce49a25c4f8b8</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 打一个新镜像</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker commit nginx nginx:1.15.3</span></span>
<span class="line"><span style="color:#FFCB6B;">sha256:db2d3fa0bcb45bdc528960d1b06eb68496f044896d901e23d79bb1e54af56b9e</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重新查看</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker images --filter reference=nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">REPOSITORY</span><span style="color:#C3E88D;">   TAG       IMAGE ID       CREATED          SIZE</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#F78C6C;">        1.15</span><span style="color:#C3E88D;">.3    db2d3fa0bcb4   </span><span style="color:#F78C6C;">52</span><span style="color:#C3E88D;"> seconds ago   </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#89DDFF;">        &lt;</span><span style="color:#C3E88D;">non</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">    c5e5a72af32f   </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;"> years ago      </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="容器" tabindex="-1">容器 <a class="header-anchor" href="#容器" aria-label="Permalink to &quot;容器&quot;">​</a></h2><p>容器是镜像的运行实例。Docker 容器是一个动态的环境，通过在镜像之上创建一个运行实例，可以启动和运行应用程序。容器是一个具有生命周期的实体，可以被创建、启动、停止、删除和迁移等操作。</p><p>容器可以通过镜像来创建。在 Docker 中，通过 Dockerfile 或者其他方式创建一个镜像，然后通过这个镜像来创建一个或多个容器实例。这些容器实例都是基于同一个镜像创建的，但它们之间是相互独立的，拥有自己的文件系统、网络和进程空间。</p><p>容器可以通过修改来生成新的镜像。在容器运行时，可以对容器内部的文件系统进行修改，如添加、删除、修改文件等。这些修改可以通过 Docker commit 命令来保存为一个新的镜像，以便后续使用。</p><h3 id="启动" tabindex="-1">启动 <a class="header-anchor" href="#启动" aria-label="Permalink to &quot;启动&quot;">​</a></h3><p>启动 Docker 容器需要使用 <code>docker run</code> 命令，该命令用于创建和启动一个新的 Docker 容器实例。下面是 <code>docker run</code> 命令的一些常用选项和参数：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>OPTIONS</code> 是一些可选的命令选项，<code>IMAGE</code> 是要创建容器的镜像名称或 <code>ID</code>，<code>COMMAND</code> 是容器启动后要运行的命令，<code>ARG</code> 是命令的参数。一些常用的选项包括：</p><ul><li><code>-d</code>：后台运行容器</li><li><code>-it</code>：交互运行，并分配一个容器伪终端</li><li><code>-p</code>：指定容器的端口映射</li><li><code>-v</code>：指定容器与主机之间的文件共享</li><li><code>--name</code>：为容器指定一个名称</li><li><code>-e</code>：设置容器的环境变量</li><li><code>--rm</code>：退出后删除容器</li></ul><p>这里是<code>docker run</code>的几个小例子：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 后台运行nginx，容器命名nginx，映射宿主机端口 8080到nginx容器的80端口</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run -d --name nginx -p </span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">:80 nginx</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用交互式运行centos容器，exit退出后 自动删除容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run -it --rm centos /bin/bash</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 启动nginx 并将 nginx容器内部的 nginx静态文件路径挂载到宿主机上指定位置</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> run -v /somedir/data:/etc/share/nginx/html nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>以上便是<code>docker run</code>启动一个新容器的基本玩法，除了新启动一个容器外，还可以使用<code>docker start</code>启动一个已经停止的容器或<code>docker restart</code>重启一个容器</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> start nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> restart nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-label="Permalink to &quot;进入容器&quot;">​</a></h3><p><code>docker exec</code>命令用于在运行中的Docker容器中执行命令。该命令可以让用户在运行中的容器中打开一个新的终端，以执行任意的命令或者进入容器内部进行交互式操作。以下是<code>docker exec</code>命令的基本语法：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> exec [OPTIONS] CONTAINER COMMAND [ARG...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>OPTIONS</code>是可选参数，<code>CONTAINER</code> 是要执行命令的容器名称或 <code>ID</code>，<code>COMMAND</code> 是要在容器中执行的命令，<code>ARG</code>是命令的参数。</p><p>除了使用<code>docker exec</code>外，docker还支持<code>docker attach</code>用于连接到正在运行中的Docker容器的标准输入、输出和错误流（即 STDIN、STDOUT 和 STDERR）。这个命令可以让用户实时地查看容器中的输出信息</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker attach nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">192.168.10.1</span><span style="color:#C3E88D;"> - - [</span><span style="color:#F78C6C;">26</span><span style="color:#C3E88D;">/Mar/2020:02:15:38 +0000] </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET / HTTP/1.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;"> 304</span><span style="color:#F78C6C;"> 0</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当使用<code>Ctrl + C</code>时会退出容器并停止容器的运行，官方建议使用<code>docker exec</code>进入容器做一些高级的操作</p><h3 id="容器列表" tabindex="-1">容器列表 <a class="header-anchor" href="#容器列表" aria-label="Permalink to &quot;容器列表&quot;">​</a></h3><p>当容器运行后可以在容器列表中看到，要查看当前系统中正在运行的 Docker 容器列表，可以使用 <code>docker ps</code> 命令。该命令显示了所有正在运行的容器的相关信息，如容器 ID、镜像名称、容器名称、启动时间、状态等。以下是一些常用的 <code>docker ps</code> 命令选项：</p><ul><li><code>-a</code>：显示所有容器，包括已经停止的容器</li><li><code>-q</code>：只显示容器的 ID</li><li><code>--no-trunc</code>：显示完整的容器 ID</li><li><code>-s</code>：显示容器的磁盘使用情况</li><li><code>--filter</code>：基于条件过滤输出</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># docker ps -as</span></span>
<span class="line"><span style="color:#FFCB6B;">CONTAINER</span><span style="color:#C3E88D;"> ID   IMAGE           COMMAND               CREATED         STATUS        PORTS     NAMES    SIZE</span></span>
<span class="line"><span style="color:#FFCB6B;">ff21fc7bdfbe</span><span style="color:#C3E88D;">   nginx:1.15.3  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">nginx -g &#39;daemon of…</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">  54</span><span style="color:#C3E88D;"> seconds ago  Up </span><span style="color:#F78C6C;">53</span><span style="color:#C3E88D;"> seconds </span><span style="color:#F78C6C;">80</span><span style="color:#C3E88D;">/tcp    nginx    </span><span style="color:#F78C6C;">2</span><span style="color:#C3E88D;">B </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">virtual</span><span style="color:#F78C6C;"> 103</span><span style="color:#C3E88D;">MB</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 只显示nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps --filter name=nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>可以通过查看容器列表容器的状态查看启动的容器有没有正常运行，除了这种方式还可以通过容器的日志，查看内部运行的细节</p><h3 id="容器日志" tabindex="-1">容器日志 <a class="header-anchor" href="#容器日志" aria-label="Permalink to &quot;容器日志&quot;">​</a></h3><p><code>docker logs</code>命令用于查看Docker容器的日志信息。该命令可以查看容器的标准输出和标准错误输出，以及容器内部运行的进程的日志信息。以下是 docker logs 命令的语法：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> logs [OPTIONS] CONTAINER</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>OPTIONS</code> 是一些可选的命令选项，<code>CONTAINER</code> 是要查看日志的容器名称或 <code>ID</code>。一些常用的选项包括：</p><ul><li><code>-f</code>：实时跟踪容器的日志输出</li><li><code>--tail</code>：指定显示最后几行日志，默认为所有日志</li><li><code>--since</code>：指定显示从某个时间戳开始的日志</li><li><code>--until</code>：指定显示到某个时间戳结束的日志</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 实时查看nginx的日志</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker logs -f nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">192.168.10.1</span><span style="color:#C3E88D;"> - - [</span><span style="color:#F78C6C;">26</span><span style="color:#C3E88D;">/Mar/2020:01:06:35 +0000] </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET / HTTP/1.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;"> 200</span><span style="color:#F78C6C;"> 612</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">2020/03/26</span><span style="color:#F78C6C;"> 01</span><span style="color:#C3E88D;">:06:35 [error] </span><span style="color:#F78C6C;">7#7</span><span style="color:#C3E88D;">: </span><span style="color:#BABED8;">*</span><span style="color:#C3E88D;">1 open</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">/usr/share/nginx/html/favicon.ico</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;"> failed </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">2:</span><span style="color:#C3E88D;"> No such file or directory</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">, client: </span><span style="color:#F78C6C;">192.168</span><span style="color:#C3E88D;">.10.1, server: localhost, request: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">GET /favicon.ico HTTP/1.1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, host: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">192.168.10.10:8088</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, referrer: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://192.168.10.10:8088/</span><span style="color:#89DDFF;">&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>通过<code>docker logs</code>可以很看到内部运行的详细日志，对于自己的容器需要做好日志的输出方便查看日志和错误追溯</p><h3 id="停止" tabindex="-1">停止 <a class="header-anchor" href="#停止" aria-label="Permalink to &quot;停止&quot;">​</a></h3><p>容器起来后不想运行了怎么办，可以使用停止命令停止正在运行的容器，使用该命令会发送一个 <code>SIGTERM</code> 信号给容器中运行的主进程，请求其停止运行，并等待一定时间（默认为10秒）让容器中的进程进行清理和保存工作。如果在指定的时间内容器中的进程仍未停止，则会发送一个 <code>SIGKILL</code> 信号，强制终止容器中的进程</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> stop [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>OPTIONS</code> 是一些可选的命令选项，<code>CONTAINER</code> 是要停止的一个或多个容器名称或 <code>ID</code>。一些常用的选项包括：</p><ul><li><code>-t</code>：指定等待容器停止的时间，单位为秒，默认10s</li><li><code>--signal</code>：发送给容器的信号</li></ul><p>除了<code>docker stop</code>命令，以前还可以使用<code>docker kill</code>命令，不过已经被废弃掉</p><h3 id="删除" tabindex="-1">删除 <a class="header-anchor" href="#删除" aria-label="Permalink to &quot;删除&quot;">​</a></h3><p><code>docker rm</code> 命令用于删除已经停止的 Docker 容器。该命令只能删除已经停止的容器，如果要删除正在运行的容器，需要先使用<code>docker stop</code>命令停止容器。以下是 docker rm 命令的语法：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> rm [OPTIONS] CONTAINER [CONTAINER...]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中，<code>OPTIONS</code> 是一些可选的命令选项，<code>CONTAINER</code> 是要删除的一个或多个容器名称或 <code>ID</code>。一些常用的选项包括：</p><ul><li><code>-f</code>：强制删除容器，即使容器正在运行</li><li><code>-v</code>：同时删除与容器关联的卷（volume）</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 强制删除正在运行的nginx容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> rm -f nginx</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>除了<code>docker rm</code>命令外，还可以使用<code>docker ps prune</code>命令来删除所有已经停止的容器并释放容器占用的资源，不过一般不常用，毕竟已经停止的容器一般倒不是不需要的：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 强制删除所有容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps prune -f</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="导入导出" tabindex="-1">导入导出 <a class="header-anchor" href="#导入导出" aria-label="Permalink to &quot;导入导出&quot;">​</a></h3><p>Docker 容器的导入导出可以用于将一个容器的文件系统打包成一个 tar 文件，并在另一台机器上重新导入为一个新的 Docker 镜像。这种方式可以方便地将一个容器迁移到另一台机器上，或者分享容器镜像给其他人使用。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li><p>导出的 tar 文件只包含容器的文件系统，并不包含容器的元数据（如容器的名称、ID、端口等信息）</p></li><li><p>导入的镜像只包含容器的文件系统，不包含容器的元数据和启动命令等信息</p></li><li><p>导出的 tar 文件和导入的镜像都是针对单个容器的，不包含容器依赖的镜像和容器的运行环境等信息。如果要迁移一个应用程序，需要将所有相关的容器和镜像一起导出导入</p></li></ol></div><ol><li>导出容器的文件系统为一个 tar 文件，使用 <code>docker export</code> 命令导出容器的文件系统为一个 <code>tar</code> 文件。例如，要将名为 <code>mycontainer</code> 的容器的文件系统导出为一个 <code>mycontainer.tar</code> 文件，可以使用以下命令：</li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> export mycontainer</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#C3E88D;"> mycontainer.tar</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>导入容器的文件系统为一个镜像，使用 <code>docker import</code> 命令将 <code>tar</code> 文件导入为一个新的 Docker 镜像。例如，要将名为 <code>mycontainer.tar </code>的 tar 文件导入为一个名为 myimage 的 Docker 镜像，可以使用以下命令：</li></ol><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> import mycontainer.tar myimage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="仓库" tabindex="-1">仓库 <a class="header-anchor" href="#仓库" aria-label="Permalink to &quot;仓库&quot;">​</a></h2><p>Docker Registry 是 Docker 平台的一个核心组件，它是一个用于存储、分发和管理 Docker 镜像的服务器端应用程序。Docker Registry 允许用户将本地创建的镜像上传到 Registry 中，并可以从 Registry 中下载和使用其他用户共享的镜像。它可以简化 Docker 镜像的管理和分发，提高应用的部署效率和可靠性。同时，Docker Registry 还提供了一系列的管理工具和服务，如 Docker Trusted Registry（DTR）、Harbor 等，可以帮助用户更好地管理和保护 Docker 镜像，确保安全和可靠性。</p><p>Docker Registry 可以分为两种类型：<code>公共Registry</code> 和 <code>私有Registry</code></p><p>每个registry中包含多个仓库，我们本地的registry其实也是这样，每个仓库有多个tag来表示不同版本的仓库镜像，你可以将registry看做是一个gitlab，gitlab中的每个仓库代表着每个镜像，仓库的tag表示镜像的版本</p><h3 id="公有仓库" tabindex="-1">公有仓库 <a class="header-anchor" href="#公有仓库" aria-label="Permalink to &quot;公有仓库&quot;">​</a></h3><p>公共 Registry 是由 Docker 公司维护的一组公共镜像仓库，其中最著名的是 Docker Hub。<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 是一个公共的 Docker Registry，包含了大量的 Docker 镜像，开发者可以通过 Docker Hub 来获取和分享 Docker 镜像。</p><p>Docker 公开仓库的镜像完整地址由三个部分组成：仓库地址、镜像名称和镜像标签。</p><p>其中，仓库地址指的是 Docker 镜像仓库的地址，Docker 官方的公开仓库地址为 docker.io，也可以使用其他的镜像仓库地址。镜像名称是指 Docker 镜像的名称，通常由两部分组成，即镜像的命名空间和镜像的名称，中间使用斜杠 / 隔开。例如，library/nginx 表示 Docker 官方的 nginx 镜像。镜像标签是指镜像的版本号或标识符，用冒号 : 隔开。例如，library/nginx:latest 表示最新版本的 Docker 官方的 nginx 镜像。</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 本地已经存在了 nginx:1.15.3</span></span>
<span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> docker images </span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;"> grep</span><span style="color:#C3E88D;"> nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">nginx</span><span style="color:#F78C6C;">  1.15</span><span style="color:#C3E88D;">.3  c5e5a72af32f  </span><span style="color:#F78C6C;">4</span><span style="color:#C3E88D;"> years ago  </span><span style="color:#F78C6C;">103</span><span style="color:#C3E88D;">MB</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 重新用完整的地址下载nginx:1.15.3，再次查看还是那个nginx</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> pull docker.io/library/nginx:1.15.3</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="私有仓库" tabindex="-1">私有仓库 <a class="header-anchor" href="#私有仓库" aria-label="Permalink to &quot;私有仓库&quot;">​</a></h3><p>私有 Registry 是指由用户自己搭建的 Docker 镜像仓库，用于存储和管理自己创建的 Docker 镜像。私有 Registry 可以在内部部署，也可以在公有云上部署，如 Amazon Web Services、Microsoft Azure 和 Google Cloud Platform 等。</p><p>博客中也介绍了关于私有仓库的搭建，你可以去阅读我的「<a href="/fullstack/docker/docker-repository.html">搭建docker私有仓库</a>」一文去了解完整的私库搭建过程。</p><h3 id="认证" tabindex="-1">认证 <a class="header-anchor" href="#认证" aria-label="Permalink to &quot;认证&quot;">​</a></h3><p>Docker 仓库认证是一种基于用户名和密码的身份验证机制，用于保护Docker镜像仓库中的镜像资源，防止未经授权的用户访问和下载镜像</p><ol><li><p>可以使用命令行登录：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> login [OPTIONS] [SERVER]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中<code>OPTIONS</code> 和 <code>SERVER</code>是可选部分，<code>OPTIONS</code> 的参数包括：</p><ul><li><code>-u</code>：登录的用户名</li><li><code>-p</code>：登录密码 <code>SERVER</code> 则是仓库的地址，默认是docker官方的仓库地址 你可以这样使用：</li></ul><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 一键式登录  ====&gt;   官方不推荐，密码会暴露😂</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> login -u root -p password [url]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 交互式</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> login [url]</span></span>
<span class="line"><span style="color:#FFCB6B;">Login</span><span style="color:#C3E88D;"> with your Docker ID to push and pull images from Docker Hub. If you don</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">t have a Docker ID, head over to https://hub.docker.com to create one.</span></span>
<span class="line"><span style="color:#C3E88D;">Username: root</span></span>
<span class="line"><span style="color:#C3E88D;">Password:</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>直接在docker的<code>$HOME/.docker/config.json</code>中配置仓库地址和登录凭证，通过命令行登录后，会在你的<code>$HOME/.docker/config.json</code>文件中添加仓库和登录凭证，你可以直接在此文件中添加你想要登录的地址和密码，如果没有此文件自行创建即可，配置文件如下：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">auths</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 仓库地址，这里是官方地址</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">https://index.docker.io/v1/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		// 凭证</span></span>
<span class="line"><span style="color:#89DDFF;">		&quot;</span><span style="color:#F78C6C;">auth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">aWhlbmdzaHVhaToxMjM0NTYK</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">	},</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 其他仓库</span></span>
<span class="line"><span style="color:#89DDFF;">	&quot;</span><span style="color:#FFCB6B;">192.168.10.10:8000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;">		&quot;</span><span style="color:#F78C6C;">auth</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">aWhlbmdzaHVhaToxMjM0NTYK</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#89DDFF;">	},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>上面的配置文件中存在两个仓库地址，当使用<code>docker login</code>时如果不指明地址默认会登录官方仓库，在登录时docker会检查本地的<code>$HOME/.docker/config.json</code>中是否存在已经登录的凭证，如果存在会直接登录，否则会和第一步一样重新输入账号、密码。</p><p>以上的<code>auth</code>值其实就是<code>账户:密码</code>的base64结果，其加密结果并不安全，可以通过base64反解码出来，我们试下：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> echo </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">aWhlbmdzaHVhaToxMjM0NTYK</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> |</span><span style="color:#FFCB6B;"> base64</span><span style="color:#C3E88D;"> --decode</span></span>
<span class="line"><span style="color:#FFCB6B;">ihengshuai:123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><blockquote><p>所以不要轻易将加密后的密码泄露掉</p></blockquote></li><li><p>退出登录</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> logout [SERVER]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>退出后同样会删除<code>$HOME/.docker/config.json</code>中对应的仓库地址和密码</p></li></ol><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本文从docker的架构、全局命令、镜像、容器和仓库入门，简单的介绍了docker的基本使用，这些命令基本上囊括了docker常见的命令行使用方式，需要大家多多使用才能熟练，虽然docker的命令在生产环境的使用几率不是很多，但是对于我们快速启动一个想要的环境或验证一些想法都是非常友好的，总之熟能生巧。</p>`,110);function i(d,y,b,u,C,D){const n=a("Reward"),e=a("Gitalk");return c(),o("div",null,[t,s(n),s(e)])}const h=l(r,[["render",i]]);export{F as __pageData,h as default};
