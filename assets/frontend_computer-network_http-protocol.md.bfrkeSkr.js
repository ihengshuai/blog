import{_ as e,c as o,a as t,J as s,V as a,o as r,G as n}from"./chunks/framework.SV1ROkXV.js";const C=JSON.parse('{"title":"HTTP协议及安全防范","description":"HTTP超文本传输协议是一个用于 Web 应用程序通信的应用层协议。它是一种客户端-服务器协议，客户端通过发送请求到服务器来获取资源，服务器则根据请求返回响应。HTTP协议也是受攻击的重灾区如XSS、CSRF攻击，学会使用相关措施如CSP、HTTP安全防范等有效防止攻击发生","frontmatter":{"title":"HTTP协议及安全防范","description":"HTTP超文本传输协议是一个用于 Web 应用程序通信的应用层协议。它是一种客户端-服务器协议，客户端通过发送请求到服务器来获取资源，服务器则根据请求返回响应。HTTP协议也是受攻击的重灾区如XSS、CSRF攻击，学会使用相关措施如CSP、HTTP安全防范等有效防止攻击发生","keywords":"HTTP状态码,跨域,HTTP范围请求,大文件上传,大文件下载,TLS握手,WebSocket,HTTP攻击,HTTP缓存,协商缓存,强缓存,KeepAlive,HTTPS,CSP,Content-Secure-Policy,HTTP2,QUIC,HTTP3","logo":"https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/icon-http.png"},"headers":[],"relativePath":"frontend/computer-network/http-protocol.md","filePath":"frontend/computer-network/http-protocol.md","lastUpdated":1709440279000}'),c={name:"frontend/computer-network/http-protocol.md"},i=a(`<h1 id="http协议及安全防范" tabindex="-1">HTTP协议及安全防范 <a class="header-anchor" href="#http协议及安全防范" aria-label="Permalink to &quot;HTTP协议及安全防范&quot;">​</a></h1><p>HTTP（Hypertext Transfer Protocol）超文本传输协议是一个用于 Web 应用程序通信的应用层协议。它是一种客户端-服务器协议，客户端通过发送请求到服务器来获取资源，服务器则根据请求返回响应。HTTP 协议通常使用 TCP作为传输协议，但也可以使用其它传输协议</p><h2 id="uri、url、urn" tabindex="-1">URI、URL、URN <a class="header-anchor" href="#uri、url、urn" aria-label="Permalink to &quot;URI、URL、URN&quot;">​</a></h2><p>URI是一个通用的术语，用于唯一地标识互联网上的任何资源。它包括两个主要的部分：标识符和解析器。标识符是用来唯一标识一个资源的字符串，而解析器则是用来解析这个字符串，以便访问该资源。URI包括两种类型：<code>URL</code>和<code>URN</code></p><p>URL是URI的一个子集，它是一种具体的URI形式，用来唯一地标识互联网上的资源，并指定如何访问该资源。URL包含以下信息：</p><ul><li>协议：访问该资源所使用的协议（如HTTP、FTP等）</li><li>域名或IP地址：资源所在的服务器的主机名或IP地址</li><li>端口：用于访问该资源的服务器端口号</li><li>路径：资源所在服务器上的路径和文件名</li></ul><p>以下是一些URL的例子：</p><ul><li><code>http://www.example.com/index.html</code></li><li><code>ftp://ftp.example.com/pub/file.txt</code></li><li><code>https://www.example.com/login</code></li></ul><p>URN是另一种URI类型，用来给资源一个永久的、唯一的名称，而不是标识该资源的位置。URN不包括访问该资源的方式。URN的例子包括：</p><ul><li>urn:isbn:978-1-491-90234-1</li><li>urn:uuid:f81d4fae-7dec-11d0-a765-00a0c91e6bf6</li></ul><p>在实际应用中，URL是使用最广泛的URI类型。URL既能用来表示静态资源（如网页、图片、视频等），也能用来表示动态资源（如Web服务API、数据库查询等）</p><h2 id="常见状态码" tabindex="-1">常见状态码 <a class="header-anchor" href="#常见状态码" aria-label="Permalink to &quot;常见状态码&quot;">​</a></h2><p>HTTP状态码是指当客户端向服务器发送请求时，服务器返回的响应状态码。它表示了服务器对请求的处理结果和状态。HTTP状态码由3个数字组成，第一个数字表示响应类别，后两个数字没有分类的作用。HTTP状态码范围从100到599，其中100到199是信息性状态码，200到299表示成功，300到399表示重定向，400到499表示客户端错误，500到599表示服务器错误，常见的状态码如下：</p><table><thead><tr><th>状态码</th><th>类型</th><th>含义</th><th>描述</th></tr></thead><tbody><tr><td>100</td><td>Informational</td><td>Continue</td><td>服务器已经接收到了请求头，并且客户端应继续发送请求主体部分</td></tr><tr><td>101</td><td>Informational</td><td>Switching Protocols</td><td>服务器正在根据客户端的请求切换协议（比如升级Websocket协议）</td></tr><tr><td>102</td><td>Informational</td><td>Processing</td><td>服务器正在处理请求，但尚未完成处理</td></tr><tr><td>200</td><td>Success</td><td>OK</td><td>请求已经成功，并返回了请求所需要的信息</td></tr><tr><td>201</td><td>Success</td><td>Created</td><td>请求已经成功，并在服务器上创建了新的资源</td></tr><tr><td>202</td><td>Success</td><td>Accepted</td><td>请求已经被接受，但尚未被处理完成</td></tr><tr><td>204</td><td>Success</td><td>No Content</td><td>请求已经成功，但不需要返回任何数据（配置跨域时通常使用204返回）</td></tr><tr><td>206</td><td>Success</td><td>Partial Content</td><td>请求成功，但是只返回了部分内容(范围请求)</td></tr><tr><td>301</td><td>Redirection</td><td>Moved Permanently</td><td>请求的资源已经被永久转移到新的URL</td></tr><tr><td>302</td><td>Redirection</td><td>Found</td><td>请求的资源已经临时转移到新的URL</td></tr><tr><td>304</td><td>Redirection</td><td>Not Modified</td><td>客户端缓存的资源是最新的，服务器返回的内容为空</td></tr><tr><td>307</td><td>Redirection</td><td>Temporary Redirect</td><td>请求的资源已经临时转移到新的URL</td></tr><tr><td>400</td><td>Client Error</td><td>Bad Request</td><td>请求格式错误，服务器无法解析该请求</td></tr><tr><td>401</td><td>Client Error</td><td>Unauthorized</td><td>请求未经授权，需要进行身份验证</td></tr><tr><td>403</td><td>Client Error</td><td>Forbidden</td><td>请求被拒绝，拒绝访问</td></tr><tr><td>404</td><td>Client Error</td><td>Not Found</td><td>请求的资源不存在</td></tr><tr><td>408</td><td>Client Error</td><td>Request Timeout</td><td>请求超时</td></tr><tr><td>409</td><td>Client Error</td><td>Conflict</td><td>请求与服务器上的资源发生冲突</td></tr><tr><td>415</td><td>Client Error</td><td>Unsupported Media Type</td><td>服务器无法处理请求中所包含的媒体类型</td></tr><tr><td>429</td><td>Client Error</td><td>Too Many Requests</td><td>请求次数超过了限制</td></tr><tr><td>500</td><td>Server Error</td><td>Internal Server Error</td><td>服务器发生了错误，无法完成请求</td></tr><tr><td>501</td><td>Server Error</td><td>Not Implemented</td><td>服务器不支持请求的功能</td></tr><tr><td>502</td><td>Server Error</td><td>Bad Gateway</td><td>服务器作为网关或代理，从上游服务器收到的响应无效或错误</td></tr><tr><td>503</td><td>Server Error</td><td>Service Unavailable</td><td>服务器暂时无法处理请求，通常是由于服务器过载或维护</td></tr><tr><td>504</td><td>Server Error</td><td>Gateway Timeout</td><td>服务器充当网关或代理时，没有及时从上游服务器收到请求</td></tr></tbody></table><h2 id="http报文" tabindex="-1">HTTP报文 <a class="header-anchor" href="#http报文" aria-label="Permalink to &quot;HTTP报文&quot;">​</a></h2><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/http-msg-202004191111111.svg" alt=""> HTTP报文是HTTP通信中的数据传输单位，可以分为<u>请求报文</u>和<u>响应报文</u>两种类型。请求报文由请求行、请求头部和请求正文组成，其中<u>请求行包括请求方法、请求URI和HTTP协议版本</u>，请求头部包括若干个字段和值，用于描述请求的相关信息，请求正文可选，通常用于传输POST请求中的表单数据等内容；响应报文由状态行、响应头部和响应正文组成，其中<u>状态行包括HTTP协议版本、状态码和状态描述</u>，响应头部包括若干个字段和值，用于描述响应的相关信息，响应正文通常包含响应的实际内容</p><p>抓包查看HTTP报文： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230419172944747.png" alt=""></p><div class="img-title">请求报文</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230419173036782.png" alt=""></p><div class="img-title">响应报文</div><h2 id="首部字段" tabindex="-1">首部字段 <a class="header-anchor" href="#首部字段" aria-label="Permalink to &quot;首部字段&quot;">​</a></h2><p>HTTP的首部字段可以分为通用首部、请求首部和响应首部三类。以下是这三类首部字段的一些常见示例：</p><p>通用首部字段：</p><ul><li>Cache-Control：指定缓存机制</li><li>Connection：指定连接类型</li><li>Date：指定消息创建时间</li><li>Pragma：指定缓存机制</li><li>Trailer：指定尾部（不常用）</li><li>Transfer-Encoding：指定传输编码方式</li><li>Upgrade：升级为其他协议</li><li>Via：指定代理服务器的相关信息</li><li>Warning：包含一些警告信息</li></ul><p>请求首部字段：</p><ul><li>Accept：指定可接受的响应类型</li><li>Accept-Encoding：指定可接受的内容编码方式</li><li>Authorization：指定身份认证信息</li><li>Cookie：指定来自客户端的Cookie信息</li><li>Host：指定请求的主机名和端口号</li><li>Referer：指定请求来源</li><li>User-Agent：指定客户端的用户代理信息</li></ul><p>响应首部字段：</p><ul><li>Accept-Ranges：指定可接受的字节范围</li><li>Age：指定缓存资源生成的时间</li><li>Content-Encoding：指定响应正文的编码方式</li><li>Content-Length：指定响应正文的长度</li><li>Content-Type：指定响应正文的类型(Multipurpose Internet Mail Extensions 或 MIME 类型)，可以在这里查看更多的<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types" target="_blank" rel="noreferrer">MIME类型</a></li><li>Server：指定服务器的信息</li><li>Expires：资源过期时间，基于具体时间</li><li>Last-Modified：资源修改时间，用于缓存</li><li>Etag：文件编码，用于判断缓存</li></ul><h2 id="请求方法" tabindex="-1">请求方法 <a class="header-anchor" href="#请求方法" aria-label="Permalink to &quot;请求方法&quot;">​</a></h2><p>HTTP定义了一些请求方法（Request Method），用于定义客户端与服务器之间进行请求和响应的行为。下面是HTTP的请求方法及其用途：</p><ul><li><code>GET</code>：用于请求指定资源。GET 请求应该只用于获取资源，而不应该对资源进行修改。GET 方法是幂等的，不会对资源造成任何更改，因此不会对安全造成威胁。然而，使用 GET 方法时应当注意避免将敏感信息暴露在 URL 中，因为 URL 可能会被缓存、浏览器历史记录、服务器日志等记录下来</li><li><code>HEAD</code>：与 GET 请求类似，但是服务器不会返回请求的资源，只返回头部信息。HEAD 请求常用于获取资源的元信息，如 Content-Type、Content-Length 等</li><li><code>POST</code>：用于向服务器提交数据，POST 请求可能会导致服务器的状态发生变化。POST 请求常用于提交表单数据，例如登录、注册等。由于 POST 请求通常包含用户输入的敏感数据，因此可能受到跨站脚本攻击、跨站请求伪造攻击等安全威胁。为了防止这些攻击，可以在 POST 请求中使用 CSRF token 或者验证码等技术进行验证</li><li><code>PUT</code>：用于向服务器上传指定资源。PUT 请求是幂等的，即多次执行相同的 PUT 请求，对服务器的影响是相同的。PUT 请求通常用于上传文件或者更新资源</li><li><code>DELETE</code>：用于请求删除指定资源。DELETE 请求用于删除服务器上的资源</li><li><code>CONNECT</code>：用于建立与服务器的隧道连接，通常用于 HTTPS 的代理服务器连接</li><li><code>OPTIONS</code>：用于查询服务器支持的请求方法和头部信息，通常用于跨域请求中的预检请求（Preflight Request）</li><li><code>TRACE</code>：用于跟踪请求-响应的传输路径，通常用于调试和测试</li><li><code>PATCH</code>：用于对资源进行局部更新。PATCH 请求可以用于更新资源的一部分，而不需要替换整个资源</li></ul><h2 id="http演变" tabindex="-1">HTTP演变 <a class="header-anchor" href="#http演变" aria-label="Permalink to &quot;HTTP演变&quot;">​</a></h2><p>HTTP是一种用于在Web上传输数据的协议，经过多次演变和改进，逐渐增加了新的特性和功能，包括支持多种请求方法、请求头和响应头、复用TCP连接、持久连接、分块传输编码、服务器推送、头部压缩等，以提高Web性能和效率。HTTP的演变版本包括HTTP/0.9、HTTP/1.0、HTTP/1.1、HTTP/2、HTTP/3，每个版本都在不断地改进和完善，以满足不同的需求和应用场景</p><h2 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h2><p>HTTP/1.1是目前应用最广泛的HTTP协议版本之一，它引入了多个新特性，例如复用TCP连接、持久连接、分块传输编码、虚拟主机等，这些特性使得HTTP/1.1能够更加高效地传输数据，从而提高了Web性能和效率。同时，HTTP/1.1也支持多种请求方法和响应状态码，例如GET、POST、PUT、DELETE等方法，以及200、404、500等状态码。HTTP/1.1仍然是Web开发中的重要组成部分，尽管有着一些限制和缺点，但仍然是Web传输协议中的重要参考标准之一</p><p>HTTP/1.1的缺点是队头阻塞</p><p>💡<strong>什么是队头阻塞</strong></p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/tcp-header-pending.svg" alt="http-header-pending"></p><p><u>HTTP/1.1中会复用同一个TCP连接(浏览器会限制同一个域名TCP最大同时连接数)，当同一个连接同时请求多个资源时，它们会按顺序进行数据传输，如果前者丢包或者响应时间过长就会阻塞后面的请求，或者后面的TCP连接会等待前面的传输，这就是队头阻塞</u></p><h2 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于如何使用HTTP2，这里举例用nginx配置HTTP2，详细步骤已经在<a href="/frontend/nginx/index.html#配置http2-3">『nginx使用手册』</a>文章中说明了</p></div><p>HTTP/2基于SPDY协议进行了扩展和改进，提供了多路复用、头部压缩、服务器推送等多个新特性，使得HTTP2比HTTP/1.1更加高效和快速</p><p>HTTP2的优点：</p><ul><li>多路复用：在一个TCP连接中同时传输多个请求和响应，解决了HTTP/1.1中的队头阻塞问题</li><li>头部压缩：采用HPACK算法对请求头和响应头进行压缩，减少了传输数据的大小，提高了网络性能</li><li>服务器推送(Server Push)：能够将相关资源预加载到客户端，进一步提高了Web性能。</li></ul><p>HTTP2的缺点：</p><ul><li>虽然HTTP2解决了HTTP/1.1中的队头阻塞问题，但在高延迟的网络环境下仍然存在性能瓶颈</li><li>实现HTTP2需要升级服务器和客户端软件，对现有的Web生态系统具有一定的影响</li></ul><h3 id="多路复用" tabindex="-1">多路复用 <a class="header-anchor" href="#多路复用" aria-label="Permalink to &quot;多路复用&quot;">​</a></h3><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/http2-multiplexing-20200423123.svg" alt=""> 多路复用（Multiplexing）是其最重要的特性之一，它允许在同一 TCP 连接上同时传输多个请求和响应。在传统的 HTTP/1.1 协议中，每个请求和响应都需要建立一次 TCP 连接，尽管可以使用KeepAlive减少TCP的握手，但浏览器限制了同域名的的TCP最大连接数，因此多个请求和响应之间存在着明显的串行化和等待时间，这会导致性能瓶颈。而在 HTTP/2 中，通过多路复用的技术，所有请求和响应都可以在同一个 TCP 连接上并发处理，大大提高了网站的性能和吞吐量</p><p>具体来说，HTTP/2 的多路复用技术通过将所有的请求和响应分解成若干个小的数据流（Stream），并且每个数据流可以被细分成若干个数据帧（Frame）来传输。这样，就可以在同一个 TCP 连接上同时传输多个数据流，而不需要等待某个请求或响应的完成。由于同一 TCP 连接上可以并发处理多个数据流，因此 HTTP/2 的多路复用可以大大提高网站的性能，减少网络延迟和响应时间</p><p>💡<strong>使用了HTTP2就不会有队头阻塞了吗？</strong></p><p>从以上的角度可以理解不存在队头阻塞了，但在弱网环境下依然会存在。某个数据流的帧因为网络问题或其他原因无法及时传输到对端时，其后面的数据流会一直等待，直到该数据流的所有帧全部传输完成。通常可以使用帧优先级的策略，将重要的数据优先传输，不重要的放后面</p><blockquote><p>由于HTTP2都会共用同一个TCP连接，弱网环境下可能传输效率比HTTP/1.1更差</p></blockquote><h3 id="serverpush" tabindex="-1">ServerPush <a class="header-anchor" href="#serverpush" aria-label="Permalink to &quot;ServerPush&quot;">​</a></h3><p><code>ServerPush</code>顾名思义服务器推送技术，通常客户端必须首先发送请求才能获取到服务器上的资源，例如 HTML 文件、JavaScript、CSS 文件和图片等。而在 HTTP2 中，服务器可以在收到客户端请求之前主动将一些资源推送给客户端，这样客户端就可以提前获取到这些资源，从而避免了等待服务器响应的时间，减少了页面加载的延迟</p><p>使用nginx配置ServerPush</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#FFCB6B;"> / </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#89DDFF;">	root </span><span style="color:#BABED8;">  /usr/share/nginx/html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	index </span><span style="color:#BABED8;"> index.html index.htm</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	# push某个静态资源</span></span>
<span class="line"><span style="color:#89DDFF;">	http2_push </span><span style="color:#BABED8;">/style.css</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>目前在笔者电脑浏览器上查看ServerPush类型网络已经不明显了，以下是Chrome（112）和Firefox（109）的面板结果： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/http2-serverpush-202004231111.svg" alt=""> 出了用浏览器查看ServerPush的请求，也可以使用<code>nghttp</code>工具进行查看：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> nghttp https://general-mac.com -ans</span></span>
<span class="line"><span style="color:#FFCB6B;">id</span><span style="color:#C3E88D;">  responseEnd requestStart  process code size request path</span></span>
<span class="line"><span style="color:#FFCB6B;"> 13</span><span style="color:#C3E88D;">      +494us        +50us    </span><span style="color:#F78C6C;">444</span><span style="color:#C3E88D;">us  </span><span style="color:#F78C6C;">200</span><span style="color:#F78C6C;">  176</span><span style="color:#C3E88D;"> /</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">  2</span><span style="color:#C3E88D;">      +567us </span><span style="color:#BABED8;">*</span><span style="color:#C3E88D;">     +431us    </span><span style="color:#F78C6C;">136</span><span style="color:#C3E88D;">us  </span><span style="color:#F78C6C;">200</span><span style="color:#F78C6C;">   67</span><span style="color:#C3E88D;"> /style.css</span></span>
<span class="line"><span style="color:#FFCB6B;"> 15</span><span style="color:#C3E88D;">     +2.38ms       +584us   </span><span style="color:#F78C6C;">1.80</span><span style="color:#C3E88D;">ms  </span><span style="color:#F78C6C;">200</span><span style="color:#F78C6C;">  99</span><span style="color:#C3E88D;">K /images/k8s-fine.jpg</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>以上<code>responseEnd为*</code>的表示ServerPush类型的资源</p><p><strong>ServerPush问题</strong></p><p>ServerPush主动推送资源可能会存在以下问题：</p><ul><li>推送的资源不被缓存，当一些静态资源设置了缓存时，server端不知道直接推送已经被缓存的静态资源</li><li>一些需要身份验证的资源可能被错误的推送</li><li>推送对首屏的渲染并没有太大用处，现在大量使用CDN，静态资源也不一定存在同一个服务上</li></ul><p>这里不做详细的问题分析，可以看看<a href="http://www.alloyteam.com/2017/04/guide-http2-server-push-part2" target="_blank" rel="noreferrer">AlloyTeam这篇文章</a></p><h3 id="头部压缩" tabindex="-1">头部压缩 <a class="header-anchor" href="#头部压缩" aria-label="Permalink to &quot;头部压缩&quot;">​</a></h3><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230423165652358.png" alt="header max size"></p><div class="img-title"> HTTP/1.1 Header </div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230423171026935.png" alt=""></p><div class="img-title"> HTTP/2 Header </div>`,68),F=a(`<p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/http2-hpack-header-compression.png" alt=""></p><p>HTTP2的头部压缩技术大体包含以下部分：</p><ul><li>客户端和服务端维护一份相同的静态字典表，包含常见的头部键或键值</li><li>客户端和服务端维护维护一份动态字典表，根据实际情况动态添加字典表</li><li>上下文感知存储已经传输过的头部信息，避免重复传输相同的头部信息</li><li>使用哈弗编码(Huffman)，这里查看<a href="https://httpwg.org/specs/rfc7541.html#static.table.definition" target="_blank" rel="noreferrer">静态哈弗编码表（Huffman）</a></li></ul><blockquote><p>本文不对头部压缩做深入解释，可以阅读<a href="https://halfrost.com/http2-header-compression" target="_blank" rel="noreferrer">详解 HTTP/2头压缩算法 —— HPACK</a>和<a href="https://halfrost.com/http2-hpack-example" target="_blank" rel="noreferrer">HTTP/2 HPACK实际应用</a>文章了解更多</p></blockquote><h2 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h2><p>HTTP/3基于QUIC协议进行开发，提供了一些新特性来进一步提高Web性能。与HTTP/2相比，HTTP/3最大的不同在于底层传输协议的改变，使用了QUIC协议代替了TCP协议，并使用<code>TLS 1.3</code>作为底层安全传输协议</p><p>HTTP/3的优点：</p><ul><li>采用QUIC协议，相比TCP协议，具有更低的延迟和更好的拥塞控制</li><li>使用TLS 1.3协议，提供更加安全的传输</li><li>在HTTP/2的基础上进一步优化，使得Web性能更加高效</li></ul><p>HTTP/3的缺点：</p><ul><li>与HTTP/2不兼容，需要新的协议栈的支持</li><li>HTTP/3在早期的实现中存在一些问题，可能导致不稳定或性能问题</li><li>目前，HTTP/3还处于实验阶段，尚未被广泛采用，因此可能会存在一些不确定因素</li></ul><h2 id="https" tabindex="-1">HTTPS <a class="header-anchor" href="#https" aria-label="Permalink to &quot;HTTPS&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于如何将HTTP升级为HTTPS，这里举例用nginx配置HTTPS，详细步骤已经在<a href="/frontend/nginx/base.html#配置https">『nginx使用手册』</a>文章中说明了，你可以参考其并结合wireshark等其他工具进行抓包分析</p></div><p>HTTP 是明文协议，数据传输过程中不加密，容易被攻击者窃取、篡改或冒充。而 HTTPS 通过使用 SSL/TLS 协议对数据进行加密和认证，保证了数据在传输过程中的安全性，防止数据被窃取、篡改或冒充。HTTPS不是新的协议仍是基于HTTP协议在传输层TCP之上添加了一层安全协议SSL/TSL可以说<code>HTTPS = HTTP + SSL/TLS</code>，大概过程如下图： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/https-model-20200505212123.svg" alt=""></p><h3 id="ssl-tls" tabindex="-1">SSL/TLS <a class="header-anchor" href="#ssl-tls" aria-label="Permalink to &quot;SSL/TLS&quot;">​</a></h3><p>为了实现HTTP报文加密传输，引入了SSL、TLS协议。<code>SSL（Secure Socket Layer）</code>协议和 <code>TLS（Transport Layer Security）</code>协议是用于保护网络通信安全的协议，它们主要用于在客户端和服务器之间建立加密连接，保证通信过程中的机密性、完整性和可信性</p><p>SSL 和 TLS 协议工作在传输层之上，通过在传输层与应用层之间插入一层安全层来保护应用层数据的安全性。由于 SSL 协议存在一些安全漏洞和缺陷，因此 TLS 协议得以诞生并逐渐取代了 SSL 协议。TSL也经历多个版本的迭代：</p><ol><li>TLS 1.0：1999 年发布，主要基于 SSL 3.0 开发而来，对 SSL 3.0 中的一些安全漏洞做了修复，支持对称加密、非对称加密和消息摘要等算法。但是该协议存在一些缺陷，如 CBC 攻击等</li><li>TLS 1.1：2006 年发布，修复了 TLS 1.0 中的一些缺陷和漏洞，支持更安全的加密算法和扩展性。此版本不支持 SSL 2.0 和 SSL 3.0</li><li>TLS 1.2：2008 年发布，主要是在 TLS 1.1 的基础上进行了改进，支持更安全的加密算法和协商过程，增强了安全性和性能，目前大部分使用HTTPS的都使用了TLS1.2</li><li>TLS 1.3：2018 年发布，主要是在 TLS 1.2 的基础上进行了改进，优化了握手协议，支持 0-RTT 模式，提升了性能和安全性</li></ol><p>随着 TLS 协议版本的迭代，不断加强了安全性、性能和扩展性。建议使用 TLS 1.2 及以上版本的协议，以获得更好的安全性保障</p><h3 id="对称-非对称加密" tabindex="-1">对称/非对称加密 <a class="header-anchor" href="#对称-非对称加密" aria-label="Permalink to &quot;对称/非对称加密&quot;">​</a></h3><p>在讲握手前先了解下对称和非对称加密的概念，对称加密和非对称加密都是计算机安全领域中常用的加密算法，用于保护数据的安全性。它们的主要区别在于加密和解密时使用的密钥类型不同</p><p><code>对称加密</code>是指在加密和解密过程中使用<u>同一个密钥的加密算法</u>。也就是说，加密和解密都使用相同的密钥，因此这种加密算法也称为“共享密钥加密”；<code>非对称加密</code>则使用不同的密钥进行加密和解密。这种加密算法需要一对密钥：一个公钥和一个私钥。公钥可以随意分发给其他人，而私钥则必须保持私密。使用<u>公钥加密的数据只能用私钥解密，使用私钥加密的数据只能用公钥解密</u></p><p>两种加密算法各有优缺点：</p><ul><li>对称加密算法的优点是加密和解密速度快，适用于大量数据的加密和解密。但是，由于密钥需要在通信双方之间共享，所以在密钥分发和管理方面存在安全隐患</li><li>非对称加密算法的优点是密钥不需要在通信双方之间共享，因此安全性更高，但加密和解密速度相对较慢，适用于少量数据的加密和解密</li></ul><p>而TLS结合了两种加密算法的优点，<u>握手阶段使用非对称加密进行密钥的共享，握手后的数据传输使用对称加密</u>；为什么要这样设计呢？由于握手阶段双方还没有互相认证，如果使用对称加密共享秘话，这对外界都是透明的，黑客很容易拿到密钥，会有很大的安全隐患。而使用非对称加密，双方可以在本地根据一系列规则生成对应的规则避免密钥传输或者被中间人破解，大大提高安全性。由于非对称加密过程很耗时，在握手成功后二者便使用对称加密进行数据传输缩短解密时间</p><h3 id="tls握手" tabindex="-1">TLS握手 <a class="header-anchor" href="#tls握手" aria-label="Permalink to &quot;TLS握手&quot;">​</a></h3><p>TLS有很多个版本目前主流的版本为TLS1.2和TLS1.3，每个协议版本都有多个加密算法如：RSA、DH，这里简单介绍下TLS1.2的RSA握手和DH握手，具体的密码学原理不做介绍，自行科普</p><h4 id="i、rsa握手" tabindex="-1">I、RSA握手 <a class="header-anchor" href="#i、rsa握手" aria-label="Permalink to &quot;I、RSA握手&quot;">​</a></h4><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/tls-rsa-2020050722033.svg" alt=""></p><ol><li><code>Client Hello</code>：客户端发送问候消息，携带着一个随机数、加密套件、协议版本发送给服务端</li><li><code>Server Hello</code>：服务端收到ClientHello根据Client的加密套件选择一个密码套件，并生成一个随机数，确定协议版本后也发送一个ServerHello给客户端，其中包含<u>密码套件、server随机数、协议版本、证书</u></li><li><code>验证证书</code>：客户端根据CA机构验证证书的合法性，如果不合法将会握手失败，反之继续</li><li><code>生成预主密钥</code>：客户端从证书中取出公钥，生成第二个随机数（pre-master）也就是预主密钥，使用公钥加密后发送给服务端</li><li><code>私钥解密</code>：服务端收到客户端发送的预主密钥后，使用自己的私钥解密得到预主密钥</li><li><code>会话密钥</code>：此时客户端和服务端都有3个随机数，双方都根据3个随机数和密码套件生成会话密钥，用来后续的通信加密</li><li><code>Client Encrypted Message</code>：客户端使用会话密钥加密消息发送一个会话摘要，等待服务端的验证</li><li><code>Server Encrypted Message</code>：服务端收到客户端的消息并验证后，也使用会话秘钥给客户端发送一个会话摘要</li><li><code>握手成功</code>：双方验证成功后便进入正式数据传输阶段</li></ol><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/tls-wirewark-202005072234.svg" alt="wireshark抓包"></p><div class="img-title">wireshark抓包</div><h4 id="ii、dh-diffie-hellman-握手" tabindex="-1">II、DH(Diffie-Hellman)握手 <a class="header-anchor" href="#ii、dh-diffie-hellman-握手" aria-label="Permalink to &quot;II、DH(Diffie-Hellman)握手&quot;">​</a></h4><ol><li>客户端发送一个 ClientHello 消息给服务器，其中包含SSL/TLS协议版本号、加密套件列表、随机数等信息</li><li>服务器返回一个 ServerHello 消息给客户端，其中包含 SSL/TLS 协议版本号、加密套件（如 TLS_DHE_RSA_WITH_AES_256_GCM_SHA384）、随机数等信息</li><li>服务器发送一个 Certificate 消息，包含服务器的证书信息，包括公钥和证书链</li><li>服务器发送一个 ServerKeyExchange 消息，其中包含 DH 公开参数和签名信息。DH公开参数包括质数p、底数g和服务器的公钥，签名信息是由服务器的私钥生成的，用于验证公开参数的合法性</li><li>客户端接收到服务器发送的 DH 公开参数后，生成一个随机数（ClientRandom），并计算出 DH 密钥交换的临时公钥。然后，客户端使用服务器的公钥和DH密钥交换的临时公钥，计算出一个共享密钥</li><li>客户端发送一个 ClientKeyExchange消息，其中包含使用服务器的公钥和DH密钥交换的临时公钥计算出的共享密钥的信息</li><li>客户端发送一个 ChangeCipherSpec 消息，表示从现在开始使用新的密钥加密通信</li><li>客户端发送一个 Finished 消息，其中包含使用新密钥加密的随机数和一个验证信息。服务器接收到该消息后，使用相同的方式验证信息的正确性，验证通过后，向客户端发送一个 ChangeCipherSpec 消息和一个 Finished 消息</li><li>客户端接收到服务器发送的消息后，使用新密钥解密 Finished 消息中的验证信息，验证通过后，握手结束，可以开始安全通信</li></ol><p>DH 密钥交换算法的主要思想是利用质数p和底数g，实现双方在不直接交换密钥的情况下，生成相同的共享密钥 K。具体过程如下：</p><ul><li>选择两个质数 p 和 g，公开 p 和 g 的值</li><li>Alice 选择一个私钥 a，并计算出 A = g^a mod p，然后将 A 发送给 Bob</li><li>Bob 选择一个私钥 b，并计算出 B = g^b mod p，然后将 B 发送给 Alice</li><li>Alice 计算出共享密钥 K = B^a mod p</li><li>Bob 计算出共享密钥 K = A^b mod p</li></ul><blockquote><p>DH算法是TLS1.2中主流的加密算法，详细过程请自行翻阅相关文档</p></blockquote><h4 id="iii、tls1-3握手" tabindex="-1">III、TLS1.3握手 <a class="header-anchor" href="#iii、tls1-3握手" aria-label="Permalink to &quot;III、TLS1.3握手&quot;">​</a></h4><p>TLS 1.3相较于TLS 1.2在握手阶段做出了以下的改变：</p><ul><li>废除了RSA、DH和DSS等非对称加密算法作为握手过程的加密方式，只保留了部分的加密算法</li><li>TLS 1.3的握手协议只有两个往返，比TLS 1.2简化了一半。TLS 1.3中取消了不必要的消息、字段和握手阶段，并将密钥交换过程和认证过程合并到了一个握手消息中，从而大大减少了握手时间和握手消息数量，提高了握手效率</li><li>TLS 1.3中增加了0-RTT模式，允许客户端在建立新连接时将上一次会话的密钥用于加密数据，从而避免了连接建立时的握手延迟，提高了连接速度</li></ul><blockquote><p>💡什么是前向安全性？在RSA算法中如果黑客得到了证书密钥，就可以对以往的会话进行破解，而DH算法在握手时都会生成临时的密钥对，即使黑客拿到了密钥也只会对当前会话造成影响，而不会对之前的历史消息造成影响，这就是前向安全性</p></blockquote><h2 id="http缓存" tabindex="-1">HTTP缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;HTTP缓存&quot;">​</a></h2><p>HTTP最常见的优化资源的手段就是缓存，使用缓存可以高效的减少网络资源的请求，加快页面的渲染，减轻服务器负载提高网站的可用性</p><p>通常缓存由浏览器和服务器二者相互协商的实现的，其中常见的强缓存、协商缓存等等，由于篇幅原因这里不再详细展开，可以阅读我的<a href="/article/2020/web-cache.html">「web缓存策略」</a>一文</p><h2 id="跨域" tabindex="-1">跨域 <a class="header-anchor" href="#跨域" aria-label="Permalink to &quot;跨域&quot;">​</a></h2><p>什么是跨域？相信每个初次遇到此情况的同学都会很迷惑。跨域问题的本质是<u>浏览器为了保护用户的安全而采取的安全策略</u><code>同源策略（Same-Origin Policy）</code>。同源策略是一种安全策略，它要求浏览器限制脚本在不同源之间的交互。<u>同源是指协议、域名、端口号都相同</u>，只有在同源的情况下，浏览器才允许两个页面之间相互访问和交互数据</p><p><strong>同源策略在 DOM、Web 数据和网络三个层面均有体现：</strong></p><ul><li>DOM同源：不同源的页面无法操作dom</li><li>数据同源：不同源站点无法获取cookie、session、localstorage、IndexDB等等</li><li>网络同源：不同源站点无法请求网络数据</li></ul><p>💡<strong>如何解决跨域呢？</strong></p><p>解决跨域的方式有很多如：JSONP、 CORS（跨域资源共享）等等，对于跨域请求浏览器都会先进行预检请求(OPTIONS)</p><h3 id="简单、非简单请求" tabindex="-1">简单、非简单请求 <a class="header-anchor" href="#简单、非简单请求" aria-label="Permalink to &quot;简单、非简单请求&quot;">​</a></h3><p>简单请求和非简单请求是浏览器在向服务器发送跨域请求时的两种不同类型</p><p>简单请求（Simple Request）是指浏览器向服务器发送的请求，满足以下所有条件：</p><ol><li>使用以下方法之一：GET、HEAD、POST</li><li>Content-Type 的值仅限于下列三者之一： <ul><li>text/plain</li><li>multipart/form-data</li><li>application/x-www-form-urlencoded</li></ul></li><li>请求中的任何自定义 header 都使用以下方法设置： <ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type （但仅限于上面三个可选值）</li></ul></li><li>请求中没有使用 ReadableStream 对象</li></ol><p>简单请求不需要进行额外的 CORS 预检请求（CORS Preflight Request）即可跨域访问资源，浏览器会直接发送请求，并将响应数据返回给前端</p><p>非简单请求（Non-Simple Request）是指浏览器向服务器发送的请求，不满足简单请求的所有条件。在这种情况下，浏览器必须先发送一个 CORS 预检请求（CORS Preflight Request）给服务器，以确定是否允许跨域访问资源。CORS 预检请求会先使用 OPTIONS 方法发送一个带有特定 header（例如 Access-Control-Request-Method 和 Access-Control-Request-Headers）的请求，服务器收到预检请求后，根据请求头中的信息判断是否允许跨域请求。如果服务器返回允许跨域请求的响应头，浏览器才会发送实际的请求</p><h3 id="jsonp" tabindex="-1">JSONP <a class="header-anchor" href="#jsonp" aria-label="Permalink to &quot;JSONP&quot;">​</a></h3><p>使用JSONP解决跨域问题，以下在请求api后会执行jsonpCb回调；JSONP仅支持GET请求，目前大多数浏览器都开始限制对 JSONP 的支持，不允许通过 script 标签加载不安全的跨域脚本文件</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">	createJSONP</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> jsonpCb</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 处理返回的数据...</span></span>
<span class="line"><span style="color:#BABED8;">	console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 创建JSONP标签加载数据</span></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#82AAFF;"> createJSONP</span><span style="color:#89DDFF;">()</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> script</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">script</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	script</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">src</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">http://localhost:10000/api?callback=jsonpCb</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#BABED8;">	document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">head</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">script</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h3 id="cors" tabindex="-1">CORS <a class="header-anchor" href="#cors" aria-label="Permalink to &quot;CORS&quot;">​</a></h3><p>除了JSONP之外大多数都可以使用CORS（跨域资源共享）协议进行跨域请求，CORS 协议通过在 HTTP <a href="https://fetch.spec.whatwg.org/#http-responses" target="_blank" rel="noreferrer">头部添加一些字段</a>来告知浏览器，哪些源可以被信任，从而使得跨域请求得以正常进行。在 CORS 协议中，服务器端需要设置<code>Access-Control-Allow-Origin</code>等头部信息来指定允许跨域请求的源和方法，这里使用nginx代理进行cors的配置</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 设置允许的源(IP+PORT)</span></span>
<span class="line"><span style="color:#89DDFF;">add_header </span><span style="color:#BABED8;">Access-Control-Allow-Origin </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_origin</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 设置允许的 请求方法</span></span>
<span class="line"><span style="color:#89DDFF;">add_header </span><span style="color:#BABED8;">Access-Control-Allow-Methods </span><span style="color:#C3E88D;">&#39;OPTIONS, GET, POST, PUT, DELETE&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 设置允许的请求头</span></span>
<span class="line"><span style="color:#89DDFF;">add_header </span><span style="color:#BABED8;">Access-Control-Allow-Headers </span><span style="color:#C3E88D;">&#39;x-locale&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 其他自定义...</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 预检请求 204 快速返回</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">request_method </span><span style="color:#89DDFF;">= </span><span style="color:#C3E88D;">&#39;OPTIONS&#39;</span><span style="color:#BABED8;">) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">   return</span><span style="color:#F78C6C;"> 204</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">}</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_set_header </span><span style="color:#BABED8;">X-Real-IP </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">remote_addr</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_set_header </span><span style="color:#BABED8;">X-Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_set_header </span><span style="color:#BABED8;">X-Http-Host </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">http_host</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_set_header </span><span style="color:#BABED8;">X-Forwarded-Scheme </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">scheme</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_set_header </span><span style="color:#BABED8;">X-Forwarded-For </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">proxy_add_x_forwarded_for</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">proxy_pass </span><span style="color:#BABED8;">http://backend</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>具体可以查看<a href="https://blog.usword.cn/frontend/nginx/index#%E9%85%8D%E7%BD%AE%E8%B7%A8%E5%9F%9F" target="_blank" rel="noreferrer">「nginx配置跨域」</a></p><h3 id="postmessage" tabindex="-1">postMessage <a class="header-anchor" href="#postmessage" aria-label="Permalink to &quot;postMessage&quot;">​</a></h3><p>不做解释...</p><h2 id="数据传输" tabindex="-1">数据传输 <a class="header-anchor" href="#数据传输" aria-label="Permalink to &quot;数据传输&quot;">​</a></h2><p>HTTP<code>定长传输</code>和<code>不定长传输</code>是两种常见的 HTTP 报文传输方式，定长传输需要在 HTTP 请求头中指定消息体的长度，服务器可以一次性读取整个消息体并返回，不定长传输通过传输编码（如分块编码）来动态地读取消息体一部分一部分的返回内容</p><h3 id="定长传输" tabindex="-1">定长传输 <a class="header-anchor" href="#定长传输" aria-label="Permalink to &quot;定长传输&quot;">​</a></h3><p>定长传输是一种HTTP消息传输方式，其中消息体的长度在请求或响应中预先指定。在这种传输方式中，发送方将消息体的长度包含在消息头中的<code>Content-Length</code>字段中，接收方使用该字段来确定消息体的长度，从而正确读取消息</p><p>使用定长传输的主要优点是，接收方可以在读取消息体之前知道其长度，从而可以更好地管理接收缓冲区的大小和减少内存分配的需求。此外，定长传输还可以简化协议的实现，因为发送方和接收方都不需要解析消息体的内容来确定其长度</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> curl http://localhost:10000 -I</span></span>
<span class="line"><span style="color:#FFCB6B;">HTTP/1.1</span><span style="color:#F78C6C;"> 200</span><span style="color:#C3E88D;"> OK</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Powered-By:</span><span style="color:#C3E88D;"> Express</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Type:</span><span style="color:#C3E88D;"> application/json</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> charset</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">utf-8</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Content-Length:</span><span style="color:#F78C6C;"> 12</span></span>
<span class="line"><span style="color:#FFCB6B;">ETag:</span><span style="color:#C3E88D;"> W/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">c-QETVAhUYmmve97quvZif9EL6tqM</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#C3E88D;"> Mon, </span><span style="color:#F78C6C;">24</span><span style="color:#C3E88D;"> Apr </span><span style="color:#F78C6C;">2023</span><span style="color:#F78C6C;"> 09</span><span style="color:#C3E88D;">:12:52 GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> keep-alive</span></span>
<span class="line"><span style="color:#FFCB6B;">Keep-Alive:</span><span style="color:#C3E88D;"> timeout=</span><span style="color:#F78C6C;">5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>上面的例子中，Content-Length 为 12，表示消息体的长度为 12 个字节，即 Hello World。服务器在读取到请求头之后，就知道了消息体的长度，可以一次性读取整个消息体，处理速度较快</p><h3 id="不定长传输" tabindex="-1">不定长传输 <a class="header-anchor" href="#不定长传输" aria-label="Permalink to &quot;不定长传输&quot;">​</a></h3><p>在 HTTP 请求头中指定传输编码，使得 HTTP 报文的长度未知，但是可以通过不定长的方式来传输消息体。最常用的编码方式是通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Transfer-Encoding" target="_blank" rel="noreferrer">Transfer-Encoding</a>设置分块编码（Chunked Encoding），将消息体分成多个大小相等的块，每个块都带有自己的大小信息和一个表示块结束的标志，服务器在读取完一个块之后才会知道下一个块的大小和内容，从而动态地读取消息体，这种方式也被称为消息长度未确定（Message Length Unknown）方式</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// nodejs模拟不定长传输</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/chunked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setHeader</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Transfer-Encoding</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">chunked</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">  let</span><span style="color:#BABED8;"> timer</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    i</span><span style="color:#89DDFF;"> =</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 1s返回一次 总共返回9次</span></span>
<span class="line"><span style="color:#BABED8;">  timer</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">    res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">write</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`\${</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">    if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">i</span><span style="color:#89DDFF;"> &gt;=</span><span style="color:#F78C6C;"> 10</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#82AAFF;">      clearInterval</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">      res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">end</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span></span>
<span class="line"><span style="color:#BABED8;">    i</span><span style="color:#89DDFF;">++;</span></span>
<span class="line"><span style="color:#89DDFF;">  },</span><span style="color:#F78C6C;"> 1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230424163331892.png" alt=""></p><div class="img-title">wireshark抓包(服务器主动发送9次)</div><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/http-chunk-2020042410002.gif" alt=""></p><div class="img-title">动图展示请求过程</div><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">➜</span><span style="color:#C3E88D;"> curl http://localhost:10000/chunked -I</span></span>
<span class="line"><span style="color:#FFCB6B;">HTTP/1.1</span><span style="color:#F78C6C;"> 200</span><span style="color:#C3E88D;"> OK</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Powered-By:</span><span style="color:#C3E88D;"> Express</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Transfer-Encoding:</span><span style="color:#C3E88D;"> chunked</span></span>
<span class="line"><span style="color:#FFCB6B;">Date:</span><span style="color:#C3E88D;"> Mon, </span><span style="color:#F78C6C;">24</span><span style="color:#C3E88D;"> Apr </span><span style="color:#F78C6C;">2023</span><span style="color:#F78C6C;"> 08</span><span style="color:#C3E88D;">:49:25 GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> keep-alive</span></span>
<span class="line"><span style="color:#FFCB6B;">Keep-Alive:</span><span style="color:#C3E88D;"> timeout=</span><span style="color:#F78C6C;">5</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>不定长传输是一种灵活、高效的消息传输方式，适用于流式数据的传输和动态调整消息体长度的场景</p><h3 id="范围请求" tabindex="-1">范围请求 <a class="header-anchor" href="#范围请求" aria-label="Permalink to &quot;范围请求&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>HTTP的范围请求在大文件的下载中发挥着重要的地位，能够有效的降低网络带宽、资源浪费的情况；使用范围请求需要服务端的支持，HTTP状态码会返回206（Partial Content）</p></div><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Range" target="_blank" rel="noreferrer">HTTP范围(Range)请求</a>可以用于请求服务器返回<u>资源的部分内容</u>。范围请求可以通过指定资源的字节范围来实现，例如请求一个视频文件的某个时间段的内容，通过在请求头中添加Range字段来实现：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 指定开始和结束</span></span>
<span class="line"><span style="color:#FFCB6B;">Range:</span><span style="color:#C3E88D;"> bytes=</span><span style="color:#F78C6C;">0</span><span style="color:#C3E88D;">-1</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 指定开始一直到结尾</span></span>
<span class="line"><span style="color:#FFCB6B;">Range:</span><span style="color:#C3E88D;"> bytes=</span><span style="color:#F78C6C;">100</span><span style="color:#C3E88D;">-</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 多个范围</span></span>
<span class="line"><span style="color:#FFCB6B;">Range:</span><span style="color:#C3E88D;"> bytes=</span><span style="color:#F78C6C;">10</span><span style="color:#C3E88D;">-20, </span><span style="color:#F78C6C;">50</span><span style="color:#C3E88D;">-60</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>Range请求需要服务端的支持才可以，在支持Range请求会返回响应的头部：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 表示范围请求单位 bytes， 不支持时为none，一般也不会由此字段</span></span>
<span class="line"><span style="color:#FFCB6B;">Accept-Range:</span><span style="color:#C3E88D;"> bytes</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当服务器收到对应的范围请求后头部也会标识对应的范围字段和整体大小：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Content-Range:</span><span style="color:#C3E88D;"> bytes </span><span style="color:#F78C6C;">10</span><span style="color:#C3E88D;">-20/123456</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>💡<strong>使用nodejs简单的示范一下范围请求：</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 发起范围请求 </span></span>
<span class="line"><span style="color:#82AAFF;">fetch</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> headers</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> {</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#F07178;">Range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">bytes=10-100</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// nodejs服务</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/range</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#C792EA;"> async</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">download</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">./test.txt</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#F07178;">    acceptRange</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>以下是具体的传输过程中所带的信息，部分字段已经被省略：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># General</span></span>
<span class="line"><span style="color:#FFCB6B;">Request</span><span style="color:#C3E88D;"> URL: http://localhost:10000/range</span></span>
<span class="line"><span style="color:#FFCB6B;">Request</span><span style="color:#C3E88D;"> Method: GET</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Status</span><span style="color:#C3E88D;"> Code: </span><span style="color:#F78C6C;">206</span><span style="color:#C3E88D;"> Partial Content</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Response Headers</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Accept-Ranges:</span><span style="color:#C3E88D;"> bytes</span></span>
<span class="line"><span style="color:#FFCB6B;">Cache-Control:</span><span style="color:#C3E88D;"> public, max-age=</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> keep-alive</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Length:</span><span style="color:#F78C6C;"> 1171</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Content-Range:</span><span style="color:#C3E88D;"> bytes </span><span style="color:#F78C6C;">100</span><span style="color:#C3E88D;">-1270/1271</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Powered-By:</span><span style="color:#C3E88D;"> Express</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Request Headers</span></span>
<span class="line"><span style="color:#FFCB6B;">Host:</span><span style="color:#C3E88D;"> localhost:10000</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Range:</span><span style="color:#C3E88D;"> bytes=</span><span style="color:#F78C6C;">100</span><span style="color:#C3E88D;">-</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>范围请求通常的使用场景有如下：</p><ul><li>下载大文件：当需要下载大文件时，如果客户端在网络不稳定或带宽较小的情况下下载完整的文件会导致下载速度慢或者下载失败，因此使用范围请求可以只下载部分文件，从而提高下载速度和成功率</li><li>音视频流的播放：在播放音视频流时，客户端可以使用范围请求来获取特定的时间段内的数据，而不是获取整个文件。这可以提高播放的响应速度和减少缓冲时间</li></ul><p>总之，范围请求允许获取资源的部分内容，减少网络流量和提高传输速度</p><h3 id="大文件上传与下载" tabindex="-1">大文件上传与下载 <a class="header-anchor" href="#大文件上传与下载" aria-label="Permalink to &quot;大文件上传与下载&quot;">​</a></h3><p>了解如何进行大文件上传与下载对于HTTP的使用难点、复杂度有更深入的认识，由于篇幅原因这里不做演示了，可以查看我的<a href="/frontend/performance/chunk-upload.html">「大文件上传」</a>与<a href="/frontend/performance/range-download.html">「大文件下载」</a>相关文章</p><h2 id="身份认证" tabindex="-1">身份认证 <a class="header-anchor" href="#身份认证" aria-label="Permalink to &quot;身份认证&quot;">​</a></h2><p>我们知道HTTP是个无状态协议，想要限制资源的访问，就需要客户端与服务端建立一套身份认证机制，对于鉴别了身份的人才可以获取相关资源</p><p>常见的认证机制如<code>Cookie</code>、<code>Session</code>、<code>Token</code>等技术，这里简单介绍下Cookie和Session</p><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie&quot;">​</a></h3><p>Cookie是一种存储在客户端的小型文本文件(存储大小通常为4kb)，它由Web服务器发送给Web浏览器，并保存在用户的本地计算机上。Cookie可以用于存储用户的会话信息、偏好设置、购物车内容等数据，以便以后使用。可以通过cookie的具体参数精确设置使用范围、过期时间等等，统一域名可以使用一个或多个cookie，浏览器发送请求时会在头部携带上相关的cookie信息，设置cookie相关参数包括：</p><ul><li>名称（Name）：Cookie的名称，用于标识Cookie</li><li>值（Value）：Cookie的值，保存在客户端计算机上，由服务器设置</li><li>域（Domain）：Cookie的作用域，指定Cookie可访问的域名，只有当前域名才可以使用，可以设置具体域名，也可以使用<code>.domain.com</code>这种所有子域名等等</li><li>路径（Path）：Cookie的路径，除了指定域名外，还可以设置指定的路径，其他路径则不能使用当前cookie</li><li>过期时间（Expires/maxAge）：指定Cookie的过期时间，<u>expires设置具体的时间，maxAge设置相对时间，maxAge的优先级高于expires，如果未设置，则只在当前会话中有效，关闭浏览器会失效；当maxAge位0时表示要清楚当前cookie</u></li><li>安全（Secure）：指定Cookie是否<u>只能通过HTTPS连接传输</u></li><li>HttpOnly：<u>只能通过HTTP协议传输，JS无法访问防止XSS攻击</u></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 使用nodejs模拟cookie</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> express</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cookie</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__ut</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">123456</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // maxAge: 0, 表示清除cookie</span></span>
<span class="line"><span style="color:#F07178;">  maxAge</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1000</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 60</span><span style="color:#89DDFF;"> *</span><span style="color:#F78C6C;"> 10</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;"> // 优先级高</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // expires: new Date(&quot;2023-04-24 10:17&quot;),</span></span>
<span class="line"><span style="color:#F07178;">  httpOnly</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 只允许HTTP请求使用，其他方式无法获取</span></span>
<span class="line"><span style="color:#F07178;">  secure</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 规定cookie只能HTTPS传输</span></span>
<span class="line"><span style="color:#F07178;">  sameSite</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">strict</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 同站点使用</span></span>
<span class="line"><span style="color:#F07178;">  domain</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">localhost</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#676E95;font-style:italic;">  // 生效的域名</span></span>
<span class="line"><span style="color:#F07178;">  path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">/cookie.html</span><span style="color:#89DDFF;">&quot;</span><span style="color:#676E95;font-style:italic;">  // 生效的路径，默认 / 所有路径生效</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>上面使用nodejs设置了key为__ut、值为123456的cookie，并设置了相关的属性 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230424103838496.png" alt=""></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 当设置了httpOnly后，无法在页面中获取</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">cookie)</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;"> // &#39;&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>当页面有了相关cookie后，在cookie没有过期时，每次请求都会携带上相关的cookie</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Accept:</span><span style="color:#C3E88D;"> text/html,application/xhtml+xml,application/xml</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.9</span><span style="color:#C3E88D;">,image/avif,image/webp,image/apng,</span><span style="color:#BABED8;">*</span><span style="color:#C3E88D;">/</span><span style="color:#BABED8;">*</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.8</span><span style="color:#C3E88D;">,application/signed-exchange</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">b3</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.7</span></span>
<span class="line"><span style="color:#FFCB6B;">Accept-Encoding:</span><span style="color:#C3E88D;"> gzip, deflate, br</span></span>
<span class="line"><span style="color:#FFCB6B;">Accept-Language:</span><span style="color:#C3E88D;"> zh-CN,zh</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.9</span><span style="color:#C3E88D;">,en</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">q</span><span style="color:#89DDFF;">=</span><span style="color:#F78C6C;">0.8</span></span>
<span class="line"><span style="color:#FFCB6B;">Cache-Control:</span><span style="color:#C3E88D;"> max-age=</span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> keep-alive</span></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Cookie:</span><span style="color:#C3E88D;"> __ut=</span><span style="color:#F78C6C;">123456</span></span>
<span class="line"><span style="color:#FFCB6B;">Host:</span><span style="color:#C3E88D;"> localhost:10000</span></span>
<span class="line"><span style="color:#FFCB6B;">If-Modified-Since:</span><span style="color:#C3E88D;"> Mon, </span><span style="color:#F78C6C;">24</span><span style="color:#C3E88D;"> Apr </span><span style="color:#F78C6C;">2023</span><span style="color:#F78C6C;"> 01</span><span style="color:#C3E88D;">:10:45 GMT</span></span>
<span class="line"><span style="color:#FFCB6B;">If-None-Match:</span><span style="color:#C3E88D;"> W/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">201-187b0d02a08</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">sec-ch-ua:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">Chromium</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">112</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Google Chrome</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">112</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">, </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Not:A-Brand</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;">v</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">99</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">sec-ch-ua-mobile:</span><span style="color:#C3E88D;"> ?0</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="session" tabindex="-1">Session <a class="header-anchor" href="#session" aria-label="Permalink to &quot;Session&quot;">​</a></h3><p>和Cookie相比Session是将认证信息存储在服务器，由服务器进行管理。具体是用户登录后服务器将会生成一个session对象，该对象包含一个唯一的sessionId还有过期时间等其他信息，服务端将sessionId存入cookie中设置到客户端，这样用户下次访问时便会带上cookie，服务器根据cookie中的sessionId对比存储起来的session信息，这便是session的原理</p><p>由于session存放在服务端，当数据量大时会消耗很多资源，采用负载均衡时要保持数据的同步和一致</p><p>这里不再演示Session的使用方法，感兴趣的同学可以自行搜索。此外还可以使用token的方式进行认证，这里不再介绍</p><h2 id="http攻击" tabindex="-1">HTTP攻击 <a class="header-anchor" href="#http攻击" aria-label="Permalink to &quot;HTTP攻击&quot;">​</a></h2><p>HTTP是互联网上最常用的协议之一，也是攻击者经常利用的目标之一。攻击者可以通过利用HTTP协议的漏洞或者弱点，实施各种攻击，如请求欺骗、SQL注入攻击、跨站脚本攻击、跨站请求伪造攻击、拒绝服务攻击等。这些攻击可能会导致用户隐私泄露、系统瘫痪、数据丢失等严重后果，给个人和企业带来极大的损失</p><p>这里将列举常见的几种攻击，并结合例子演示攻击过程以及有效的防御措施</p><h3 id="xss" tabindex="-1">XSS <a class="header-anchor" href="#xss" aria-label="Permalink to &quot;XSS&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">温馨提示</p><p>🔍 本模块的代码可以点击<a href="https://github.com/ihengshuai/blog/tree/main/__example__/http-auth" target="_blank" rel="noreferrer">这里查看</a></p></div><p>XSS（Cross-Site Scripting）攻击是一种常见的Web安全漏洞，攻击者利用这种漏洞向网站注入恶意脚本代码（运行了不明来历的代码），使得当其他用户访问这个网站时，这些恶意脚本代码会在他们的浏览器中执行，从而达到攻击者的目的，比如窃取用户的敏感信息、篡改网页内容、盗用用户账户等。XSS攻击通常分为三种类型：<code>反射型XSS</code>、<code>存储型XSS</code>和<code>DOM-based XSS</code></p><table><thead><tr><th>类型</th><th>存储区</th><th>插入点</th></tr></thead><tbody><tr><td>存储型 XSS</td><td>后端数据库</td><td>HTML</td></tr><tr><td>反射型 XSS</td><td>URL</td><td>HTML</td></tr><tr><td>DOM 型 XSS</td><td>后端数据库/前端存储/URL</td><td>前端 JavaScript</td></tr></tbody></table><ol><li>存储型：通常是后端没有对SQL进行过滤，将恶意代码存储到了数据库中，渲染时恶意代码直接渲染到页面上了，没有转义时就会收到攻击<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 假如插入一个脚本</span></span>
<span class="line"><span style="color:#FFCB6B;">insert</span><span style="color:#C3E88D;"> into article values </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&#39;</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 页面在服务端渲染时</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">article&gt;&lt;%= getArticle</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;xxx&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">&gt;&lt;/article</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 出码结果，当浏览器运行时就会弹出 xss</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">article&gt;&lt;script</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">alert</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&quot;xss&quot;</span><span style="color:#89DDFF;">)&lt;</span><span style="color:#BABED8;">/script&gt;&lt;/article</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li>反射型：通常是将恶意代码存在链接中，服务端渲染时，取到链接参数渲染页面，没有进行转义就会收到攻击<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 假如有一个恶意的链接</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># https://www.website.com?id=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 服务端渲染</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#BABED8;">user&gt;&lt;%= getParameter</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">&#39;id&#39;</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">%&gt;&lt;/user</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>DOM型：这类通常是JS的一些漏洞，通过JS将恶意代码渲染到页面上<div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// JS有一段这样的逻辑</span></span>
<span class="line"><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">body </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> getURLQuery</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">id</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;"># </span><span style="color:#FFCB6B;">https</span><span style="color:#89DDFF;">:</span><span style="color:#676E95;font-style:italic;">//www.website.com?id=&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ol><p>💡<strong>那么如何防止XSS攻击呢？</strong></p><p>通过以上的分析可以得出XSS攻击产生恶意的脚本，然后在浏览器渲染时执行，可以通过以下方式进行防御：</p><ul><li>前端或后端对传入的内容进行转义（需要区分不同场景，转义不会影响页面渲染时）</li><li>后端存储入库时进行转义（同上）</li><li>页面渲染时进行字符转义（重要）</li></ul><p>💡 除了简单的转义操作，还可以使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">CSP（Content Secure Policy）</a>web内容安全策略，CSP 通过指定可信任资源的白名单，限制网页内容只能从指定的源加载，从而有效地减少了攻击者利用恶意脚本注入攻击的可能性，简单来讲此属性就是来配置资源加载白名单，符合白名单的才会加载，其余的浏览器都会阻止资源加载</p><p>CSP语法规则：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">Content-Security-Policy:</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#C3E88D;">policy-directiv</span><span style="color:#BABED8;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;"> [value1, [value2, [...]]]</span><span style="color:#89DDFF;">;</span><span style="color:#89DDFF;"> &lt;</span><span style="color:#FFCB6B;">policy-directive&gt;</span><span style="color:#C3E88D;"> ...</span></span>
<span class="line"><span style="color:#FFCB6B;">Content-Security-Policy-Report-Only:</span><span style="color:#C3E88D;"> 同上</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>以上是定义<code>Content-Security-Policy</code>和<code>Content-Security-Policy-Report-Only</code>HTTP头部的语法规则，<u>可以定义多个策略指令，指令之间使用<code>;</code>分隔；每个指令都可以定义多个值，多个值之间使用空格分隔；以上两个字段的区别在于<code>Content-Security-Policy-Report-Only</code>并不会阻止不安全的内容被加载，而是只会向服务器报告违规的内容，CSP-RO 只是提供了一种测试 CSP 策略的方式，而不会对实际的安全策略产生影响</u>。以下是两者常见的指令：</p><ul><li><code>default-src</code>：指定了所有其他资源类型的默认源。如果没有其他资源类型的特定源被指定，则使用此默认源</li><li><code>style-src</code>：指定了可以加载 CSS 样式表的源</li><li><code>script-src</code>：指定了可以加载 JavaScript 脚本的源</li><li><code>img-src</code>：指定了可以加载图像资源的源</li><li><code>connect-src</code>：指定了可以从文档加载的资源的来源，例如 XHR、WebSockets 或者 fetch</li><li><code>frame-ancestors</code>：指定了可以嵌入到文档中的父级的源，以及使用 frame-ancestors &#39;none&#39; 表示文档不能被嵌入到任何父级中</li><li><code>frame-src</code>：指定了可以嵌入到文档中的子资源（如 frame 和 iframe）的源，建议使用 child-src 代替</li><li><code>child-src</code>：指定了可以嵌入到文档中的子资源（如 frame 和 iframe）的源</li><li><code>manifest-src</code>：指定了用于获取 web 应用程序清单文件的源</li><li><code>report-uri</code>：指定了接收违规报告的 URI</li></ul><blockquote><p>这里只列出了部分的字段，更多字段的使用你可以查看<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">MDN相关文档</a></p></blockquote><p>这些字段的值可以设置成自己配置允许的域名外，同时也支持一些通配符如<code>http://*.usword.cn</code>，还有一些内置的值：</p><ul><li><code>none</code>：表示不允许从任何来源加载资源</li><li><code>self</code>：表示只允许从同一域名加载资源，即只允许从当前网站的域名加载资源</li><li><code>unsafe-inline</code>：表示允许在 HTML 元素的 style 属性和 script 元素内嵌入 JavaScript 代码</li><li><code>unsafe-eval</code>：表示允许使用 eval() 和 new Function() 等方法执行动态生成的 JavaScript 代码</li><li><code>strict-dynamic</code>：表示允许执行指定源的 JavaScript 代码，但是只有当这些源已经在页面中加载过了，并且只有在执行 JavaScript 代码之前进行了一些必要的检查之后才能执行</li></ul><p>👇 <strong>下面来演示CSP的使用：</strong></p><ol><li><p>假设以下是我们的网站页面，其中包含了引用的css脚本、内嵌css脚本、iframe、img、引用js、内嵌js</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;!</span><span style="color:#F07178;">DOCTYPE</span><span style="color:#C792EA;"> html</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">html</span><span style="color:#C792EA;"> lang</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">en</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">link</span><span style="color:#C792EA;"> rel</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">stylesheet</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">style.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">论坛页面</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">h2</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">style</span><span style="color:#C792EA;"> nonce</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">argus-csp-token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">  	button</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#B2CCD6;">    	color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> blue</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  	}</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">iframe</span><span style="color:#C792EA;"> width</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">300</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://www.youtube.com/embed/JeI_TsADXQA</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> allowfullscreen</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">iframe</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">img</span><span style="color:#C792EA;"> nonce</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">argus-csp-token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">https://general-mac.com/images/k8s-fine.jpg?w=400</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> style</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">display: block;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> alt</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> nonce</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">argus-csp-token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> src</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://localhost:10001/other.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> nonce</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">argus-csp-token</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  	console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">内嵌脚本执行</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">body</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">html</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></li><li><p>通过以下设置允许youtube的iframe、general-mac.com的图片、内嵌js，就是不允许其他域名的js，同时CSP-RO对于不是当前域名的样式发出报告，对于上面的网页内嵌css就会被上报，但不影响资源的加载</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#C792EA;">async</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">/</span><span style="color:#BABED8;">\\.</span><span style="color:#C3E88D;">html</span><span style="color:#89DDFF;">?[^</span><span style="color:#BABED8;">\\/</span><span style="color:#89DDFF;">]*/</span><span style="color:#F78C6C;">gi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">req</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">path</span><span style="color:#F07178;">)) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    	res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">header</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    		&quot;</span><span style="color:#C3E88D;">Content-Security-Policy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    		&quot;</span><span style="color:#C3E88D;">img-src https://general-mac.com;script-src http://website.com &#39;unsafe-inline&#39;; frame-ancestors http://website.com; frame-src https://youtu.be https://www.youtube.com; report-uri /report</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    	)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    	res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">header</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#89DDFF;">    		&quot;</span><span style="color:#C3E88D;">Content-Security-Policy-Report-Only</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">    		&quot;</span><span style="color:#C3E88D;">style-src &#39;self&#39;; report-to main-endpoint</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">    	)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    	res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">header</span><span style="color:#F07178;">(</span></span>
<span class="line"><span style="color:#89DDFF;">	      &quot;</span><span style="color:#C3E88D;">Reporting-Endpoints</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">	      &#39;</span><span style="color:#C3E88D;">main-endpoint=&quot;http://192.168.11.142:10000/report&quot;</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">	    )</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>在浏览器访问网页时，对于内联的css资源就会发出report报错，但不会影响样式 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230427141406549.png" alt=""></p><p>同时上面提供了上报的地址为<code>/report</code>，这里nodejs模拟一个上报接口：</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">// CSP POLICY REPORT</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/report</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // 针对上报上来的数据存储分析...</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    code</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 200</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    report</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>上报的格式长下面这个样子，具体的字段这里就不解释了，可以查看<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to" target="_blank" rel="noreferrer">MDN文档</a><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230427142010321.png" alt=""></p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>report-uri已经被废弃了，请使用<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to" target="_blank" rel="noreferrer">report-to</a>代替，report-to需要配合Reporting-Endpoints，详情请查看文档，注意CSP Leve3还<a href="https://www.w3.org/TR/CSP3/" target="_blank" rel="noreferrer">没有完全被支持</a></p></div></li></ol><p>除了配置CSP来限制资源的下载，还可以设置一些<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-XSS-Protection" target="_blank" rel="noreferrer">X-XSS-Protection</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Frame-Options" target="_blank" rel="noreferrer">X-Frame-Options</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/X-Content-Type-Options" target="_blank" rel="noreferrer">X-Content-Type-Options</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Strict-Transport-Security" target="_blank" rel="noreferrer">Strict-Transport-Security</a>、<a href="https://webtechsurvey.com/response-header/x-download-options" target="_blank" rel="noreferrer">X-Download-Options</a>来加强安全防范，这些字段的具体使用可以点击查看官方文档，简单演示下：</p><div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 启用 XSS 过滤。如果检测到攻击，阻止页面加载</span></span>
<span class="line"><span style="color:#FFCB6B;">X-XSS-Protection:</span><span style="color:#F78C6C;"> 1</span><span style="color:#89DDFF;">;</span><span style="color:#BABED8;"> mode</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">block</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 该页面不允许在 frame 中展示，即便是在相同域名的页面中嵌套也不允许</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Frame-Options:</span><span style="color:#C3E88D;"> DENY</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 禁止客户端的 MIME 类型嗅探行为</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Content-Type-Options:</span><span style="color:#C3E88D;"> nosniff</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 通知浏览器应该只通过 HTTPS 访问该站点，并且以后使用 HTTP 访问该站点的所有尝试都应自动重定向到 HTTPS</span></span>
<span class="line"><span style="color:#FFCB6B;">Strict-Transport-Security:</span><span style="color:#C3E88D;"> max-age=</span><span style="color:#F78C6C;">31536000</span><span style="color:#89DDFF;">;</span><span style="color:#FFCB6B;"> includeSubDomains</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 告诉浏览器禁止打开下载的文件</span></span>
<span class="line"><span style="color:#FFCB6B;">X-Download-Options:</span><span style="color:#C3E88D;"> noopen</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="csrf" tabindex="-1">CSRF <a class="header-anchor" href="#csrf" aria-label="Permalink to &quot;CSRF&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">温馨提示</p><p>🔍 本模块的代码可以点击<a href="https://github.com/ihengshuai/blog/tree/main/__example__/http-auth" target="_blank" rel="noreferrer">这里查看</a></p></div><p>CSRF（Cross-Site Request Forgery）攻击利用漏洞伪造用户的请求，使得当用户在访问一个被攻击者控制的网站时，恶意请求会被发送到一个受害者网站，从而完成攻击。比如攻击者可以伪造一个包含恶意操作的表单，当用户在攻击者控制的网站上提交这个表单时，实际上是向受害者网站发送了一个带有攻击代码的请求，从而实现攻击。CSRF攻击可以导致用户在不知情的情况下执行了恶意操作，比如修改账户信息、转账、发送垃圾邮件等</p><h4 id="csrf攻击演示" tabindex="-1">🔗 CSRF攻击演示 <a class="header-anchor" href="#csrf攻击演示" aria-label="Permalink to &quot;:link: CSRF攻击演示&quot;">​</a></h4><p>这里使用nodejs简单的模拟银行转账的过程，我们知道CSRF攻击是通过第三方网站进行攻击的，这里模拟两个网站，一个是正常的论坛类型网站<code>192.168.11.143:10000</code>，黑客在上面发布了一条链接指向黑客网站<code>localhost:10001</code>，当受害人登录后点击黑客发布的链接，就会被攻击。具体步骤如下：</p><ol><li><p>这是正常的论坛页面，小明登录后，页面种下登录信息cookie，然后小明点击了黑客在页面上发的链接 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230426142116982.png" alt=""></p></li><li><p>黑客链接页面<code>localhost:10001/hack.html</code>很简单，隐藏了一个表单，进入页面会自动请求<code>http://192.168.11.143:10000/transfer</code>并设置对应的参数<code>amount</code>和<code>to</code></p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- 黑客网站 --&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#C792EA;"> method</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> action</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http://192.168.11.143:10000/transfer</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hidden</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">amount</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">10000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hidden</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">to</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;"> value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">攻击者账号</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">form</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">submit</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li><p>当小明点击了黑客的链接后跳转到黑客页面后自动提交表单发起转账请求，请求也携带了小明cookie，服务器以为是小明自己发起的请求，这样就会转账成功。如下图Chrome Devtools记录了整个请求流程 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230426143844191.png" alt=""> 以上简单的演示了攻击过程，当然黑客不可能发布这么明显的链接，通常都会用诱人的内容（如：中奖、图片等等）来勾引你点击，而就是这么简单的操作就会被攻击</p></li></ol><h4 id="那么如何防止csrf攻击呢" tabindex="-1">💡 那么如何防止CSRF攻击呢？ <a class="header-anchor" href="#那么如何防止csrf攻击呢" aria-label="Permalink to &quot;:bulb: 那么如何防止CSRF攻击呢？&quot;">​</a></h4><p>防止CSRF攻击的方式还是有很多种，这里介绍常见的抵御方式</p><ol><li><p><u>验证来源站点Referer、Origin</u>：浏览器会对页面中的所有请求添加<code>Referer</code>头来标识请求来源，通过对比Referer字段来判断是不是本站请求，不是的都统统禁止掉，这里使用nginx演示不是<code>website.com</code>域的都被禁止了</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#C792EA;">	location</span><span style="color:#FFCB6B;"> / </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">		# 只允许 website.com相关域名可以访问，其余都会返回 403</span></span>
<span class="line"><span style="color:#89DDFF;">		valid_referers </span><span style="color:#BABED8;">none blocked server_names </span><span style="color:#C3E88D;">&quot;~.*website\\.com$&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">		if</span><span style="color:#BABED8;"> (</span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">invalid_referer) </span><span style="color:#F07178;">{</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">			return</span><span style="color:#F78C6C;"> 403</span><span style="color:#F07178;">;</span></span>
<span class="line"><span style="color:#F07178;">		}</span></span>
<span class="line"><span style="color:#BABED8;">	}</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>这种方式并不是很安全，Referer头可能被篡改。而此种方式对于搜索引擎打开是硬伤，因为从搜索引擎中打开链接都会携带相关联的Referer头，如下图搜索本博客时打开，会带上google的域名，这样打开时就会被禁止掉403 <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230426144952199.png" alt=""></p><p>除了Referer，Origin头字段也可以用来判断请求的来源，而当页面重定向时Origin头不会存在，它们都是简单的防御策略</p><p><img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/image-20230427082751023.png" alt=""></p></li><li><p><u>使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies#%E5%AE%9A%E4%B9%89_cookie_%E5%8F%91%E9%80%81%E7%9A%84%E4%BD%8D%E7%BD%AE" target="_blank" rel="noreferrer">SameSite Cookie</a> 属性</u>：我们知道此类攻击是盗用了受害者的身份信息，只要限制了第三方使用身份信息也能阻止攻击。<u>Cookie支持 SameSite 属性，其有三个值：Strict、Lax 和 None</u>。其中，Strict 表示完全禁止第三方 Cookie，Lax 表示只允许 GET 请求时携带第三方 Cookie，None 表示允许所有请求携带第三方 Cookie。建议使用 Lax，因为在大多数情况下都足够安全</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#82AAFF;">setCookie</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">	// 其他设置...</span></span>
<span class="line"><span style="color:#F07178;">	sameSite</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &#39;</span><span style="color:#C3E88D;">Lax</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><blockquote><p>虽然samesite能够防止一定的csrf攻击，但也会对一些第三方登录等功能进行限制</p></blockquote></li><li><p><u>双重验证（cookie、token、验证码）</u>：利用双重验证来提高安全性，假如每次表单提交，在页面中隐藏一个合法token，请求时携带给后端，后端拿到后验证token的合法性；再比如使用验证码，对于重要敏感的操作都进行验证码验证，提高安全性</p></li></ol><h2 id="websocket" tabindex="-1">WebSocket <a class="header-anchor" href="#websocket" aria-label="Permalink to &quot;WebSocket&quot;">​</a></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noreferrer">WebSocket</a> 是一种基于TCP协议的新型网络通信协议，它可以在浏览器和服务器之间建立双向实时通信的连接，可以用于实现各种实时应用，例如聊天室、多人游戏、股票行情等。在传统的 HTTP 协议中，需要使用轮询（Polling）或长轮询（Long Polling）等技术来实现实时通信，这些技术效率低下、延迟高。WebSocket 连接是长久保持的，可以支持服务器主动向客户端推送数据，而不需要客户端频繁地向服务器发送请求</p><p>websocket是一种全新的协议，和HTTP没有半点关系，为了兼容旧的http协议通常先使用HTTP请求通过<code>Connect</code>和<code>Upgrade</code>头进行协议升级为websocket，如果当前环境支持websocket协议就会升级成功。具体实现步骤如下：</p><ul><li>客户端通过 HTTP 或 HTTPS 协议向服务器发送 WebSocket 连接请求。请求的格式与普通的 HTTP 请求相同，其中请求头包含<code>Connection</code>、<code>Upgrade</code>、<code>Sec-WebSocket-Key</code>、<code>Sec-WebSocket-Version</code>等几个重要的头部字段：<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#FFCB6B;">GET</span><span style="color:#C3E88D;"> /chat HTTP/1.1</span></span>
<span class="line"><span style="color:#FFCB6B;">Host:</span><span style="color:#C3E88D;"> server.example.com</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 升级为 websocket</span></span>
<span class="line"><span style="color:#FFCB6B;">Upgrade:</span><span style="color:#C3E88D;"> websocket</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 想要升级当前协议</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> Upgrade</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 客户端随机生成的字符串，用于确保握手请求的唯一性</span></span>
<span class="line"><span style="color:#FFCB6B;">Sec-WebSocket-Key:</span><span style="color:#BABED8;"> [随机生成的字符串]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 指示客户端使用的 WebSocket 协议的版本号</span></span>
<span class="line"><span style="color:#FFCB6B;">Sec-WebSocket-Version:</span><span style="color:#F78C6C;"> 13</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li><li>服务器收到请求后如果允许协议升级，将会返回相应的头部字段，其中包含<code>Upgrade</code>、<code>Connection</code>、<code>Sec-WebSocket-Accept</code>等几个重要的头部字段：<div class="language-sh line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 状态101协议转换</span></span>
<span class="line"><span style="color:#FFCB6B;">HTTP/1.1</span><span style="color:#F78C6C;"> 101</span><span style="color:#C3E88D;"> Switching Protocols</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 可以升级到websocket</span></span>
<span class="line"><span style="color:#FFCB6B;">Upgrade:</span><span style="color:#C3E88D;"> websocket</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 升级协议</span></span>
<span class="line"><span style="color:#FFCB6B;">Connection:</span><span style="color:#C3E88D;"> Upgrade</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 服务器通过计算客户端的 Sec-WebSocket-Key 字段值生成的随机字符串，并进行 SHA-1 加密</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 客户端拿到此值后会对值进行验证</span></span>
<span class="line"><span style="color:#FFCB6B;">Sec-WebSocket-Accept:</span><span style="color:#BABED8;"> [加密后的 </span><span style="color:#C3E88D;">Sec-WebSocket-Key 字段值]</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></li><li>WebSocket 连接建立成功后，客户端和服务器就可以进行实时的双向通信了。客户端和服务器可以发送文本、二进制数据等消息，消息会被分割成多个数据帧进行传输。数据帧由帧头和帧体组成，帧头包含了一些元数据，例如消息类型、消息长度等信息</li></ul><p>📌 <strong>使用websocket简单实现多人聊天</strong></p><p>通过简单的HTML页面和nodejs实现多人聊天，没有登录认证等相关操作，关心核心socket通信就行了，本次代码你可以在 <a href="https://github.com/ihengshuai/blog/tree/main/__example__/websocket" target="_blank" rel="noreferrer">github</a> 中查看</p><p>简单的HTML页面（自行发挥）：</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">ul</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">text</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span><span style="color:#BABED8;">发送</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#C792EA;"> type</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> ws </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WebSocket</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ws://localhost:10000/socket</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> input </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">input</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> btn </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">button</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> chat </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">querySelector</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ul</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> URLSearchParams</span><span style="color:#BABED8;">(location</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">search)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> id </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> url</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">get</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">name</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">) </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">游客</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> +new</span><span style="color:#82AAFF;"> Date</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">	const</span><span style="color:#BABED8;"> reader </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> FileReader</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">	ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">error</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">	  console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">err</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">	ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">open</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">	  sendMessage</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;"> +</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">上线了</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">	ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">ev</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	  if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;"> instanceof</span><span style="color:#FFCB6B;"> Blob</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">	    reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readAsText</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	    reader</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onload</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">	      const</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> id</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> resId</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> msg</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">reader</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">result</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">||</span><span style="color:#89DDFF;"> {};</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">	      if</span><span style="color:#F07178;"> (</span><span style="color:#BABED8;">resId</span><span style="color:#89DDFF;"> !==</span><span style="color:#BABED8;"> id</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#C792EA;">	        const</span><span style="color:#BABED8;"> li</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	        li</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHTML</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">-「</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">resId</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">」说：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">msg</span><span style="color:#89DDFF;">}\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	        chat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">li</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	      }</span></span>
<span class="line"><span style="color:#89DDFF;">	    };</span></span>
<span class="line"><span style="color:#89DDFF;">	  }</span><span style="color:#89DDFF;font-style:italic;"> else</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">	    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">ev</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	  }</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">	btn</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addEventListener</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">click</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#82AAFF;">	  sendMessage</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">input</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">	  const</span><span style="color:#BABED8;"> li</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">li</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	  li</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">className</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">me</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	  li</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">innerHTML</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> \`</span><span style="color:#C3E88D;">「我」说：</span><span style="color:#89DDFF;">\${</span><span style="color:#BABED8;">input</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;"> -</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	  chat</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">li</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">	  input</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">value</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> &quot;&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">	function</span><span style="color:#82AAFF;"> sendMessage</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">msg</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">	  ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">stringify</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> id</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> msg</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">	}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><p>使用nodejs创建服务端：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> bodyParser </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">body-parser</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> express</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> http </span><span style="color:#89DDFF;">=</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">http</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> WebSocketServer </span><span style="color:#89DDFF;">}</span><span style="color:#89DDFF;"> =</span><span style="color:#82AAFF;"> require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ws</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> server </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> http</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createServer</span><span style="color:#BABED8;">(app)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(bodyParser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">urlencoded</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> extended</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> false</span><span style="color:#89DDFF;"> }</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(bodyParser</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#BABED8;">())</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">req</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> res</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> next</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cookie</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">__ut</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">emmmmm</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> {</span><span style="color:#F07178;"> maxAge</span><span style="color:#89DDFF;">:</span><span style="color:#F78C6C;"> 1000000000</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> httpOnly</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;"> true</span><span style="color:#89DDFF;"> }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#82AAFF;">  next</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#BABED8;">(express</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">static</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./static</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> wss </span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;"> new</span><span style="color:#82AAFF;"> WebSocketServer</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  server</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  path</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">/socket</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">wss</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">connection</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">ws</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;font-style:italic;"> clientConnect</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">  // console.log(clientConnect.headers.cookie);</span></span>
<span class="line"><span style="color:#BABED8;">  ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">message</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#C792EA;">    const</span><span style="color:#89DDFF;"> {</span><span style="color:#BABED8;"> id</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> msg</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;"> =</span><span style="color:#BABED8;"> JSON</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">parse</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toString</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">utf8</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">id</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> msg</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">    wss</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">clients</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">client</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">      client</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">    }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">  }</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  ws</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">server</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">listen</span><span style="color:#BABED8;">(</span><span style="color:#F78C6C;">10000</span><span style="color:#89DDFF;">,</span><span style="color:#89DDFF;"> ()</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">server on 10000</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">))</span><span style="color:#89DDFF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>以上创建好了后，通过<code>http://localhost:10000</code>访问页面，url上的<code>name</code>参数表示用户的名字，没有时默认显示游客+时间戳，现在你可以打开过个tab访问此页面，进行实时通讯吧，以下是几个截图： <img src="https://ihengshuai-demo1.oss-cn-beijing.aliyuncs.com/iShot_2023-05-08_09.16.44.png" alt=""></p><p>更完善更复杂的websocket应用还需要你自己发挥想象，这里就做这么多介绍</p><h2 id="参考文档" tabindex="-1">参考文档 <a class="header-anchor" href="#参考文档" aria-label="Permalink to &quot;参考文档&quot;">​</a></h2><ul><li><a href="https://www.hacksplaining.com/lessons" target="_blank" rel="noreferrer">漏洞动图演示</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP" target="_blank" rel="noreferrer">MDN HTTP Docs</a></li><li><a href="https://infosec.mozilla.org/guidelines/web_security" target="_blank" rel="noreferrer">MDN Web Security Policy</a></li><li><a href="https://www.invicti.com/white-papers/whitepaper-http-security-headers/" target="_blank" rel="noreferrer">HTTP安全标头</a></li><li><a href="https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot" target="_blank" rel="noreferrer">Unleashing an Ultimate XSS Polyglot</a></li><li><a href="https://github.com/mozilla/observatory-cli" target="_blank" rel="noreferrer">mozilla observatory</a></li><li><a href="https://security.googleblog.com/2009/03/reducing-xss-by-way-of-automatic.html" target="_blank" rel="noreferrer">xss-by-way-of-automatic</a></li><li><a href="http://prompt.ml/0" target="_blank" rel="noreferrer">prompt</a></li><li><a href="https://github.com/s0md3v/XSStrike" target="_blank" rel="noreferrer">XSStrike</a></li><li><a href="https://www.w3.org/TR/reporting-1/#header" target="_blank" rel="noreferrer">Reporting-Endpoints HTTP Response Header Field</a></li><li><a href="https://www.cloudflare.com/zh-cn/learning/ssl/what-happens-in-a-tls-handshake/" target="_blank" rel="noreferrer">TLS握手步骤</a></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>本篇文章大部分偏概念总结，自己学习时要结合实际练习，这样才不会觉得那么枯燥空洞</p>`,160);function y(D,d,u,b,m,h){const l=n("Reward"),p=n("Gitalk");return r(),o("div",null,[i,t(" 为什么需要头部压缩，在HTTP/1.1时传输数据时都会携带大量的头部信息，有时头部的长度可能都会大于真实的数据长度，这样将会严重浪费浪费流量，如下图：头部的长度173字节，而响应实体部分的长度才6字节，两者差距太大，严重影响流量，当使用HTTP2时头部长度已经压缩为64字节，大大减小头部长度，这就是HTTP2的压缩技术 "),F,s(l),s(p)])}const E=e(c,[["render",y]]);export{C as __pageData,E as default};
