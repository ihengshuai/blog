import{_ as a,c as s,o as e,V as l}from"./chunks/framework.SV1ROkXV.js";const m=JSON.parse('{"title":"Babel基本使用","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/babel/base.md","filePath":"frontend/babel/base.md","lastUpdated":1709440279000}'),n={name:"frontend/babel/base.md"},o=l(`<h1 id="babel基本使用" tabindex="-1">Babel基本使用 <a class="header-anchor" href="#babel基本使用" aria-label="Permalink to &quot;Babel基本使用&quot;">​</a></h1><p>// 待补充...</p><p>什么是babel？</p><h2 id="用途" tabindex="-1">用途 <a class="header-anchor" href="#用途" aria-label="Permalink to &quot;用途&quot;">​</a></h2><h2 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h2><p>.开头和非点开头</p><h3 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON&quot;">​</a></h3><h3 id="function" tabindex="-1">Function <a class="header-anchor" href="#function" aria-label="Permalink to &quot;Function&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#89DDFF;"> =</span><span style="color:#89DDFF;"> (</span><span style="color:#BABED8;font-style:italic;">api</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;"> =&gt;</span><span style="color:#89DDFF;"> {</span></span>
<span class="line"><span style="color:#BABED8;">  api</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">cache</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forever</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="presets" tabindex="-1">presets <a class="header-anchor" href="#presets" aria-label="Permalink to &quot;presets&quot;">​</a></h3><ul><li>presets和plugins执行顺序</li></ul><h3 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-label="Permalink to &quot;plugins&quot;">​</a></h3><h2 id="常见预设" tabindex="-1">常见预设 <a class="header-anchor" href="#常见预设" aria-label="Permalink to &quot;常见预设&quot;">​</a></h2><h2 id="常见插件" tabindex="-1">常见插件 <a class="header-anchor" href="#常见插件" aria-label="Permalink to &quot;常见插件&quot;">​</a></h2><h2 id="项目和相对文件配置" tabindex="-1">项目和相对文件配置 <a class="header-anchor" href="#项目和相对文件配置" aria-label="Permalink to &quot;项目和相对文件配置&quot;">​</a></h2><p>monorepo</p><ul><li>upward</li><li>file relation</li><li>babel-loader</li></ul><p>.babelrc 针对项目中文件的相对位置，当babel编译时文件会在当前路径及向上找.babelrc直到出现package.json停止，.babelrc适合针对某个具体文件进行配置 babel.config.js 是整个项目范围的配置，若项目中引用了根目录以上的文件，那这些文件将会被babel.config.js配置影响到，也就是说项目中所有的文件都会受作用；若项目中的存在.babelrc 将会和babel.config.js合并</p><h2 id="编译器假设compiler-assumptions" tabindex="-1">编译器假设Compiler assumptions <a class="header-anchor" href="#编译器假设compiler-assumptions" aria-label="Permalink to &quot;编译器假设Compiler assumptions&quot;">​</a></h2><p>会控制编译的输出</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight vp-code"><code><span class="line"><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">assumptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#BABED8;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">noDocumentAll</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> true,</span><span style="color:#676E95;font-style:italic;"> // 不输出文档</span></span>
<span class="line"><span style="color:#89DDFF;">  &quot;</span><span style="color:#C792EA;">noClassCalls</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;"> true</span><span style="color:#676E95;font-style:italic;"> // 不要classCallCheck</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">,</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://babeljs.io/docs/en" target="_blank" rel="noreferrer">https://babeljs.io/docs/en</a></li><li><a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/README.md" target="_blank" rel="noreferrer">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/README.md</a></li></ul>`,23),t=[o];function r(p,i,c,b,h,d){return e(),s("div",null,t)}const D=a(n,[["render",r]]);export{m as __pageData,D as default};
