import{_ as e,c as r,o as a,V as t}from"./chunks/framework.SV1ROkXV.js";const u=JSON.parse('{"title":"现代浏览器架构","description":"","frontmatter":{"title":"现代浏览器架构"},"headers":[],"relativePath":"frontend/browser/base.md","filePath":"frontend/browser/base.md","lastUpdated":1709440279000}'),o={name:"frontend/browser/base.md"},l=t('<h1 id="现代浏览器架构" tabindex="-1">现代浏览器架构 <a class="header-anchor" href="#现代浏览器架构" aria-label="Permalink to &quot;现代浏览器架构&quot;">​</a></h1><p>// 待更新...</p><h2 id="cpu、gpu" tabindex="-1">CPU、GPU <a class="header-anchor" href="#cpu、gpu" aria-label="Permalink to &quot;CPU、GPU&quot;">​</a></h2><h2 id="浏览器架构" tabindex="-1">浏览器架构 <a class="header-anchor" href="#浏览器架构" aria-label="Permalink to &quot;浏览器架构&quot;">​</a></h2><p>多进程、多线程...</p><h2 id="为什么要多进程" tabindex="-1">为什么要多进程 <a class="header-anchor" href="#为什么要多进程" aria-label="Permalink to &quot;为什么要多进程&quot;">​</a></h2><p>资源隔离、互不影响</p><h2 id="输入url后发生了什么" tabindex="-1">输入URL后发生了什么 <a class="header-anchor" href="#输入url后发生了什么" aria-label="Permalink to &quot;输入URL后发生了什么&quot;">​</a></h2><p>浏览器进程解析地址、导航线程、网络请求（DNS解析、TLS连接）数据传输、mime嗅探、IPC通知浏览器进程、选取渲染进程准备渲染、渲染进程渲染页面</p><p>文档加载完后会通知浏览器进程，tab的加载按钮就停止了；文档卸载时浏览器进程和渲染进程要进行通信确保unload事件</p><h2 id="浏览器内核、渲染内核" tabindex="-1">浏览器内核、渲染内核 <a class="header-anchor" href="#浏览器内核、渲染内核" aria-label="Permalink to &quot;浏览器内核、渲染内核&quot;">​</a></h2><h2 id="站点隔离" tabindex="-1">站点隔离 <a class="header-anchor" href="#站点隔离" aria-label="Permalink to &quot;站点隔离&quot;">​</a></h2><h2 id="页面渲染过程" tabindex="-1">页面渲染过程 <a class="header-anchor" href="#页面渲染过程" aria-label="Permalink to &quot;页面渲染过程&quot;">​</a></h2><p>嗅探MIME -&gt; 主线程解析DOM -&gt; 解析JS -&gt; 解析CSS -&gt; Layout Tree(几何形状)/layer -&gt; Paint(绘制顺序) -&gt; 光栅（图块转换为位图） -&gt; 合成(单独的线程、合成帧)、显示(GPU显示)</p><ol><li>生成DOM树</li><li>生成CSS树</li><li>生成布局树</li><li>分层</li><li>绘制</li><li>合成线程分块</li><li>光栅化位图</li><li>画</li></ol><h2 id="渲染优化" tabindex="-1">渲染优化 <a class="header-anchor" href="#渲染优化" aria-label="Permalink to &quot;渲染优化&quot;">​</a></h2><p>尽量使用仅合成动画：</p><ul><li>transform</li><li>opacity</li><li>will-change(最后使用)</li></ul><p>参考文献：</p><ul><li><a href="https://developer.chrome.com/blog/inside-browser-part1/" target="_blank" rel="noreferrer">https://developer.chrome.com/blog/inside-browser-part1/</a></li><li><a href="https://developer.chrome.com/blog/inside-browser-part2/" target="_blank" rel="noreferrer">https://developer.chrome.com/blog/inside-browser-part2/</a></li><li><a href="https://developer.chrome.com/blog/inside-browser-part3/" target="_blank" rel="noreferrer">https://developer.chrome.com/blog/inside-browser-part3/</a></li><li><a href="https://developer.chrome.com/blog/inside-browser-part4/" target="_blank" rel="noreferrer">https://developer.chrome.com/blog/inside-browser-part4/</a></li><li><a href="https://web.dev/howbrowserswork/" target="_blank" rel="noreferrer">https://web.dev/howbrowserswork/</a></li><li><a href="https://zhuanlan.zhihu.com/p/25380611" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/25380611</a></li></ul>',20),i=[l];function h(s,n,d,p,c,b){return a(),r("div",null,i)}const f=e(o,[["render",h]]);export{u as __pageData,f as default};
